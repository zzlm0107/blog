import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,a as n,b as s,d as t,e}from"./app-3f51fd7d.js";const l={},u=n("h2",{id:"初识nuxt",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#初识nuxt","aria-hidden":"true"},"#"),s(" 初识nuxt")],-1),r={href:"https://nuxt.com.cn/",target:"_blank",rel:"noopener noreferrer"},d=e(`<p>nuxt使用了vue作为框架语法，所以我们只需要像平时用vue一样书写组件即可。</p><p>nuxt一个重要特点就是 <strong>约定大于配置</strong>，即官方已经规定好了每个特殊文件夹的命名，开发者只需要遵守这些默认的约定，即可不用再书写过多的配置。</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>|- .nuxt      			非工程代码，存放运行的编译结果
|- node_modules
|- public
|- server				接口服务器目录
|- .gitignore
|- .npmrc
|- app.vue				根组件
|- nuxt.config.ts		nuxt配置文件
...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="路由" tabindex="-1"><a class="header-anchor" href="#路由" aria-hidden="true">#</a> 路由</h2><p>Nuxt的一个核心特性是文件系统路由器，即<strong>约定项目页面都放置于pages/文件夹下</strong>，这样nuxt就会依靠文件路径，自动帮你创建好路由，而无需再使用路由配置文件。</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>|-	pages
|	|-	index.vue			默认主页
|	|-	video/index.vue		/video/ 的默认页面
|	|-	video/hello.vue		/video/hello 对应页面
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>搭配路由出口和跳转链接即可实现完整的路由模块，<strong>当然也支持编程式跳转方式。</strong></p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 路由链接 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nuxt-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nuxt-link</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nuxt-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/video<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>视频默认页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nuxt-link</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nuxt-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/video/hello<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>视频详情页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nuxt-link</span><span class="token punctuation">&gt;</span></span>

  <span class="token comment">&lt;!-- 页面路由出口 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nuxt-page</span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外对于路由传参方面：</p><ul><li><p>query参数，直接在相应页面里使用 <code>useRoute()</code> 获取到route实例对象后通过 <code>route.query</code> 获取；</p></li><li><p>params参数，由于现在我们不再需要书写路由表，所以无法像像以前的写法那样为动态的params参数指定公共组件；但现在nuxt允许我们直接创建动态params参数的公共组件，只需将组件名用 <code>[]</code> 中括号包裹即可，里面就是params的变量名称。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>//  pages/video/[id].vue
//  这样的话，路由路径 /video/12 会自动匹配到这个组件，且将params参数 12 传递到这个组件中
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    这是动态params参数页,参数是{{ route.params.id }}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">const</span> route <span class="token operator">=</span> <span class="token function">useRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="组件" tabindex="-1"><a class="header-anchor" href="#组件" aria-hidden="true">#</a> 组件</h2><p>对于pages下面的组件，我们按照常规的写法创建组件，然后在需要的地方导入使用即可；</p><p>对于全局组件，nuxt约定 <strong>将全局组件都放到根目录下面的components文件夹下</strong>，nuxt会帮你进行自动全局注册，我们直接使用即可；如果在components文件夹下有多个层级，则nuxt会根据层级文件夹名自动生成新的组件名。</p><p>如果你在嵌套目录中有一个组件，例如:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>| components/
--| base/
----| foo/
------| Button.vue
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>... 然后组件的名称将基于它自己的路径、目录和文件名，删除重复的段。因此，组件的名称将是:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;BaseFooButton /&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="seo" tabindex="-1"><a class="header-anchor" href="#seo" aria-hidden="true">#</a> SEO</h2>`,18),k=n("code",null,"nuxt.config.ts",-1),v={href:"https://nuxt.com.cn/docs/api/configuration/nuxt-config#head",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"app.vue",-1),g=e(`<div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token function">useHead</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 配置网站标题</span>
  <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;nuxt3-app&#39;</span><span class="token punctuation">,</span>
  <span class="token comment">// 配置meta标签数组</span>
  <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;description&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&#39;My amazing site.&#39;</span> <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不仅是在<code>app.vue</code> 中，我们可以在任何一个页面中都使用 <code>usehead</code> 方法配置单独页面的元数据，并且单独配置的优先级更高。</p>`,2),b={href:"https://nuxt.com.cn/docs/getting-started/seo-meta",target:"_blank",rel:"noopener noreferrer"},h=n("h2",{id:"静态资源",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#静态资源","aria-hidden":"true"},"#"),s(" 静态资源")],-1),x=n("p",null,"Nuxt使用两个目录来处理像stylesheets, fonts 或 images这样的资产。",-1),f={href:"https://nuxt.com.cn/docs/guide/directory-structure/public",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"public/",-1),_=n("p",null,[s("例如，引用"),n("code",null,"public/img/"),s("目录下的图片文件，可在静态URL "),n("code",null,"/img/nuxt.png"),s(" 中获得（是绝对路径不是相对路径哦）")],-1),w={href:"https://nuxt.com.cn/docs/guide/directory-structure/assets",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"assets/",-1),C=e(`<p>此外，对于全局声明的css变量等文件，nuxt也约定将其放到assets文件夹下；</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineNuxtConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  vite<span class="token operator">:</span> <span class="token punctuation">{</span>
    css<span class="token operator">:</span> <span class="token punctuation">{</span>
      preprocessorOptions<span class="token operator">:</span> <span class="token punctuation">{</span>
        scss<span class="token operator">:</span> <span class="token punctuation">{</span>
          additionalData<span class="token operator">:</span> <span class="token string">&#39;@use &quot;@/assets/_colors.scss&quot; as *;&#39;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),F=e(`<h2 id="配置与访问" tabindex="-1"><a class="header-anchor" href="#配置与访问" aria-hidden="true">#</a> 配置与访问</h2><p><code>runtimeConfig</code> 向应用程序的其余部分公开了诸如环境变量之类的值。默认情况下，这些键只在服务器端可用，并且可以使用环境变量重写。<code>runtimeConfig.public</code>中的键也可以在客户端使用。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineNuxtConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  runtimeConfig<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在此配置的变量只能在服务端访问</span>
    apiSecret<span class="token operator">:</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">// public对象下的变量客户端也能访问到</span>
    <span class="token keyword">public</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      apiBase<span class="token operator">:</span> <span class="token string">&#39;/api&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>


<span class="token comment">// .env文件中 这将覆盖apiSecret的值</span>
<span class="token constant">NUXT_API_SECRET</span> <span class="token operator">=</span> token
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用配置的相关变量：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">const</span> runtimeConfig <span class="token operator">=</span> <span class="token function">useRuntimeConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了在 <code>nuxt.config.ts</code> 中进行配置相关变量外，我们还有另一种方式就是创建一个 <code>app.config.ts</code>,然后在这个文件里面配置一些变量使用。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// app.config.ts</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineAppConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  title<span class="token operator">:</span> <span class="token string">&#39;Hello Nuxt&#39;</span><span class="token punctuation">,</span>
  theme<span class="token operator">:</span> <span class="token punctuation">{</span>
    dark<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    colors<span class="token operator">:</span> <span class="token punctuation">{</span>
      primary<span class="token operator">:</span> <span class="token string">&#39;#ff0000&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">const</span> appConfig <span class="token operator">=</span> <span class="token function">useAppConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>区别</strong></p><ul><li><code>nuxt.config.ts</code> 中配置那些需要控制可访问性的变量，即在服务端或客户端的访问权限不同，以及需要被环境变量替换的一些配置；</li><li><code>app.config.ts</code> 中配置的变量在服务端和客户端都能被访问到，适合一些网站相关的配置，如主题变量，标题和任何不敏感的项目配置。</li></ul><h2 id="mock与请求" tabindex="-1"><a class="header-anchor" href="#mock与请求" aria-hidden="true">#</a> mock与请求</h2><h3 id="mock数据" tabindex="-1"><a class="header-anchor" href="#mock数据" aria-hidden="true">#</a> mock数据</h3><p>nuxt支持在本地进行数据模拟，就相当于内置了mock。前面我们提到 <code>server</code> 文件夹下就是存放的接口，事实上，Nuxt会自动扫描<code>~/server/api</code>, <code>~/server/routes</code>, 和 <code>~/server/middleware</code>目录中的文件，以注册具有HMR支持的API和服务器处理程序。</p><p>每个文件都应该导出一个用<code>defineEventHandler()</code>定义的默认函数。处理程序可以直接返回JSON数据，一个<code>Promise</code>或使用<code>event.node.res.end()</code>发送响应。所以对于本地模拟数据的需求，只需规范好对应的文件路径，即可自动生成对应路径的api接口进行请求测试。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// server/api/test/[id].post.ts</span>
<span class="token comment">// 对应的接口为    /api/test/id   post请求  其中id是params参数</span>
<span class="token comment">// 这意味着我们可以获取到这次请求的参数，从而返回不同的数据</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineEventHandler</span><span class="token punctuation">(</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// const query = getQuery(event) // 获取query参数</span>
  <span class="token comment">// const body = await readBody(event) // 获取请求体</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    api<span class="token operator">:</span> <span class="token string">&#39;works&#39;</span><span class="token punctuation">,</span>
    params<span class="token operator">:</span> event<span class="token punctuation">.</span>context<span class="token punctuation">.</span>params<span class="token punctuation">.</span>name
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后就可以通过<code>useFetch</code> 方法去请求这个模拟接口，当然此方法也支持去请求真实的接口：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">aaa</span><span class="token punctuation">(</span>params<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">useFetch</span><span class="token punctuation">(</span><span class="token string">&#39;/api/test/12&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    method<span class="token operator">:</span> <span class="token string">&#39;post&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，全覆盖路由有助于处理备用路由。例如，创建一个名为<code>~/server/api/foo/[...].ts</code> 的文件，将为所有不匹配任何路由处理程序的请求注册一个catch-all路由.</p><p>此外，当然也支持利用 <strong>axios</strong> 获取其他服务器上的请求，但需要注意一个问题：</p><ul><li>使用axios发起的请求通过服务端渲染编译一次后，获取到了数据填充到模板上形成了html文件返回给了客户端，但是客户端拿到的这个html里依然包含组件中相关的js逻辑，也就是说，客户端解析js时会再一次发起请求，这样数据就被获取了两次，并且是没有必要的。<strong>所以nuxt推荐使用他们提供的useFecth等函数（只会在服务端渲染时执行一次）获取数据而不是使用第三方工具库。</strong></li></ul><h3 id="请求api" tabindex="-1"><a class="header-anchor" href="#请求api" aria-hidden="true">#</a> 请求api</h3><p><strong>nuxt提供的相关请求api：</strong></p><ul><li><p><code>useFetch()</code></p><p>封装的请求函数，会自动生成基于URL和fetch选项的键。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">useFetch</span><span class="token punctuation">(</span><span class="token string">&#39;/api/test&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    method<span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>
    baseURL<span class="token operator">:</span> <span class="token string">&#39;http://example.com&#39;</span><span class="token punctuation">,</span>
    body<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token comment">//...  参考https://nuxt.com.cn/docs/api/composables/use-fetch</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回值：</p><ul><li><strong>data</strong>：传入的异步函数的结果。</li><li><strong>pending</strong>：一个布尔值，指示数据是否仍在获取中。</li><li><strong>refresh</strong>/<strong>execute</strong>：一个函数，用于刷新<code>handler</code>函数返回的数据。</li><li><strong>error</strong>：如果数据获取失败，则为错误对象。</li></ul></li><li><p><code>useAsyncData()</code></p><p>同样是获取数据，但需要传递一个key，并且可以在请求前处理一些逻辑</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">useAsyncData</span><span class="token punctuation">(</span><span class="token string">&#39;count&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在这我可以处理一些逻辑</span>
    <span class="token keyword">return</span> <span class="token function">$fetch</span><span class="token punctuation">(</span><span class="token string">&#39;/api/count&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该方法相比于<code>useFetch()</code>几乎一致，只是该方法需要手动提供key而后者会自动生成，返回值也基本相同。</p></li><li><p><code>useLazyFetch()</code></p><p>该方法与带有<code>lazy: true</code>选项集的<code>useFetch</code>相同。该方法发起请求并不会阻塞页面渲染，也就是说该方法发起请求在数据还未返回时页面就会更新，这意味着我们需要处理返回数据暂时为null的情况。 而<code>useFetch</code> 请求时会先展示之前的数据，直到结果返回时才更新数据，中间没有数据暂时为null的情况。</p></li><li><p><code>useLazyAsyncData()</code></p><p>方法与<code>useAsyncData</code>具有<code>lazy: true</code>选项集相同。</p></li></ul><h3 id="封装与拦截器" tabindex="-1"><a class="header-anchor" href="#封装与拦截器" aria-hidden="true">#</a> 封装与拦截器</h3><p>根据官方的方法，我们完全可以自己封装一个公共的请求方法，并通过拦截器实现与封装axios相同的功能函数：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>
    baseURL<span class="token operator">:</span> <span class="token string">&#39;http://example.com&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">// 请求拦截器</span>
    <span class="token function">onRequest</span><span class="token punctuation">(</span><span class="token punctuation">{</span> request<span class="token punctuation">,</span> options <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 设置请求头</span>
        options<span class="token punctuation">.</span>headers <span class="token operator">=</span> options<span class="token punctuation">.</span>headers <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        options<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>authorization <span class="token operator">=</span> <span class="token string">&#39;...&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 相应拦截器</span>
    <span class="token function">onResponse</span><span class="token punctuation">(</span><span class="token punctuation">{</span> request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> options <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">myUseFecth</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> requestConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span>resolve <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">useFetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>
            <span class="token operator">...</span>config
            <span class="token operator">...</span>requestConfig     
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
             <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
         <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="cookie和token" tabindex="-1"><a class="header-anchor" href="#cookie和token" aria-hidden="true">#</a> cookie和token</h2><p>由于cookie是存储在客户端的，使用ssr实际上是获取不到的，所以nuxt提供了一个函数用以从服务器端访问并代理cookie到api。</p><p><code>useRequestHeaders</code>方法可以在客户端像服务端请求这个组件html时拿到这次请求的headers里面的一些字段内容，由于这次请求时客户端发起的，所以里面会有一些客户端字段，这样拿到后再添加到服务端这边的请求方法，就实现了cookie的代理操作</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">const</span> headers <span class="token operator">=</span> <span class="token function">useRequestHeaders</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;cookie&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">useFetch</span><span class="token punctuation">(</span><span class="token string">&#39;/api/me&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> headers <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正对token，由于是服务端渲染，当然也就没有本地存储等相关内容，所以携带token一种方式就是把token放到cookie里，然后再从cookie中获取到添加到请求头中。</p><h2 id="渲染模式" tabindex="-1"><a class="header-anchor" href="#渲染模式" aria-hidden="true">#</a> 渲染模式</h2>`,32),R={href:"https://nuxt.com.cn/docs/guide/concepts/rendering#%E8%B7%AF%E7%94%B1%E8%A7%84%E5%88%99",target:"_blank",rel:"noopener noreferrer"},N=e(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineNuxtConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  routeRules<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// Static page generated on-demand, revalidates in background</span>
    <span class="token string-property property">&#39;/blog/**&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span> swr<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// Static page generated on-demand once</span>
    <span class="token string-property property">&#39;/articles/**&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token keyword">static</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 配置该路由下的响应头信息</span>
    <span class="token string-property property">&#39;/_nuxt/**&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span> headers<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;cache-control&#39;</span><span class="token operator">:</span> <span class="token string">&#39;s-maxage=0&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 该路由下关闭服务端渲染，使用客户端渲染</span>
    <span class="token string-property property">&#39;/admin/**&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span> ssr<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// Add cors headers</span>
    <span class="token string-property property">&#39;/api/v1/**&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span> cors<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 该路由下实现重定向</span>
    <span class="token string-property property">&#39;/old-page&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span> redirect<span class="token operator">:</span> <span class="token string">&#39;/new-page&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;/old-page2&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span> redirect<span class="token operator">:</span> <span class="token punctuation">{</span> to<span class="token operator">:</span> <span class="token string">&#39;/new-page&#39;</span><span class="token punctuation">,</span> statusCode<span class="token operator">:</span> <span class="token number">302</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function E(A,B){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("p",null,[n("a",r,[s("官方网站"),t(a)])]),d,n("p",null,[s("由于nuxt没有提供根html，那我们如何书写网页相关的标题描述等信息呢，事实上在nuxt中这些可以通过配置对象来实现。我们可以在在"),k,s("中提供"),n("a",v,[s("app.head"),t(a)]),s("属性（这个方法不允许你提供响应式数据）,或在"),m,s(" 中的方法的配置对象中实现全局的配置。")]),g,n("p",null,[s("更多细节参考 "),n("a",b,[s("官网文档"),t(a)])]),h,x,n("ul",null,[n("li",null,[n("p",null,[n("a",f,[y,s("目录"),t(a)]),s("内容原样提供给服务器根目录。")]),_]),n("li",null,[n("p",null,[n("a",w,[q,s("目录"),t(a)]),s("包含你想要构建工具处理的静态资源。")]),C])]),F,n("p",null,[s("nuxt允许我们为不同的路径下的页面配置不同的路由渲染规则，从而实现更好的性能优化： "),n("a",R,[s("更多细节"),t(a)])]),N])}const j=p(l,[["render",E],["__file","nuxt.html.vue"]]);export{j as default};
