import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as p,c as o,a as n,b as s,d as i,e as c}from"./app-8f05f71b.js";const l={},r={href:"https://www.bookstack.cn/read/es6-3rd/sidebar.md",target:"_blank",rel:"noopener noreferrer"},u=c(`<h2 id="let与const" tabindex="-1"><a class="header-anchor" href="#let与const" aria-hidden="true">#</a> let与const</h2><ul><li><p><strong>let</strong>:声明变量</p><p>特点：不允许重复声明；块级作用域；不存在变量提升；不影响作用域链</p></li><li><p><strong>const</strong>: 声明常量(<em>内存地址指针不会变化的变量，对象也算</em>)</p><p>特点：不允许重复声明；块级作用域；不存在变量提升；声明必须赋初始值</p></li><li><p><strong>var</strong>： 声明变量</p><p>特点：允许重复声明；全局作用域；存在变量提升</p></li></ul><h2 id="解构赋值" tabindex="-1"><a class="header-anchor" href="#解构赋值" aria-hidden="true">#</a> 解构赋值</h2><p>允许按照一定模式, <strong>从数组和对象中提取值, 对变量进行赋值</strong></p><ul><li>数组解构： <code>const [x, y] = [1, 2]</code></li><li>对象解构： <code>const { x, y } = { x: 1, y: 2 }</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 利用解构赋值交换变量</span>
<span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">2</span>
<span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>y<span class="token punctuation">,</span> x<span class="token punctuation">]</span>

<span class="token comment">// 遍历map结构</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">&quot; is &quot;</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="模板字符串" tabindex="-1"><a class="header-anchor" href="#模板字符串" aria-hidden="true">#</a> 模板字符串</h2><p>模板字符串（template string）是增强版的字符串, 用反引号[ \` ]标识. 它可以当作普通字符串使用, 也可以用来定义多行字符串, 或者在字符串中嵌入变量. 嵌入变量使用 <code>\${变量名}</code> 当然也可以放js表达式。</p><h2 id="箭头函数" tabindex="-1"><a class="header-anchor" href="#箭头函数" aria-hidden="true">#</a> 箭头函数</h2><p>ES6 允许使用“箭头”（<code>=&gt;</code>）定义函数.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意点：</p><ol><li>函数体内的 [ this ] 对象, 就是定义时所在的上下文对象, 而不是使用时所在的对象.</li><li>不可以当作构造函数使用。</li><li>不可以使用<code>arguments</code>对象, 该对象在函数体内不存在. 如果要用, 可以用 rest 参数代替.</li></ol><p><strong>高阶函数</strong>:就是一个函数就可以接收另一个函数作为参数, 或者是返回一个函数。常见的高阶函数有map、reduce、filter、sort等</p><p><strong>函数柯里化</strong>： 柯里化后, 将第一个参数变量存在函数内部(闭包), 然后本来需要n个参数的函数可以变成只需要剩下的（n - 1个）参数就可以调用。</p><h2 id="rest参数" tabindex="-1"><a class="header-anchor" href="#rest参数" aria-hidden="true">#</a> rest参数</h2><p>ES6 引入 rest 参数（形式为<code>...变量名</code>）, 用于获取函数的多余参数。rest参数在函数里内部将是一个由多余参数组成的数组。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">val1<span class="token punctuation">,</span>val2<span class="token punctuation">,</span> <span class="token operator">...</span>others</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>others<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// [3,4,5]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="set数据结构" tabindex="-1"><a class="header-anchor" href="#set数据结构" aria-hidden="true">#</a> Set数据结构</h2><p>set是形如数组，但成员值都是唯一且没有重复情况的数据结构。需要使用 <code>new Set()</code> 创建。</p><ul><li><p><strong>add()</strong>: 添加值，返回实例</p></li><li><p><strong>delete()</strong>: 删除值，返回布尔</p></li><li><p><strong>has()</strong>: 检查值，返回布尔</p></li><li><p><strong>clear()</strong>: 清除所有成员</p></li><li><p><strong>keys()</strong>: 等同values()方法</p></li><li><p><strong>values()</strong>: 返回以属性值为遍历器的对象</p></li><li><p><strong>entries()</strong>: 返回以属性值和属性值为遍历器的对象</p></li><li><p><strong>forEach()</strong>: 使用回调函数遍历每个成员</p></li></ul><p><strong>应用场景</strong></p><ul><li>去重字符串: <code>[...new Set(str)].join(&quot;&quot;)</code></li><li>去重数组: <code>[...new Set(arr)]</code>或<code>Array.from(new Set(arr))</code></li><li>声明: <code>const a = new Set(arr1)</code></li><li>并集: <code>new Set([...a, ...b])</code></li><li>交集: <code>new Set([...a].filter(v =&gt; b.has(v)))</code> //此处的has指的是set自带的方法</li><li>差集: <code>new Set([...a].filter(v =&gt; !b.has(v)))</code></li></ul><h2 id="map数据结构" tabindex="-1"><a class="header-anchor" href="#map数据结构" aria-hidden="true">#</a> Map数据结构</h2><p>map是形如对象，成员键是任何类型且可以重复，与值一一对应的数据结构。需要使用 <code>new Map()</code> 创建。</p><ul><li>方法</li><li><strong>get()</strong>: 返回键值对</li><li><strong>set()</strong>: 添加键值对，返回实例</li><li><strong>delete()</strong>: 删除键值对，返回布尔</li><li><strong>has()</strong>: 检查键值对，返回布尔</li><li><strong>clear()</strong>: 清除所有成员</li><li><strong>keys()</strong>: 返回以键为遍历器的对象</li><li><strong>values()</strong>: 返回以值为遍历器的对象</li><li><strong>entries()</strong>: 返回以键和值为遍历器的对象</li><li><strong>forEach()</strong>: 使用回调函数遍历每个成员</li></ul><h2 id="promise" tabindex="-1"><a class="header-anchor" href="#promise" aria-hidden="true">#</a> Promise</h2><p>Promise 是 JS 中<strong>进行异步编程</strong>的新解决方案</p><p>它有三种状态：并且状态一旦切换，就无法逆转。调用 <code>resolve()</code> 切换成成功状态，调用 <code>reject()</code> 切换成失败状态。</p><ul><li><em>待定（pending）</em>：初始状态。</li><li><em>已兑现（fulfilled）</em>：意味着操作成功完成。</li><li><em>已拒绝（rejected）</em>：意味着操作失败。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">promiseAjax</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">return</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span>
        status<span class="token punctuation">,</span>
        response
      <span class="token punctuation">}</span> <span class="token operator">=</span> xhr
      <span class="token comment">// 请求成功, 调用 resolve(value)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 请求失败, 调用 reject(reason)</span>
        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;请求失败: status: &#39;</span> <span class="token operator">+</span> status<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>
    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面介绍一些promise的常用方法：</p><ul><li><p><code>Promise.prototype.then</code> 方法: (onResolved, onRejected) =&gt; {}</p><p>指定用于得到成功 value 的成功回调和用于得到失败 reason 的失败回调 返回一个新的 promise 对象</p></li><li><p><code>Promise.prototype.catch</code> 方法: (onRejected) =&gt; {}</p><p>当运行到最后,<strong>没被处理的所有异常错误</strong>都会进入这个方法的回调函数中.这意味着当错误在then的第二个参数被处理时，此方法就不会执行。</p></li><li><p><code>Promise.prototype.finally</code> 方法: () =&gt; {}</p><p>运行到最后,不管成功还是失败都会执行的方法。</p></li><li><p><code>Promise.resolve</code> 方法: (value) =&gt; {}</p><p>返回一个<strong>成功/失败</strong>的 promise 对象,直接改变promise状态.返回的 promise 状态取决于value的类型：</p><ul><li>value是普通参数，则返回成功的promise，value作为成功的参数</li><li>value是一个promise，则返回的promise状态取决于传入的promise。如果传入的转变成了失败状态，则最终返回的也会是失败的promise</li></ul></li><li><p><code>Promise.reject</code> 方法: (reason) =&gt; {}</p><p>返回一个<strong>失败</strong>的 promise 对象,直接改变promise状态</p></li><li><p><code>Promise.all 方法</code>: (promises) =&gt; {}</p><p>传递一个由promise组成的数组，返回一个新的 promise, 只有所有的 promise <strong>都成功才成功</strong>, 只要有一 个失败了就直接失败</p></li><li><p><code>Promise.race</code> 方法: (promises) =&gt; {}</p><p>传递一个由promise组成的数组,返回一个新的 promise, <strong>第一个完成</strong>的 promise 的结果状态就是最终的结果状态</p></li><li><p><code>Promise.any</code> 方法: (promises) =&gt; {}</p><p>传递一个由promise组成的数组,返回一个新的 promise, <strong>第一个成功</strong>的 promise 的结果状态就是最终的结果状态，如果所有 promise 都失败了，则返回一个失败原因的数组。</p></li></ul><p><strong>讨论：</strong></p><p><strong>1. 改变 promise 状态和指定回调函数谁先谁后?</strong></p><p>都有可能，如果在执行器内都是同步代码，则会先改变状态，然后指定相应回调，推入微任务队列等待执行。但如果执行器内有异步代码如定时器，且改变状态的函数放在了定时器中，则会先指定相应回调，推入微任务队列直到定时器结束状态改变才执行。</p><p><strong>2. promise.then()返回的新 promise 的结果状态由什么决定?</strong></p><p>由指定的回调函数执行的结果决定。</p><ul><li>回调函数抛出异常，则返回的promise变为失败状态</li><li>回调函数返回非 promise值，则状态变为成功</li><li>回调函数返回 promise，状态由返回的promise决定</li></ul><p><strong>3. promise链式调用与异常穿透是什么意思？</strong></p><p><strong>链式调用</strong>即promise的 then()返回一个新的promise, 新promise又可以继续调用then，达成链式调用。</p><p><strong>异常穿透</strong>即当使用 promise 的 then 链式调用时, 可以在最后指定一个catch失败的回调。这样前面任何操作出了异常, 都会传到最后失败的回调中处理。注意每个then()的第二个回调函数也可以进行err处理，如果前面已经处理过，则不会在走最后的兜底操作。</p><p><strong>4. 链式调用时如何中断promise链？</strong></p><p>只需在需要中断的位置返回一个pedding状态的promise即可，这样后面的then就一致拿不到前面的状态而无法执行。</p>`,44);function d(k,m){const a=t("ExternalLinkIcon");return p(),o("div",null,[n("p",null,[s("更加细致的学习文档可以参考 "),n("a",r,[s("ES6文档"),i(a)])]),u])}const h=e(l,[["render",d],["__file","es6_.html.vue"]]);export{h as default};
