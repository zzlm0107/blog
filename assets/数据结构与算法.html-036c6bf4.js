const n=JSON.parse(`{"key":"v-9b00d078","path":"/code/computer/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95.html","title":"数据结构与算法","lang":"zh-CN","frontmatter":{"title":"数据结构与算法","icon":"array","date":"2022-11-19T00:00:00.000Z","category":["计算机基础"],"tag":["数据结构与算法"],"description":"数据结构 数组 数组就是平常的数组，作为存储数据的集合。js 提供的许多的数组方法，涵盖了增删改查多种方式。 栈 栈（stack），是一种操作受限的线性表。只能在表尾（栈顶）进行插入和删除，规则为后进栈的也会先出栈。即 后进先出 LIFO——Last in First Out。 （JS 实现栈较为简单，因为 JS 会自动分配数组内存大小，不需要判断栈溢出等情况） 应用： 递归函数调用栈 等 // js实现栈结构 class Stack { #items = [] // #表示类中的这个属性是私有的，只能在类里才能被访问 pop() { // 元素出栈 return this.#items.pop() } push(data) { // 元素入栈 this.#items.push(data) } peek() { // 返回栈顶 return this.#items.at(-1) } isEmpty() { // 栈是否为空 return this.#items.length === 0 } size() { // 栈大小 return this.#items.length } clear() { // 清空栈 this.#items = [] } toString() { // 查看栈元素 this.#items.join(' ') } }","head":[["meta",{"property":"og:url","content":"https://zzlm0107.github.io/blog/blog/code/computer/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"正の博客"}],["meta",{"property":"og:title","content":"数据结构与算法"}],["meta",{"property":"og:description","content":"数据结构 数组 数组就是平常的数组，作为存储数据的集合。js 提供的许多的数组方法，涵盖了增删改查多种方式。 栈 栈（stack），是一种操作受限的线性表。只能在表尾（栈顶）进行插入和删除，规则为后进栈的也会先出栈。即 后进先出 LIFO——Last in First Out。 （JS 实现栈较为简单，因为 JS 会自动分配数组内存大小，不需要判断栈溢出等情况） 应用： 递归函数调用栈 等 // js实现栈结构 class Stack { #items = [] // #表示类中的这个属性是私有的，只能在类里才能被访问 pop() { // 元素出栈 return this.#items.pop() } push(data) { // 元素入栈 this.#items.push(data) } peek() { // 返回栈顶 return this.#items.at(-1) } isEmpty() { // 栈是否为空 return this.#items.length === 0 } size() { // 栈大小 return this.#items.length } clear() { // 清空栈 this.#items = [] } toString() { // 查看栈元素 this.#items.join(' ') } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-04T07:20:14.000Z"}],["meta",{"property":"article:author","content":"正"}],["meta",{"property":"article:tag","content":"数据结构与算法"}],["meta",{"property":"article:published_time","content":"2022-11-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-08-04T07:20:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据结构与算法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-11-19T00:00:00.000Z\\",\\"dateModified\\":\\"2023-08-04T07:20:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"正\\",\\"url\\":\\"https://github.com/zzlm0107\\"}]}"]]},"headers":[{"level":2,"title":"数据结构","slug":"数据结构","link":"#数据结构","children":[{"level":3,"title":"数组","slug":"数组","link":"#数组","children":[]},{"level":3,"title":"栈","slug":"栈","link":"#栈","children":[]},{"level":3,"title":"队列","slug":"队列","link":"#队列","children":[]},{"level":3,"title":"链表","slug":"链表","link":"#链表","children":[]}]},{"level":2,"title":"算法","slug":"算法","link":"#算法","children":[{"level":3,"title":"冒泡排序","slug":"冒泡排序","link":"#冒泡排序","children":[]},{"level":3,"title":"选择排序","slug":"选择排序","link":"#选择排序","children":[]},{"level":3,"title":"插入排序","slug":"插入排序","link":"#插入排序","children":[]},{"level":3,"title":"归并排序","slug":"归并排序","link":"#归并排序","children":[]},{"level":3,"title":"快速排序","slug":"快速排序","link":"#快速排序","children":[]},{"level":3,"title":"计数排序","slug":"计数排序","link":"#计数排序","children":[]},{"level":3,"title":"桶排序","slug":"桶排序","link":"#桶排序","children":[]},{"level":3,"title":"基数排序","slug":"基数排序","link":"#基数排序","children":[]},{"level":3,"title":"顺序搜索","slug":"顺序搜索","link":"#顺序搜索","children":[]},{"level":3,"title":"二分搜索","slug":"二分搜索","link":"#二分搜索","children":[]},{"level":3,"title":"内插搜索","slug":"内插搜索","link":"#内插搜索","children":[]},{"level":3,"title":"随机算法","slug":"随机算法","link":"#随机算法","children":[]},{"level":3,"title":"动态规划","slug":"动态规划","link":"#动态规划","children":[]}]}],"git":{"createdTime":1691133614000,"updatedTime":1691133614000,"contributors":[{"name":"zzlm0107","email":"zzlm0107@163.com","commits":1}]},"readingTime":{"minutes":9.53,"words":2859},"filePathRelative":"code/computer/数据结构与算法.md","localizedDate":"2022年11月19日","excerpt":"<h2> 数据结构</h2>\\n<h3> 数组</h3>\\n<p>数组就是平常的数组，作为存储数据的集合。js 提供的许多的数组方法，涵盖了增删改查多种方式。</p>\\n<h3> 栈</h3>\\n<p>栈（stack），是一种操作受限的线性表。只能在表尾（栈顶）进行插入和删除，规则为后进栈的也会先出栈。即 <strong>后进先出 LIFO——Last in First Out</strong>。</p>\\n<p>（JS 实现栈较为简单，因为 JS 会自动分配数组内存大小，不需要判断栈溢出等情况）</p>\\n<p><strong>应用：</strong> <em>递归函数调用栈</em> 等</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">// js实现栈结构</span>\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Stack</span> <span class=\\"token punctuation\\">{</span>\\n  #items <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token comment\\">// #表示类中的这个属性是私有的，只能在类里才能被访问</span>\\n\\n  <span class=\\"token function\\">pop</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 元素出栈</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>#items<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">pop</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">data</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 元素入栈</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>#items<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span>data<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token function\\">peek</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 返回栈顶</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>#items<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">at</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token function\\">isEmpty</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 栈是否为空</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>#items<span class=\\"token punctuation\\">.</span>length <span class=\\"token operator\\">===</span> <span class=\\"token number\\">0</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 栈大小</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>#items<span class=\\"token punctuation\\">.</span>length\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token function\\">clear</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 清空栈</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>#items <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token function\\">toString</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 查看栈元素</span>\\n    <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>#items<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">join</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">' '</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
