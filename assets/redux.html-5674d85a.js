import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as n,b as s,d as t,e}from"./app-3f51fd7d.js";const i={},u=n("ol",null,[n("li",null,[s("redux是一个专门用于做"),n("code",null,"状态管理"),s("的JS库(不是react插件库)。可以用在react, angular, vue等项目中, 但基本与react配合使用。")]),n("li",null,[s("作用: 集中式管理react应用中多个组件"),n("code",null,"共享"),s("的状态。")])],-1),r={href:"http://www.redux.org.cn/",target:"_blank",rel:"noopener noreferrer"},d=e(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i redux
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>redux原理图</strong></p><img src="https://img-blog.csdnimg.cn/20210418003347155.png" width="600px"><h3 id="核心概念" tabindex="-1"><a class="header-anchor" href="#核心概念" aria-hidden="true">#</a> 核心概念</h3><p><strong>action</strong></p><ol><li><p>动作的<strong>对象</strong></p></li><li><p>包含 2 个属性</p><ul><li><code>type</code>：标识属性, 值为字符串, 唯一, 必要属性</li><li><code>data</code>：数据属性, 值类型任意, 可选属性</li></ul></li><li><p>action文件中一般包含多个暴露出去的函数，每个函数接收对应的data，返回包含 type 和 data 的对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">addNum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;ADD_NUM&#39;</span><span class="token punctuation">,</span>
  num
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p><strong>reducer</strong></p><ol><li>用于初始化状态、加工状态</li><li>加工时，根据旧的<code>state</code>和<code>action</code>， 产生新的<code>state</code>.本质就是一个<strong>函数</strong></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
<span class="token comment">// 初始化会被调用一次，由store自动触发，此时state是undefined</span>
<span class="token keyword">function</span> <span class="token function">Reducer</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token operator">=</span><span class="token punctuation">{</span><span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> action</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> action
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string">&#39;ADD_NUM&#39;</span><span class="token operator">:</span>
      <span class="token comment">// 必须要返回一个新的state对象，redux会将其替换掉旧的state</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> state<span class="token punctuation">.</span>value <span class="token operator">+</span> data <span class="token punctuation">}</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">return</span> state
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>store</strong></p><ol><li>将<code>state</code>、<code>action</code>、<code>reducer</code>联系在一起的<strong>对象</strong></li><li>如何得到此对象?</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;redux&#39;</span>
<span class="token keyword">import</span> reducer <span class="token keyword">from</span> <span class="token string">&#39;./reducers&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>暴露的 store对象 的功能：</p><ol><li>获取状态： <code>getState()</code>: 得到 <code>state</code></li><li>修改状态： <code>dispatch(action)</code>: 分发<code>action</code>, 触发<code>reducer</code>调用, 产生新的<code>state</code></li><li>更新视图： <code>subscribe(listener)</code>: 注册监听, 当产生了新的<code>state</code>时, 自动调用，在这里调用<code>render()</code>就可以重新渲染视图（redux没办法操控react更新视图，所以只能由我们自己调用render函数）</li></ol><h3 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;redux&#39;</span>

<span class="token doc-comment comment">/**
 * 这是一个 reducer 函数：接受当前 state 值和描述“发生了什么”的 action 对象，它返回一个新的 state 值。
 * reducer 函数签名是 : (state, action) =&gt; newState
 *
 * Redux state 应该只包含普通的 JS 对象、数组和原语。
 * 根状态值通常是一个对象。 重要的是，不应该改变 state 对象，而是在 state 发生变化时返回一个新对象。
 * 
 */</span>
<span class="token keyword">function</span> <span class="token function">counterReducer</span><span class="token punctuation">(</span><span class="token parameter">state <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string">&#39;counter/incremented&#39;</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> state<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span>
    <span class="token keyword">case</span> <span class="token string">&#39;counter/decremented&#39;</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> state<span class="token punctuation">.</span>value <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">}</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">return</span> state
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 接收reducer对象，创建仓库。它的API 有 { subscribe, dispatch, getState }.</span>
<span class="token keyword">let</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>counterReducer<span class="token punctuation">)</span>

<span class="token comment">// 你可以使用 subscribe() 来更新 UI 以响应 state 的更改。</span>
<span class="token comment">// 通常你会使用视图绑定库（例如 React Redux）而不是直接使用 subscribe()。</span>
store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// 改变内部状态的唯一方法是 dispatch 一个 action。</span>
<span class="token comment">// 这些 action 可以被序列化、记录或存储，然后再重放。</span>
store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;counter/incremented&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// {value: 1}</span>
store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;counter/incremented&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// {value: 2}</span>
store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;counter/decremented&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// {value: 1}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="redux-toolkit-rtk" tabindex="-1"><a class="header-anchor" href="#redux-toolkit-rtk" aria-hidden="true">#</a> redux toolkit (RTK)</h3><p>在我们使用原生redux时，我们会发现一些问题：</p><ol><li><p>整个应用的共享数据都放到了一个state里，如果state过于复杂，那么就会难以维护。</p></li><li><p>对象形式的state，每次操作都需要先进行复制，再用新数据去替换旧数据部分。</p></li><li><p>switch case 后面的常量维护较为麻烦。</p></li></ol><p>所以我们需要使用RTK来帮助解决使用redux中的一些重复性工作和痛点。</p><p>安装：需要react-redux搭配使用，两个都要安装。（RTK中已经包含了redux核心库）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> react-redux @reduxjs/toolkit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// store/modules/student.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createSlice <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@reduxjs/toolkit&#39;</span>

<span class="token comment">// 创建仓库切片，传入配置项</span>
<span class="token keyword">const</span> studentSlice <span class="token operator">=</span> <span class="token function">createSlice</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;student&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 仓库切片名，生成action中的type</span>
  <span class="token literal-property property">initialState</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 初始化state值</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;andy&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">reducers</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 对state操作的各种方法</span>
    <span class="token function">setName</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token comment">// 通过相关库，相比redux现在可以直接修改state，内部会进行对比创建新的state覆盖旧的，依然维持state不可变状态</span>
      <span class="token comment">// 两个参数，state：切片仓库代理对象，可以直接修改值，不用每次复制state替换</span>
      <span class="token comment">// action.payload：触发dispatch时传递的参数</span>
      state<span class="token punctuation">.</span>name <span class="token operator">=</span> action<span class="token punctuation">.</span>payload
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> studentSlice<span class="token punctuation">.</span>reducers<span class="token punctuation">;</span>

<span class="token comment">// 切片对象会自动生成action，存储在actions中，向外暴露以供在合适时触发</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>setName<span class="token punctuation">}</span> <span class="token operator">=</span> studentSlice<span class="token punctuation">.</span>actions
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// store/index.js</span>
<span class="token comment">// 汇总仓库切片，构建出完整的仓库</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> configureStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@reduxjs/toolkit&#39;</span>
<span class="token keyword">import</span> studentSliceReducer <span class="token keyword">from</span> <span class="token string">&#39;./studentSlice&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">configureStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">reducer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">student</span><span class="token operator">:</span> studentSliceReducer
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>最后还需要向全局挂载上store对象</strong></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// main.js</span>
<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>
<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">&#39;react-dom&#39;</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;./App&#39;</span>
<span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">&#39;./store&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>Provider<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-redux&#39;</span>

ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Provider</span></span> <span class="token attr-name">store</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
		</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span><span class="token punctuation">/&gt;</span></span><span class="token plain-text">
	</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Provider</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
	document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们想使用仓库数据，可以利用react-redux中的两个钩子。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useSelector<span class="token punctuation">,</span> useDispatch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-redux&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> setName <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;store/modules/student&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 获取整体state中其中的仓库切片</span>
  <span class="token keyword">const</span> stu <span class="token operator">=</span> <span class="token function">useSelector</span><span class="token punctuation">(</span><span class="token parameter">state</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>student<span class="token punctuation">)</span>
  <span class="token comment">// 获取整体的派发器,触发action</span>
  <span class="token keyword">const</span> dispatch <span class="token operator">=</span> <span class="token function">useDispatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&#39;lucy&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>stu<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rtk-query-rtkq" tabindex="-1"><a class="header-anchor" href="#rtk-query-rtkq" aria-hidden="true">#</a> RTK Query (RTKQ)</h3><p>在我们使用RTK的时候，如果我们想要与服务器进行数据交互，我们就需要发送异步请求，请求数据返回时需要存储到仓库中并且要在页面更新。在原生redux中实现这一逻辑较为麻烦。并且**“数据获取和缓存” 实际上是一组不同于 “状态管理” 的关注点**。因此最好有一个工具专门完成这个任务。</p><p>RTKQ是一个强大的数据获取和缓存工具,旨在简化在 Web 应用程序中加载数据的常见情况，<strong>无需自己手动编写数据获取和缓存逻辑</strong>。</p><p><em>但实际上目前还是用于axios较多，因为其可以方便的配置请求头，借助拦截器完成一些数据处理等操作，RTKQ在这里可以简单理解一下。</em></p><p>获取：RTKQ已经集成在了RTK库中，需要时直接引入即可</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// createApi 用来创建RTKQ中的api对象，需要一个配置对象作为参数</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createApi<span class="token punctuation">,</span> fetchBaseQuery  <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@reduxjs/toolkit/query/react&#39;</span>

<span class="token keyword">const</span> studentApi <span class="token operator">=</span> <span class="token function">createApi</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">reducerPath</span><span class="token operator">:</span> <span class="token string">&#39;studentApi&#39;</span><span class="token punctuation">,</span> <span class="token comment">// Api对象标识，避免与其他Api或reducer对象重复</span>
  <span class="token literal-property property">baseQuery</span><span class="token operator">:</span> <span class="token function">fetchBaseQuery</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">baseUrl</span><span class="token operator">:</span> <span class="token string">&#39;https://localhost:8080/api&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 发送请求方式和信息</span>
  <span class="token comment">// 指定此api对象的各种操作功能,builder是请求构建器，用来设置具体的请求信息</span>
  <span class="token function-variable function">endpoints</span><span class="token operator">:</span> <span class="token parameter">builder</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">getStudents</span><span class="token operator">:</span> builder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token function-variable function">query</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;/students&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 指定请求子路径</span>
      <span class="token function-variable function">transformRespnse</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">return</span> res<span class="token punctuation">.</span>data <span class="token comment">// 处理请求返回数据</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">getStudentsById</span><span class="token operator">:</span> builder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token function-variable function">query</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/student/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
      <span class="token literal-property property">keepUnusedDataFor</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token comment">// 数据缓存时间，秒 请求数据可以控制缓存时间 默认60s</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 从api对象中解构出对应方法，方法名是根据builder里的方法自动生成的</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> useGetStudentsQuery<span class="token punctuation">,</span> sueGetStudentsByIdQuery <span class="token punctuation">}</span> <span class="token operator">=</span> studentApi
<span class="token keyword">export</span> <span class="token keyword">default</span> studentApi
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>RTKQ中的api对象本质上和仓库切片一样，也需要汇总到整体仓库中</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 汇总仓库切片，构建出完整的仓库</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> configureStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@reduxjs/toolkit&#39;</span>
<span class="token keyword">import</span> studentApi <span class="token keyword">from</span> <span class="token string">&#39;./studentApi&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">configureStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">reducer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>studentApi<span class="token punctuation">.</span>reducerPath<span class="token punctuation">]</span><span class="token operator">:</span> studentApi<span class="token punctuation">.</span>reducer<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 还要将全局的中间件拼接上构建出的api对象的中间件</span>
   <span class="token function-variable function">middleware</span><span class="token operator">:</span> <span class="token parameter">getDefaultMiddleware</span> <span class="token operator">=&gt;</span>
    	<span class="token function">getDefaultMiddleware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>studentApi<span class="token punctuation">.</span>middleware<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>向全局挂载上store对象后就是具体的使用</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useGetStudentsQuery <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./store/studentApi&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 调用api查询方法，获取返回对象</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> isSuccess<span class="token punctuation">,</span> isLoading <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useGetStudentsQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
  	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    	</span><span class="token punctuation">{</span> isLoading <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">数据加载中。。。</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token punctuation">{</span> isSuccess <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">这是数据 </span><span class="token punctuation">{</span>data<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rtk-axios" tabindex="-1"><a class="header-anchor" href="#rtk-axios" aria-hidden="true">#</a> RTK + Axios</h3><p>在开发中常见的一种操作是在仓库中发送请求获取数据然后存储起来，虽然redux toolkit提供了RTKQ发送请求，但常见的依然是使用axios。</p><p>由于请求的异步性，仓库切片中的reducers的异步操作会修改state，但此时内部state的代理对象已经被撤销，无法进行修改赋给原仓库，导致报错问题，所以我们需要使用 <code>createAsyncThunk</code> 钩子来进行异步操作。</p>`,42),k={href:"https://cn.redux.js.org/tutorials/essentials/part-5-async-logic#%E4%BD%BF%E7%94%A8-createasyncthunk-%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE",target:"_blank",rel:"noopener noreferrer"},v=e(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createSlice<span class="token punctuation">,</span> createAsyncThunk <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@reduxjs/toolkit&#39;</span>

<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> loginForm<span class="token punctuation">,</span> userInfoType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/api/user/type&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> reqLogin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/api/user/index&#39;</span>

<span class="token comment">// 定义仓库切片初始值与类型</span>
<span class="token keyword">const</span> initialState<span class="token operator">:</span> <span class="token punctuation">{</span>
  token<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span>
  menuRoutes<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>object<span class="token operator">&gt;</span>
  userInfo<span class="token operator">:</span> userInfoType <span class="token operator">|</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  token<span class="token operator">:</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;token&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  menuRoutes<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  userInfo<span class="token operator">:</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 * 用户登录方法
 */</span>
<span class="token comment">// 创建异步 thunk,相当于是一个异步的action</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> userLogin <span class="token operator">=</span> <span class="token function">createAsyncThunk</span><span class="token punctuation">(</span><span class="token string">&#39;userLogin&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>loginForm<span class="token operator">:</span> loginForm<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">reqLogin</span><span class="token punctuation">(</span>loginForm<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>msg<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> userSlice <span class="token operator">=</span> <span class="token function">createSlice</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span>
  initialState<span class="token punctuation">,</span>
  reducers<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 根据异步action的状态进行不同的操作</span>
  <span class="token function-variable function">extraReducers</span><span class="token operator">:</span> builder <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    builder<span class="token punctuation">.</span><span class="token function">addCase</span><span class="token punctuation">(</span>userLogin<span class="token punctuation">.</span>fulfilled<span class="token punctuation">,</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      state<span class="token punctuation">.</span>token <span class="token operator">=</span> action<span class="token punctuation">.</span>payload
      localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;token&#39;</span><span class="token punctuation">,</span> state<span class="token punctuation">.</span>token<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> userSlice<span class="token punctuation">.</span>reducer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来在相关组件触发那个异步的action即可</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>
<span class="token keyword">import</span> style <span class="token keyword">from</span> <span class="token string">&#39;./style.module.scss&#39;</span>

<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> loginForm <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/api/user/type&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useDispatch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-redux&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ThunkDispatch<span class="token punctuation">,</span> AnyAction <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@reduxjs/toolkit&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> userLogin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/store/modules/user&#39;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> useNavigate <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-router-dom&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">AppLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 定义接收异步action的类型</span>
  <span class="token keyword">const</span> dispatch<span class="token operator">:</span> ThunkDispatch<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> loginForm<span class="token punctuation">,</span> AnyAction<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">useDispatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> navigate <span class="token operator">=</span> <span class="token function">useNavigate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> <span class="token punctuation">[</span>loading<span class="token punctuation">,</span> setLoading<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>

  <span class="token comment">/**
   * 登录按钮点击回调
   */</span>
  <span class="token keyword">const</span> <span class="token function-variable function">onFinish</span> <span class="token operator">=</span> <span class="token punctuation">(</span>values<span class="token operator">:</span> loginForm<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token comment">// 触发异步action</span>
      <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">userLogin</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token function">navigate</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
      <span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>style<span class="token punctuation">[</span><span class="token string">&#39;app-login&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function m(b,g){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("中文文档: "),n("a",r,[s("http://www.redux.org.cn/"),t(a)])]),d,n("p",null,[n("a",k,[s("官网相关描述"),t(a)])]),v])}const f=p(i,[["render",m],["__file","redux.html.vue"]]);export{f as default};
