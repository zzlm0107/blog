import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as n,b as s,d as t,e}from"./app-57c7840a.js";const i={},u=e('<h2 id="初识three-js" tabindex="-1"><a class="header-anchor" href="#初识three-js" aria-hidden="true">#</a> 初识Three.js</h2><p>在认识Three.js前，先简单了解一下Web 3D的一些前置概念：</p><ul><li><strong>OpenGL：</strong> OpenGL是开放式图形标准，跨编程语言、跨平台，Javascript、Java 、C、C++ 、 python 等都能支持OpenGL ，OpenGL的Javascript实现就是 。OpenGL ES 2.0是OpenGL的子集，针对手机、游戏主机等嵌入式设备而设计。</li><li><strong>WebGL：</strong> WebGL是一种Javascript的3D图形接口，把JavaScript和OpenGL ES 2.0结合在一起。</li><li><strong>Canvas：</strong> Canvas是HTML5的画布元素，在使用Canvas时，需要用到Canvas的上下文，可以用2D上下文绘制二维的图像，也可以使用3D上下文绘制三维的图像，其中3D上下文就是指WebGL。</li></ul><p>在了解到这些知识后，我们就可以简单定义 Three.js ：</p><p><strong>Three.js是基于webGL的封装的一个易于使用且轻量级的3D库，Three.js对WebGL提供的接口进行了非常好的封装，简化了很多细节，大大降低了学习成本，极大地提高了性能，功能也非常强大，用户不需要详细地学习 WebGL，就能轻松创作出三维图形，是前端开发者研发3D绘图的主要工具。</strong></p>',5),r={href:"https://threejs.org/docs/index.html#manual/zh/introduction/Installation",target:"_blank",rel:"noopener noreferrer"},k={href:"http://www.webgl3d.cn/pages/aac9ab/",target:"_blank",rel:"noopener noreferrer"},d=e(`<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e4b7894fc49f4563959c41b410cf3149~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" width="600px"><h2 id="基础使用" tabindex="-1"><a class="header-anchor" href="#基础使用" aria-hidden="true">#</a> 基础使用</h2><p>使用three.js时，我们需要知道一个3D场景大致由几部分组成：场景，相机，渲染器 和 物体。</p><p>下面代码就是创建场景,透视相机,渲染器和物体的简单使用:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> <span class="token constant">THREE</span> <span class="token keyword">from</span> <span class="token string">&#39;three&#39;</span> <span class="token comment">// 导入全部</span>
<span class="token comment">//import { Scene } from &#39;three&#39; // 分别导入</span>

<span class="token comment">// 创建场景,场景是显示3D画面的基础</span>
<span class="token keyword">const</span> scene <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Scene</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建透视相机, 参数: 视野角度FOV,显示长宽比,近截面和远截面</span>
<span class="token keyword">const</span> camera <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>PerspectiveCamera</span><span class="token punctuation">(</span> <span class="token number">75</span><span class="token punctuation">,</span> window<span class="token punctuation">.</span>innerWidth <span class="token operator">/</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
camera<span class="token punctuation">.</span>position<span class="token punctuation">.</span>z <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 设置相机位置</span>
camera<span class="token punctuation">.</span><span class="token function">lookAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 设置相机朝向，默认为原点位置</span>

<span class="token comment">// 创建渲染器,实现渲染物体的功能</span>
<span class="token keyword">const</span> renderer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>WebGLRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
renderer<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span> window<span class="token punctuation">.</span>innerHeight <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置渲染器尺寸</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span> renderer<span class="token punctuation">.</span>domElement <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 添加渲染器dom元素,展示3D Canvas</span>

<span class="token comment">// 创建物体并添加到场景中</span>
<span class="token keyword">const</span> geometry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>BoxGeometry</span><span class="token punctuation">(</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建立方体(透明),参数:长宽高</span>
<span class="token keyword">const</span> material <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>MeshBasicMaterial</span><span class="token punctuation">(</span> <span class="token punctuation">{</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token number">0x00ff00</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建材质</span>
<span class="token keyword">const</span> cube <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Mesh</span><span class="token punctuation">(</span> geometry<span class="token punctuation">,</span> material <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建网格对象,是立方体和材质的组合</span>
scene<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span> cube <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 添加到场景中</span>

renderer<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>scene<span class="token punctuation">,</span> camera<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 最后,调用渲染器渲染函数,渲染场景和相机</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时会发现我们的屏幕上出现了一个小方块,这就是我们创建物体的正面,但我们并没法滑动查看,滑动查看需要借助<em>轨道控制器</em> 来实现,当然我们可以添加坐标轴更方便调试:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> OrbitControls <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;three/addons/controls/OrbitControls.js&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 引入轨道控制器</span>

<span class="token comment">// 创建轨道控制器</span>
<span class="token keyword">const</span> controls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrbitControls</span><span class="token punctuation">(</span> camera<span class="token punctuation">,</span> renderer<span class="token punctuation">.</span>domElement <span class="token punctuation">)</span><span class="token punctuation">;</span>
controls<span class="token punctuation">.</span>enableDamping <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 设置控制器阻尼</span>

<span class="token comment">// 创建坐标轴</span>
<span class="token keyword">const</span> axesHelper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>AxesHelper</span><span class="token punctuation">(</span> <span class="token number">4</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
scene<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span> axesHelper <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 渲染循环,在每一帧都渲染场景和相机</span>
<span class="token keyword">function</span> <span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>animate<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 让浏览器下一帧再次执行此渲染函数</span>
  controls<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 开启控制器更新</span>
  renderer<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>scene<span class="token punctuation">,</span> camera<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="物体移动-旋转与缩放" tabindex="-1"><a class="header-anchor" href="#物体移动-旋转与缩放" aria-hidden="true">#</a> 物体移动,旋转与缩放</h2><p><strong>物体移动</strong></p><p>创建的网格对象即可见物体实例 cube 的 <strong>position对象</strong> 控制着物体的位置,我们可以通过 <code>cube.position.set(x,y,z)</code>方法控制物体的位置; 也可以直接修改属性 <code>cube.position.x = 3</code>.动态修改位置也只需要再 animate() 中随渲染变化值即可.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>animate<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 让浏览器下一帧再次执行此渲染函数</span>
  <span class="token comment">// controls.update();</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>cube<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> cube<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">&lt;=</span> <span class="token number">4</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cube<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">+=</span> <span class="token number">0.01</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    cube<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token punctuation">}</span>
  renderer<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>scene<span class="token punctuation">,</span> camera<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>物体旋转</strong></p><p>物体旋转也可以直接使用 <code>cube.rotation.set(x,y,z, order)</code>方法控制物体的旋转角度和顺序; 也可以直接修改属性 <code>cube.rotation.x = Math.PI / 4</code>来控制某一个轴的旋转.</p><p>其中前三个参数是弧度，180°是 Π，计算即可，例如 Math.<em>PI</em> / 4 表示45°；</p><p>最后一个值是旋转顺序，如 ‘XZY’ 表示先旋转X轴，再旋转Z轴，最后旋转Y轴。</p><p><strong>物体缩放</strong></p><p>物体缩放也可以直接使用 <code>cube.scale.set(x,y,z)</code>方法控制物体的缩放大小; 也可以直接修改属性 <code>cube.scale.x = 3</code>来控制某一个轴的缩放.</p><h2 id="requestanimationframe跟踪时间" tabindex="-1"><a class="header-anchor" href="#requestanimationframe跟踪时间" aria-hidden="true">#</a> requestAnimationFrame跟踪时间</h2><p>requestAnimationFrame(Fun) 是浏览器原生提供的一种方法，可以在浏览器下一帧渲染的时候再执行传入的函数。理论上60帧刷新的屏幕1s渲染60张画面，即约每16ms渲染1张画面。但实际上浏览器并不是每次都是准时渲染的，由于各种计算压力等原因，渲染速度可快可慢，而此时在其中的各种向量数据的加减就变得不可控起来。</p><p>例如希望原点位置的物块1s走到（1，0，0） 的位置，理论上应该是 1 * 60 = 0.016；即每一次渲染帧时向前走0.016；但由于渲染速度的不固定，也就是帧数的不固定，导致可能存在误差。</p><p>如果想要精准的随时间移动，则需要在传入的 Fun 里进行计算，利用一个time参数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">animate</span><span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 参数time就是执行此帧的时间，单位 ms</span>
  <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>animate<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 让浏览器下一帧再次执行此渲染函数</span>

  <span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token punctuation">(</span>time <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token comment">// 转为 s 单位</span>
  cube<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">=</span> t <span class="token operator">*</span> <span class="token number">1</span>
  
  renderer<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>scene<span class="token punctuation">,</span> camera<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="clock跟踪时间" tabindex="-1"><a class="header-anchor" href="#clock跟踪时间" aria-hidden="true">#</a> Clock跟踪时间</h2>`,23),m={href:"https://threejs.org/docs/index.html?q=Clock#api/zh/core/Clock",target:"_blank",rel:"noopener noreferrer"},v=n("p",null,[s("创建： "),n("code",null,"const Clock = new THREE.Clock()")],-1),b=n("code",null,"Clock.getDelta()",-1),h={href:"https://threejs.org/docs/index.html#api/zh/core/Clock.oldTime",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,".oldTime",-1),f=n("li",null,[n("p",null,[n("code",null,"Clock.getElapsedTime()"),s(" 获取自时钟启动后的秒数，同时将 "),n("code",null,".oldTime"),s(" 设置为当前时间。")])],-1),w=e(`<p>此外还有许多其他属性和方法，参见官方文档。</p><h2 id="自适应画面" tabindex="-1"><a class="header-anchor" href="#自适应画面" aria-hidden="true">#</a> 自适应画面</h2><p>现在如果我们窗口变化，我们会发现显示画面并不会自适应。这是因为我们在初始化的时候就已经设定好的透视相机和渲染器的尺寸是启动时窗口尺寸，即使我们后面窗口变化，这些设定也不会改变。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 监听画面变化，更新渲染画面</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;resize&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  camera<span class="token punctuation">.</span>aspect <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth <span class="token operator">/</span> window<span class="token punctuation">.</span>innerHeight <span class="token comment">// 重新设置相机视锥长宽比</span>
  camera<span class="token punctuation">.</span><span class="token function">updateProjectionMatrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 更新摄像机投影矩阵。在任何参数被改变以后必须被调用</span>
  renderer<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 重新设置渲染器尺寸</span>
  renderer<span class="token punctuation">.</span><span class="token function">setPixelRatio</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>devicePixelRatio<span class="token punctuation">)</span> <span class="token comment">// 设置设备像素比,主要用于适配手机</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="画布全屏与退出" tabindex="-1"><a class="header-anchor" href="#画布全屏与退出" aria-hidden="true">#</a> 画布全屏与退出</h2><p>实现双击屏幕进入全屏：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 双击全屏</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;dblclick&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>fullscreenElement<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 判断当前全屏的元素</span>
    document<span class="token punctuation">.</span><span class="token function">exitFullscreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    renderer<span class="token punctuation">.</span>domElement<span class="token punctuation">.</span><span class="token function">requestFullscreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="变量控制库dat-gui" tabindex="-1"><a class="header-anchor" href="#变量控制库dat-gui" aria-hidden="true">#</a> 变量控制库dat.gui</h2><p>我们可以使用 <strong>dat.gui</strong> 这个插件库很方便的调试我们的参数变量，实现动态预览。</p><p>下载：<code>yarn add dat.gui</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> dat <span class="token keyword">from</span> <span class="token string">&#39;dat.gui&#39;</span> <span class="token comment">// 导入 dat.gui</span>
<span class="token keyword">const</span> gui <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">dat<span class="token punctuation">.</span>GUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 控制变量</span>
<span class="token keyword">let</span> mycube <span class="token operator">=</span> gui<span class="token punctuation">.</span><span class="token function">addFolder</span><span class="token punctuation">(</span><span class="token string">&#39;控制物体&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 文件夹归类</span>
mycube<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cube<span class="token punctuation">,</span> <span class="token string">&#39;visible&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">&#39;显示物体&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 布尔值</span>
mycube<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cube<span class="token punctuation">.</span>material<span class="token punctuation">,</span> <span class="token string">&#39;wireframe&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">&#39;边框线&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 布尔值</span>
mycube<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cube<span class="token punctuation">.</span>position<span class="token punctuation">,</span> <span class="token string">&#39;x&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">&#39;移动x轴&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 数值</span>
mycube<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cube<span class="token punctuation">.</span>position<span class="token punctuation">,</span> <span class="token string">&#39;y&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">&#39;移动y轴&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;cube.position.y值在变化&#39;</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">onFinishChange</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;cube.position.y不变了&#39;</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 控制颜色 需要调用set方法，所以要提前准备好参数列表</span>
<span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&#39;#ffffff&#39;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">fun</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;111&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
gui<span class="token punctuation">.</span><span class="token function">addColor</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> <span class="token string">&#39;color&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  cube<span class="token punctuation">.</span>material<span class="token punctuation">.</span>color<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
gui<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> <span class="token string">&#39;fun&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 按钮</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="几何体和材质" tabindex="-1"><a class="header-anchor" href="#几何体和材质" aria-hidden="true">#</a> 几何体和材质</h2>`,12),y={href:"https://threejs.org/docs/index.html#api/zh/geometries/BoxGeometry",target:"_blank",rel:"noopener noreferrer"},x={href:"https://threejs.org/docs/index.html#api/zh/materials/MeshBasicMaterial",target:"_blank",rel:"noopener noreferrer"},_=e(`<h2 id="纹理-贴图" tabindex="-1"><a class="header-anchor" href="#纹理-贴图" aria-hidden="true">#</a> 纹理/贴图</h2><p>纹理即为贴合在几何体上的展示画面，也叫贴图，可以用图片等作为纹理展示：<strong>图片素材放在 piblic 文件夹下</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建纹理加载器加载纹理图片</span>
<span class="token keyword">const</span> texture <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>TextureLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span> <span class="token string">&#39;textures/A.jpg&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 立即使用纹理进行材质创建</span>
<span class="token keyword">const</span> material <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>MeshBasicMaterial</span><span class="token punctuation">(</span> <span class="token punctuation">{</span> <span class="token literal-property property">map</span><span class="token operator">:</span> texture <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="纹理加载事件" tabindex="-1"><a class="header-anchor" href="#纹理加载事件" aria-hidden="true">#</a> 纹理加载事件</h3><p>可以通过纹理加载事件调控相关进度和完成情况：</p>`,5),E={href:"https://threejs.org/docs/index.html#api/zh/loaders/TextureLoader.load",target:"_blank",rel:"noopener noreferrer"},j=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> texture <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>TextureLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>
  <span class="token string">&#39;textures/A.jpg&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter">texture</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;纹理加载完成&#39;</span><span class="token punctuation">,</span> texture<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter">xhr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;纹理加载中...&#39;</span><span class="token punctuation">,</span>xhr<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;纹理加载失败&#39;</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上是实现单个纹理的加载事件，如果我们希望一次侦听多个，等所有纹理都加载完才展示场景，则可以借助 <strong>加载管理器 LoadingManager</strong> 来实现。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建一个加载管理器，传入加载事件</span>
<span class="token comment">// onProgress 有三个参数 url itemsLoaded itemsTotal</span>
<span class="token keyword">const</span> manager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>LoadingManager</span><span class="token punctuation">(</span>onLoad <span class="token operator">:</span> Function<span class="token punctuation">,</span> <span class="token literal-property property">onProgress</span> <span class="token operator">:</span> Function<span class="token punctuation">,</span> <span class="token literal-property property">onError</span> <span class="token operator">:</span> Function<span class="token punctuation">)</span>
<span class="token comment">// 将加载管理器传给纹理加载器，纹理加载器的每次加载都挂上了相应事件</span>
<span class="token keyword">const</span> texture <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>TextureLoader</span><span class="token punctuation">(</span>manager<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="纹理偏移-旋转与重复" tabindex="-1"><a class="header-anchor" href="#纹理偏移-旋转与重复" aria-hidden="true">#</a> 纹理偏移，旋转与重复</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 纹理偏移</span>
<span class="token comment">// texture.offset.x = 0.5</span>
texture<span class="token punctuation">.</span>offset<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token comment">// 二维参数</span>

<span class="token comment">// 纹理旋转 默认（0，0）左下角</span>
texture<span class="token punctuation">.</span>cnter <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token comment">// 设置中心点为旋转原点</span>
texture<span class="token punctuation">.</span>rotation <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> <span class="token number">4</span>  <span class="token comment">// 旋转45°</span>

<span class="token comment">// 纹理重复</span>
texture<span class="token punctuation">.</span>repeat<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">//水平和垂直重复次数</span>
<span class="token comment">// 默认重复是纹理边缘将被推到外部边缘的纹素 THREE.ClampToEdgeWrapping</span>
<span class="token comment">// THREE.RepeatWrapping 重复包裹 | THREE.MirroredRepeatWrapping 镜像重复包裹</span>
texture<span class="token punctuation">.</span>wrapS <span class="token operator">=</span> <span class="token constant">THREE</span><span class="token punctuation">.</span>RepeatWrapping <span class="token comment">// 水平重复模式</span>
texture<span class="token punctuation">.</span>wrapT <span class="token operator">=</span> <span class="token constant">THREE</span><span class="token punctuation">.</span>RepeatWrapping <span class="token comment">// 垂直重复模式</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="透明材质与透明纹理" tabindex="-1"><a class="header-anchor" href="#透明材质与透明纹理" aria-hidden="true">#</a> 透明材质与透明纹理</h3><p>实现材质的部分透明可以使用灰度纹理：</p><p>alpha贴图是一张灰度纹理，用于控制整个表面的不透明度。（黑色：完全透明；白色：完全不透明）。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建纹理加载器加载纹理和灰度纹理</span>
<span class="token keyword">const</span> myTexture <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>TextureLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&#39;./tie.png&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> alphaTexture <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>TextureLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&#39;./alpha.png&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 创建物体并添加到场景中</span>
<span class="token keyword">const</span> geometry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>BoxGeometry</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建立方体(透明),参数:长宽高</span>
<span class="token keyword">const</span> material <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>MeshBasicMaterial</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">map</span><span class="token operator">:</span> myTexture<span class="token punctuation">,</span> <span class="token comment">// 给材质添加颜色贴图（纹理）</span>
  <span class="token literal-property property">alphaMap</span><span class="token operator">:</span> alphaTexture<span class="token punctuation">,</span> <span class="token comment">// 再覆盖一层alpha贴图，即灰度纹理</span>
  <span class="token literal-property property">transparent</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 开启材质可透明化，就可以让alpha贴图黑色部分完全透明</span>
  <span class="token comment">// opacity: 0.5 控制整个材质的透明度，需要开启材质可透明化</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建材质</span>
<span class="token keyword">const</span> cube <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Mesh</span><span class="token punctuation">(</span>geometry<span class="token punctuation">,</span> material<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建网格对象,是立方体和材质的组合</span>
scene<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cube<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 添加到场景中</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="标准网格材质与光源" tabindex="-1"><a class="header-anchor" href="#标准网格材质与光源" aria-hidden="true">#</a> 标准网格材质与光源</h2><p>之前我们使用的都是 <em>基础网格材质 MeshBasicMaterial</em>，这种材质都是直接展现的。如果我们想模拟光源下物体的反射折射等场景，则需要使用 <strong>标准网格材质 MeshStandardMaterial</strong> 来展示。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> standardMaterial <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>MeshStandardMaterial</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment">// 创建标准材质</span>
  <span class="token literal-property property">map</span><span class="token operator">:</span> myTexture<span class="token punctuation">,</span>
  <span class="token literal-property property">transparent</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">opacity</span><span class="token operator">:</span> <span class="token number">1.0</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但此时发现我的的物体变黑了，这是因为 标准网格材质 需要有光源才能展现并且模拟光照效果：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 添加光源，使物体显示出来</span>
<span class="token keyword">const</span> ambientLight <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>AmbientLight</span><span class="token punctuation">(</span> <span class="token number">0xffffff</span><span class="token punctuation">,</span> <span class="token number">0.4</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 环境光，参数为光源颜色和强度</span>
scene<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span> ambientLight <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> directionalLight <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>DirectionalLight</span><span class="token punctuation">(</span> <span class="token number">0xffffff</span><span class="token punctuation">,</span> <span class="token number">1.0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 平行光</span>
directionalLight<span class="token punctuation">.</span>position<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// 设置光源位置</span>
scene<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span> directionalLight <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="位移-粗糙度-金属和法线贴图" tabindex="-1"><a class="header-anchor" href="#位移-粗糙度-金属和法线贴图" aria-hidden="true">#</a> 位移，粗糙度，金属和法线贴图</h2><p>贴图素材下载网址：</p>`,16),T={href:"https://www.poliigon.com/textures?credit=0",target:"_blank",rel:"noopener noreferrer"},M={href:"https://www.textures.com/free",target:"_blank",rel:"noopener noreferrer"},L={href:"https://3dtextures.me/",target:"_blank",rel:"noopener noreferrer"},R={href:"https://www.unrealengine.com/zh-CN/bridge",target:"_blank",rel:"noopener noreferrer"},H=n("p",null,"这些不同的贴图都是灰度贴图，借助不同的贴图颜色实现物体局部的状态改变。",-1),S={href:"https://threejs.org/docs/index.html#api/zh/materials/MeshStandardMaterial.displacementMap",target:"_blank",rel:"noopener noreferrer"},C=n("p",null,"位移贴图会影响网格顶点的位置，移位的顶点可以投射阴影，阻挡其他对象，以及充当真实的几何体。位移效果是根据位移贴图的颜色来实现的，黑色是无位移，白色是最大位移。",-1),G=n("strong",null,"粗糙度贴图",-1),z={href:"https://threejs.org/docs/index.html#api/zh/materials/MeshStandardMaterial.roughnessMap",target:"_blank",rel:"noopener noreferrer"},B=n("code",null,"roughness",-1),F=n("strong",null,"金属贴图",-1),W={href:"https://threejs.org/docs/index.html#api/zh/materials/MeshStandardMaterial.metalnessMap",target:"_blank",rel:"noopener noreferrer"},D=n("code",null,"metalness",-1),A=n("strong",null,"法线贴图",-1),O={href:"https://threejs.org/docs/index.html#api/zh/materials/MeshStandardMaterial.normalMap",target:"_blank",rel:"noopener noreferrer"},q=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> displaceTexture <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>TextureLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&#39;./B.png&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 创建几何体，并增加可选参数 分段数；分段数影响顶点个数，而位移贴图就是要依据顶点实现</span>
<span class="token keyword">const</span> geometry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>BoxGeometry</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> standardMaterial <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>MeshStandardMaterial</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">map</span><span class="token operator">:</span> myTexture<span class="token punctuation">,</span>
  <span class="token literal-property property">displacementMap</span><span class="token operator">:</span> displaceTexture<span class="token punctuation">,</span> <span class="token comment">// 贴上位移贴图，实现凸起效果</span>
  <span class="token literal-property property">displacementScale</span><span class="token operator">:</span> <span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token comment">// 位移贴图对网格的影响程度 默认值为1</span>
  <span class="token comment">// roughness: 0 // 直接设置粗糙度，0 光滑，1 粗糙</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="环境贴图" tabindex="-1"><a class="header-anchor" href="#环境贴图" aria-hidden="true">#</a> 环境贴图</h2><p>前面的都是在物体上贴上纹理，然后相机在远处观察。如果我们想做出 相机在一个场景内部，是从内部进行观察，则需要使用环境贴图来实现：其原理就是用一个巨大的盒子包裹住相机，然后再盒子的六个面上贴上贴图。</p><p>我们可以先实现一个相机在远处观察，一个金属球反射周围场景的效果：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建立方体纹理加载器加载立方体每个面的贴图</span>
<span class="token keyword">const</span> cubeTexture <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>CubeTextureLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token string">&#39;px.png&#39;</span><span class="token punctuation">,</span> <span class="token comment">// p 为正方向， n 为负方向</span>
		<span class="token string">&#39;nx.png&#39;</span><span class="token punctuation">,</span>
		<span class="token string">&#39;py.png&#39;</span><span class="token punctuation">,</span>
		<span class="token string">&#39;ny.png&#39;</span><span class="token punctuation">,</span>
		<span class="token string">&#39;pz.png&#39;</span><span class="token punctuation">,</span>
		<span class="token string">&#39;nz.png&#39;</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">// 创建球几何体</span>
<span class="token keyword">const</span> sphereGeometry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>SphereGeometry</span><span class="token punctuation">(</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">16</span> <span class="token punctuation">)</span>
<span class="token comment">// 创建标准材质，贴上纹理</span>
<span class="token keyword">const</span> standardMaterial <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>MeshStandardMaterial</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">envMap</span><span class="token operator">:</span> cubeTexture<span class="token punctuation">,</span> <span class="token comment">// 贴上环境贴图</span>
  <span class="token literal-property property">metalness</span><span class="token operator">:</span> <span class="token number">0.7</span><span class="token punctuation">,</span> <span class="token comment">// 金属度</span>
  <span class="token literal-property property">roughness</span><span class="token operator">:</span> <span class="token number">0.1</span> <span class="token comment">// 光滑度</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 创建网格对象,是球体和材质的组合</span>
<span class="token keyword">const</span> cube <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Mesh</span><span class="token punctuation">(</span>sphereGeometry<span class="token punctuation">,</span> standardMaterial<span class="token punctuation">)</span><span class="token punctuation">;</span>
scene<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cube<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 添加到场景中，注意标准材质需要光源</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),P={href:"https://threejs.org/docs/index.html#api/zh/scenes/Scene",target:"_blank",rel:"noopener noreferrer"},I=e(`<p>只需 <code>Scene.background = cubeTexture</code> 即将立方体纹理赋给场景对象的背景属性。我们也可以设置 <code>Scene.environment = cubeTexture</code> 这样该纹理贴图将会被设为场景中所有物理材质的环境贴图。</p><p>如果我们获取到的不是六张图片，而是一个类似全景图的hdr格式的单图，则需要更改成 <strong>RGBELoader</strong> 加载。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> RGBELoader <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;three/examples/jsm/loaders/RGBELoader&#39;</span>

<span class="token keyword">const</span> rgbeLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RGBELoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
rgbeLoader<span class="token punctuation">.</span><span class="token function">loadAsync</span><span class="token punctuation">(</span><span class="token string">&#39;xxx/1.hdr&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">texture</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  texture<span class="token punctuation">.</span>mapping <span class="token operator">=</span> <span class="token constant">THREE</span><span class="token punctuation">.</span>EquirectangularReflectionMapping <span class="token comment">// 注意要更改纹理映射方式</span>
  Scene<span class="token punctuation">.</span>background <span class="token operator">=</span> texture
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="阴影" tabindex="-1"><a class="header-anchor" href="#阴影" aria-hidden="true">#</a> 阴影</h2><p>如果我们希望开启阴影展示，<strong>注意材质需要对光照有反应</strong>，且必须要有如下步骤</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1.允许渲染器渲染阴影</span>
<span class="token comment">// 2.开启光源投射阴影</span>
<span class="token comment">// 3. 材质物体需要开启阴影投射</span>
<span class="token comment">// 4. 需要有物体接收展示阴影</span>

renderer<span class="token punctuation">.</span>shadowMap<span class="token punctuation">.</span>enabled <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// 开启允许在场景中使用阴影贴图</span>
directionalLight<span class="token punctuation">.</span>castShadow <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// 开启平行光的阴影投射</span>
sphere<span class="token punctuation">.</span>castShadow <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// 开启球的阴影</span>
plane<span class="token punctuation">.</span>receiveShadow <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// 开启平面接收阴影</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),N={href:"https://threejs.org/docs/index.html#api/zh/lights/shadows/LightShadow",target:"_blank",rel:"noopener noreferrer"},J=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>directionalLight<span class="token punctuation">.</span>shadow<span class="token punctuation">.</span>radius <span class="token operator">=</span> <span class="token number">20</span> <span class="token comment">// 设置光照阴影的模糊度</span>
directionalLight<span class="token punctuation">.</span>shadow<span class="token punctuation">.</span>mapSize<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">,</span> <span class="token number">2048</span><span class="token punctuation">)</span> <span class="token comment">// 设置阴影贴图宽高,即精细度</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function V(X,Y){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[n("a",r,[s("Three.js官网"),t(a)]),s(" 官方文档，全面，适合查阅，新手阅读会摸不着头脑")]),n("p",null,[n("a",k,[s("中文电子书"),t(a)]),s(" 第三方文档，适合从0开始学习，熟悉各种常用 api 后再食用官方文档")]),d,n("p",null,[s("可以通过库里的 "),n("a",m,[s("Clock时钟对象"),t(a)]),s(" 来跟踪处理时间。")]),v,n("ul",null,[n("li",null,[n("p",null,[b,s(" 获取自 "),n("a",h,[s(".oldTime"),t(a)]),s(" 设置后到当前的秒数。 同时将 "),g,s(" 设置为当前时间。即渲染时间间隔。")])]),f]),w,n("p",null,[s("此部分详细参见官网： "),n("a",y,[s("几何体"),t(a)]),s(),n("a",x,[s("材质"),t(a)])]),_,n("p",null,[s("load事件可以传递其他参数： "),n("a",E,[s("load"),t(a)]),s(" ( url : String, onLoad : Function, onProgress : Function, onError : Function )")]),j,n("p",null,[n("a",T,[s("https://www.poliigon.com/textures?credit=0"),t(a)])]),n("p",null,[n("a",M,[s("https://www.textures.com/free"),t(a)])]),n("p",null,[n("a",L,[s("https://3dtextures.me/"),t(a)])]),n("p",null,[n("a",R,[s("https://www.unrealengine.com/zh-CN/bridge"),t(a)]),s(" （下载软件，用epic账号登录）等")]),H,n("p",null,[s("如果我们想实现创建的物体表面有凸起等效果，则需要借助 "),n("strong",null,[s("位移贴图 "),n("a",S,[s("displacementMap"),t(a)])]),s(" 来实现。")]),C,n("p",null,[G,s(),n("a",z,[s("roughnessMap"),t(a)]),s(" 搭配 "),B,s("属性")]),n("p",null,[F,s(),n("a",W,[s("metalnessMap"),t(a)]),s(" 搭配 "),D,s("属性")]),n("p",null,[A,s(),n("a",O,[s("normalMap"),t(a)]),s(" 用于创建法线贴图的纹理。RGB值会影响每个像素片段的曲面法线，并更改颜色照亮的方式。")]),q,n("p",null,[s("接下来我们实现让整个场景都变化：主要用到的就是最开始创建的场景对象 "),n("strong",null,[n("a",P,[s("Scene"),t(a)])])]),I,n("p",null,[s("我们可以设置光源的shadow对象来调控光打下去的阴影效果：查看阴影的基类 "),n("a",N,[s("LightShadow"),t(a)]),s(" 了解更多，例如")]),J])}const K=p(i,[["render",V],["__file","threejs.html.vue"]]);export{K as default};
