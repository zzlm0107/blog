const e=JSON.parse('{"key":"v-7e57c632","path":"/code/webDev/webpack/","title":"webpack 笔记","lang":"zh-CN","frontmatter":{"title":"webpack 笔记","icon":"webpack","date":"2023-06-06T00:00:00.000Z","category":["构建工具"],"tag":["webpack"],"description":"webpack概述 在没有使用打包工具前，我们可能会直接使用 script标签 引用各种包，但这可能会导致一些问题： 无法直接体现，脚本的执行依赖于外部库。 如果依赖不存在，或者引入顺序错误，应用程序将无法正常运行。 如果依赖被引入但是并没有使用，浏览器将被迫下载无用代码。 那么，我们就需要了解什么是打包/构建工具，因为浏览器只认识html，css ，js文件，而我们实际开发中所写的文件格式类型多种多样，所以就需要一个工具来将我们写的多种格式的代码进行转换，当然可能帮助我们管理引入的各种依赖包。而这就是打包工具的其中几个功能，具体可查看我的 vite笔记 篇。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/code/webDev/webpack/"}],["meta",{"property":"og:site_name","content":"正の博客"}],["meta",{"property":"og:title","content":"webpack 笔记"}],["meta",{"property":"og:description","content":"webpack概述 在没有使用打包工具前，我们可能会直接使用 script标签 引用各种包，但这可能会导致一些问题： 无法直接体现，脚本的执行依赖于外部库。 如果依赖不存在，或者引入顺序错误，应用程序将无法正常运行。 如果依赖被引入但是并没有使用，浏览器将被迫下载无用代码。 那么，我们就需要了解什么是打包/构建工具，因为浏览器只认识html，css ，js文件，而我们实际开发中所写的文件格式类型多种多样，所以就需要一个工具来将我们写的多种格式的代码进行转换，当然可能帮助我们管理引入的各种依赖包。而这就是打包工具的其中几个功能，具体可查看我的 vite笔记 篇。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-20T08:07:46.000Z"}],["meta",{"property":"article:author","content":"正"}],["meta",{"property":"article:tag","content":"webpack"}],["meta",{"property":"article:published_time","content":"2023-06-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-20T08:07:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"webpack 笔记\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-06T00:00:00.000Z\\",\\"dateModified\\":\\"2023-07-20T08:07:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"正\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"webpack概述","slug":"webpack概述","link":"#webpack概述","children":[]},{"level":2,"title":"webpack简单使用","slug":"webpack简单使用","link":"#webpack简单使用","children":[]},{"level":2,"title":"入口 entry","slug":"入口-entry","link":"#入口-entry","children":[]},{"level":2,"title":"出口 output","slug":"出口-output","link":"#出口-output","children":[]},{"level":2,"title":"理解dependencies和devDependencies","slug":"理解dependencies和devdependencies","link":"#理解dependencies和devdependencies","children":[]},{"level":2,"title":"loader处理css文件","slug":"loader处理css文件","link":"#loader处理css文件","children":[]},{"level":2,"title":"css模块化","slug":"css模块化","link":"#css模块化","children":[]}],"git":{"createdTime":1689840466000,"updatedTime":1689840466000,"contributors":[{"name":"zzlm0107","email":"zzlm0107@163.com","commits":1}]},"readingTime":{"minutes":6.46,"words":1939},"filePathRelative":"code/webDev/webpack/README.md","localizedDate":"2023年6月6日","excerpt":"<h2> webpack概述</h2>\\n<p>在没有使用打包工具前，我们可能会直接使用 <em>script标签</em> 引用各种包，但这可能会导致一些问题：</p>\\n<ul>\\n<li>无法直接体现，脚本的执行依赖于外部库。</li>\\n<li>如果依赖不存在，或者引入顺序错误，应用程序将无法正常运行。</li>\\n<li>如果依赖被引入但是并没有使用，浏览器将被迫下载无用代码。</li>\\n</ul>\\n<p>那么，我们就需要了解什么是打包/构建工具，因为浏览器只认识html，css ，js文件，而我们实际开发中所写的文件格式类型多种多样，所以就需要一个工具来将我们写的多种格式的代码进行转换，当然可能帮助我们管理引入的各种依赖包。而这就是打包工具的其中几个功能，具体可查看我的 <strong>vite笔记</strong> 篇。</p>","autoDesc":true}');export{e as data};
