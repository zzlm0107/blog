import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as a,o as i,c as p,a as t,b as l,d as e,f as o,e as c}from"./app-6422d99d.js";const r="/blog/assets/三次握手-ecf1630c.png",d="/blog/assets/四次挥手-5f61b1be.png",u="/blog/assets/请求报文-b692384a.png",h="/blog/assets/响应报文-2c0fa8e4.png",g="/blog/assets/HTTPS原理-8261b8c1.png",k={},f=t("p",null,"HTTP协议（HyperText Transfer Protocol，超文本传输协议）是因特网上应用最为广泛的一种网络传输协议。",-1),b=t("p",null,"学习网站参考：",-1),m=t("strong",null,"MDN",-1),T={href:"https://developer.mozilla.org/zh-CN/docs/web/http/overview",target:"_blank",rel:"noopener noreferrer"},v=t("strong",null,"菜鸟教程",-1),x={href:"https://www.runoob.com/http/http-tutorial.html",target:"_blank",rel:"noopener noreferrer"},y=t("strong",null,"devdocs",-1),P={href:"https://devdocs.io/http/",target:"_blank",rel:"noopener noreferrer"},C=c('<h2 id="经典五层模型" tabindex="-1"><a class="header-anchor" href="#经典五层模型" aria-hidden="true">#</a> 经典五层模型</h2><ol><li>应用层 <ul><li>为应用软件提供了很多服务，构建于协议之上。</li></ul></li><li>传输层 <ul><li>数据的传输都是在这层定义的，数据过大分包，分片。</li></ul></li><li>网络层 <ul><li>为数据在节点之间传输创建逻辑链路</li></ul></li><li>数据链路层 <ul><li>通讯实体间建立数据链路连接</li></ul></li><li>物理层 <ul><li>主要作用是定义物理设备如何传输数据（光缆，网线）</li></ul></li></ol><h2 id="http协议的发展历史" tabindex="-1"><a class="header-anchor" href="#http协议的发展历史" aria-hidden="true">#</a> HTTP协议的发展历史</h2><ul><li><p>http0.9 :</p><ul><li>只有一个命令GET，没有header等描述数据的信息，服务器发送完毕，就关闭tcp协议。</li></ul></li><li><p>http1.0:</p><ul><li>增加了请求命令（GET, POST 和 HEAD）</li><li>status code</li><li>header</li><li>多字符集支持</li><li>权限</li><li>缓存</li><li>内容编码</li><li>多部分发送</li></ul><p><strong>缺点：</strong></p><blockquote><p>HTTP/1.0 版的主要缺点是，每个TCP连接只能发送一个请求。发送数据完毕，连接就关闭，如果还要请求其他资源，就必须再新建一个连接。</p><p>TCP连接的新建成本很高，因为需要客户端和服务器三次握手，并且开始时发送速率较慢。所以HTTP 1.0版本的性能比较差。随着网页加载的外部资源越来越多，这个问题就愈发突出了。</p><p>为了解决这个问题，有些浏览器在请求时，用了一个非标准的Connection字段。<code>Connection: keep-alive</code></p><p>这个字段要求服务器不要关闭TCP连接，以便其他请求复用。服务器同样回应这个字段。</p><p>一个可以复用的TCP连接就建立了，直到客户端或服务器主动关闭连接。但是，这不是标准字段，不同实现的行为可能不一致，因此不是根本的解决办法。</p></blockquote></li><li><p>http1.1:</p><ul><li>增加了请求命令（OPTIONS、PUT、PATCH、DELETE、TRACE 、CONNECT）</li><li>持久连接</li><li>增加host</li></ul><p><strong>缺点:</strong></p><blockquote><p>虽然1.1版允许复用TCP连接，但是同一个TCP连接里面，所有的数据通信是按次序进行的。服务器只有处理完一个回应，才会进行下一个回应。要是前面的回应特别慢，后面就会有许多请求排队等着。这称为<strong>队头堵塞</strong></p><p>为了避免这个问题，只有两种方法：</p><ol><li>减少请求数</li><li>同时多开持久连接</li></ol><p>这导致了很多的网页优化技巧，比如合并脚本和样式表、将图片嵌入CSS代码、域名分片（domain sharding）等等。</p></blockquote></li><li><p>http2:</p><ul><li>二进制传输</li><li>信道复用</li><li>分帧传输</li><li>server push</li></ul></li></ul><h2 id="http三次握手" tabindex="-1"><a class="header-anchor" href="#http三次握手" aria-hidden="true">#</a> HTTP三次握手</h2><figure><img src="'+r+'" alt="三次握手" tabindex="0" loading="lazy"><figcaption>三次握手</figcaption></figure><p>第一次握手: 发送<em>SYN</em>报文，传达信息：“你好，我想建立连接”</p><p>第二次握手: 回传SYN+ACK报文，传达信息：“好的，可以建立链接”；</p><p>第三次握手: 回传ACK报文，传到信息：“好的，我知道了，那我们连接”。然后就建立连接了</p><blockquote><p>TCP为什么要进行三次握手：</p><p>因为网络传输有延迟，客户端发送请求到服务器端要求建立连接，如果服务器端直接返回的话可能会产生丢包的情况导致客户端接收不到数据，客户端会因为超时就关闭了，可能就去发送新的请求了，然而服务端并不知道丢包导致客户端没有接收数据，服务端端口就一直开着，造成了额外的开销。所以需要三次握手确认这个过程。</p></blockquote><h2 id="http四次挥手" tabindex="-1"><a class="header-anchor" href="#http四次挥手" aria-hidden="true">#</a> HTTP四次挥手</h2><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>第一次挥手: 客户端 和 服务器 打电话，通话即将结束后</p><p>第二次挥手: 客户端说“我没啥要说的了”，服务器回答“我知道了”，但是 服务器 可能还会有要说的话</p><p>第三次挥手: 客户端 不能要求 服务器 跟着自己的节奏结束通话，于是 服务器 可能又巴拉巴拉说了一通，最后 服务器 说“我说完了</p><p>第四次挥手: 客户端 回答“知道了”，这样通话才算结束。</p><blockquote><p>TCP为什么要进行四次握手:</p><p>因为数据传送结束后发出连接释放的通知，待对方确认后进入半关闭状态。当另一方也没有数据再发送的时候，则发出连接释放通知，对方确认后就完全关闭了TCP连接。</p></blockquote><h2 id="http报文" tabindex="-1"><a class="header-anchor" href="#http报文" aria-hidden="true">#</a> HTTP报文</h2><ul><li>请求报文</li></ul><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>响应报文</li></ul><figure><img src="'+h+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="http请求方法" tabindex="-1"><a class="header-anchor" href="#http请求方法" aria-hidden="true">#</a> HTTP请求方法</h3><table><thead><tr><th style="text-align:left;">序号</th><th style="text-align:left;">方法</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;">GET</td><td style="text-align:left;">请求指定的页面信息，并返回实体主体。</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;">HEAD</td><td style="text-align:left;">类似于 GET 请求，只不过返回的响应中没有具体的内容，用于获取报头</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;">POST</td><td style="text-align:left;">向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和/或已有资源的修改。</td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;">PUT</td><td style="text-align:left;">从客户端向服务器传送的数据取代指定的文档的内容。</td></tr><tr><td style="text-align:left;">5</td><td style="text-align:left;">DELETE</td><td style="text-align:left;">请求服务器删除指定的页面。</td></tr><tr><td style="text-align:left;">6</td><td style="text-align:left;">CONNECT</td><td style="text-align:left;">HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。</td></tr><tr><td style="text-align:left;">7</td><td style="text-align:left;">OPTIONS</td><td style="text-align:left;">允许客户端查看服务器的性能。</td></tr><tr><td style="text-align:left;">8</td><td style="text-align:left;">TRACE</td><td style="text-align:left;">回显服务器收到的请求，主要用于测试或诊断。</td></tr><tr><td style="text-align:left;">9</td><td style="text-align:left;">PATCH</td><td style="text-align:left;">是对 PUT 方法的补充，用来对已知资源进行局部更新 。</td></tr></tbody></table><h3 id="http状态码" tabindex="-1"><a class="header-anchor" href="#http状态码" aria-hidden="true">#</a> HTTP状态码</h3><table><thead><tr><th style="text-align:left;">分类</th><th style="text-align:left;">分类描述</th></tr></thead><tbody><tr><td style="text-align:left;">1**</td><td style="text-align:left;">信息，服务器收到请求，需要请求者继续执行操作</td></tr><tr><td style="text-align:left;">2**</td><td style="text-align:left;">成功，操作被成功接收并处理</td></tr><tr><td style="text-align:left;">3**</td><td style="text-align:left;">重定向，需要进一步的操作以完成请求</td></tr><tr><td style="text-align:left;">4**</td><td style="text-align:left;">客户端错误，请求包含语法错误或无法完成请求</td></tr><tr><td style="text-align:left;">5**</td><td style="text-align:left;">服务器错误，服务器在处理请求的过程中发生了错误</td></tr></tbody></table><p><strong>注意:</strong></p><p>​ 301 永久跳转(会走缓存)</p><p>​ 302 临时跳转</p><h2 id="跨域-cors" tabindex="-1"><a class="header-anchor" href="#跨域-cors" aria-hidden="true">#</a> 跨域(CORS)</h2><ol><li><p>什么是跨域</p><ul><li>浏览器的<strong>同源策略</strong>限制了跨域请求资源</li></ul></li><li><p>跨域的限制(请求)</p><ul><li><p>默认允许跨域的方法只有get、post、head，其它的方法不允许</p></li><li><p>默认允许Content-type是以下3个，其它类型只有通过预检请求验证通过后才能发送，即下面3个类型的（简单请求）不会触发预检请求。</p><ul><li>text/plain</li><li>multipart/form-data</li><li>application/x-www-form-urlencoded</li></ul></li><li><p>请求头限制,跨域对于自定义的请求头是不允许的，预请求验证通过才能发送</p></li></ul></li><li><p>解决跨域</p><ul><li><p>早期 jsonp跨域（利用script标签直接解析原理，仅适用get）</p></li><li><p>客户端开启 代理服务器</p></li><li><p>服务端配置 cors，添加允许跨域源，自定义请求头等</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Access<span class="token operator">-</span>Control<span class="token operator">-</span>Allow<span class="token operator">-</span>Origin<span class="token operator">:</span> <span class="token operator">*</span>
Access<span class="token operator">-</span>Control<span class="token operator">-</span>Allow<span class="token operator">-</span>Methods<span class="token operator">:</span> <span class="token constant">POST</span><span class="token punctuation">,</span> <span class="token constant">GET</span><span class="token punctuation">,</span> <span class="token constant">OPTIONS</span>
Access<span class="token operator">-</span>Control<span class="token operator">-</span>Allow<span class="token operator">-</span>Headers<span class="token operator">:</span> <span class="token constant">X</span><span class="token operator">-</span><span class="token constant">PINGOTHER</span><span class="token punctuation">,</span> Content<span class="token operator">-</span>Type
Access<span class="token operator">-</span>Control<span class="token operator">-</span>Max<span class="token operator">-</span>Age<span class="token operator">:</span> <span class="token number">86400</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><h2 id="cache-control" tabindex="-1"><a class="header-anchor" href="#cache-control" aria-hidden="true">#</a> Cache-Control</h2><p><strong>通用消息头字段，被用于在 http 请求和响应中，通过指定指令来实现缓存机制。主要用来指定传递的数据在接收方的缓存配置。</strong></p><p>缓存分为两种类型：<strong>私有缓存和共享缓存</strong>。</p><p>私有缓存是绑定到特定客户端的缓存，存储的响应不与其他客户端共享。</p><p>共享缓存位于客户端和服务器之间，可以存储能在用户之间共享的响应。</p><ul><li>可缓存性 <ul><li>public 所有内容都将被缓存（客户端和代理服务器都可缓存）</li><li>private 所有内容只有客户端可以缓存，Cache-Control的默认取值</li><li>no-cache 客户端缓存内容，但是是否使用缓存则需要经过协商缓存来验证决定</li><li>no-store 所有内容都不会被缓存</li></ul></li><li>到期时间(seconds) <ul><li>max-age = &lt; seconds &gt; 缓存的最大时间</li><li>s-maxage = &lt; seconds &gt; 只有在代理服务器才会生效</li><li>max-stale = &lt; seconds &gt; 表明客户端愿意接收一个已经过期的资源，只能在发起端设置 就算max-age时间过期 max-stale时间没过期也会走缓存</li></ul></li><li>验证头 (不走本地缓存 发送请求带上验证头 验证决定走不走缓存 它基于no-cache<strong>协商缓存</strong>的情况） <ul><li><p>last-Modified</p><ul><li>配合If-Modified-Since使用，服务端先返回last-Modified标识该资源最新更新时间，客户端再次请求相同资源时用If-Modified-Since回传资源最新更新时间，服务端发现该字段后即可对比</li><li>对比资源上次最新修改时间与服务器当前最新的资源修改时间是否一致以验证资源是否需要更新（200 or 304）</li></ul></li><li><p>Etag （<em>优先级更高</em>）</p><ul><li><p>数据签名，形成hash值传给客户端，客户端在下次请求中带上，服务端再判断有无变化。</p></li><li><p>配合if-None-Match使用，服务端先返回Etag标识该资源最新hash值，客户端再次请求相同资源时用if-None-Match回传资源hash值，服务端发现该字段后即可对比</p></li><li><p>服务端每次资源的变化都会生成新的对应hash值</p></li></ul></li></ul></li></ul><h2 id="cookie" tabindex="-1"><a class="header-anchor" href="#cookie" aria-hidden="true">#</a> Cookie</h2><p>用法：</p><ul><li>通过Set-Cookie设置</li><li>下次请求会自动带上</li><li>键值对，可以设置多个</li></ul><p>属性：</p><ul><li>max-age 和 expires设置过期时间</li><li>Secure只在https的时候发送</li><li>HttpOnly无法通过document.cookie访问</li></ul><h2 id="http长连接" tabindex="-1"><a class="header-anchor" href="#http长连接" aria-hidden="true">#</a> HTTP长连接</h2><ul><li>TCP connection <ul><li>Connection: keep-alive/close(开启/关闭)</li><li>HTTP2只需要建立一个TCP长连接 (同域下)</li></ul></li></ul><h2 id="数据协商" tabindex="-1"><a class="header-anchor" href="#数据协商" aria-hidden="true">#</a> 数据协商</h2><ul><li><p>请求</p><ul><li><p>Accept 什么类型</p></li><li><p>Accept-Encoding 压缩方式</p></li><li><p>Accept-Language 语言</p></li><li><p>user-Agent 浏览器信息</p></li></ul></li><li><p>返回</p><ul><li>Content-type</li><li>Content-Encoding</li><li>Content-Language</li></ul></li></ul><h2 id="https" tabindex="-1"><a class="header-anchor" href="#https" aria-hidden="true">#</a> HTTPS</h2><ul><li><p>http 是明文传输</p></li><li><p>https 通过握手进行加密</p><ul><li>加密-公钥</li><li>解密-私钥</li></ul></li></ul><figure><img src="`+g+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li>客户端请求服务器获取<code>证书公钥</code></li><li>客户端(SSL/TLS)解析证书（无效会弹出警告），拿到公钥</li><li>客户端生成随机值</li><li>客户端用<code>公钥加密</code>随机值生成<strong>密钥</strong></li><li>客户端将<code>秘钥</code>发送给服务器</li><li>服务端用<code>证书私钥</code>解密<strong>秘钥</strong>得到随机值</li><li><code>将信息和随机值混合在一起</code>进行对称加密</li><li>将加密的内容发送给客户端</li><li>客户端用<strong>秘钥</strong>解密信息</li></ol><h2 id="http2" tabindex="-1"><a class="header-anchor" href="#http2" aria-hidden="true">#</a> HTTP2</h2><ul><li><p>二进制协议</p><ul><li>http1.1头信息必须是字符，数据体可以是文本,也可以是二进制</li><li>http2 全部都是二进制</li></ul></li><li><p>头信息压缩</p><ul><li>头部信息一样的变相缓存</li></ul></li><li><p>信道复用</p><ul><li>同一个连接里面发送多个请求不再需要按照顺序来</li></ul></li><li><p>数据流</p><ul><li>http1.1版取消数据流的唯一方法，就是关闭TCP连接。</li><li>http2 可以取消某一次请求，同时保证TCP连接还打开着，可以被其他请求使用。</li></ul></li><li><p>服务器推送</p><ul><li><p>Http2 服务端可以推送，主动向客户端发送请求</p><blockquote><p>http1 解析html页面里面css、js文件, 需要解析到css和js文件发送请求等数据回来渲</p><p>http2 解析html里面建立连接，如果有css、js文件，服务端会主动推送到客户端</p><p>不再发送请求获取css、js文件</p></blockquote></li><li><p>浏览器目前是必须开启https 才能使用http2</p></li></ul></li></ul><h2 id="websocket" tabindex="-1"><a class="header-anchor" href="#websocket" aria-hidden="true">#</a> WebSocket</h2><p>WebSockets是HTML5提供的在WEB应用程序中客户端和服务器端之间进行的非HTTP的通信机制。相比于传统的http协议规定请求只能由客户端发起，服务端响应，websocket真正做到了请求的平等性，即服务端除了接收请求，也可以主动推送数据给客户端，实现了通信的双向性。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 创建实例，开始建立连接</span>
<span class="token keyword">const</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">&#39;ws://localhost:8080&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 2.连接成功后触发open事件</span>
socket<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;open&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;websocket连接成功&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 3. 客户端向服务器发送数据，只能发送字符串或二进制数据</span>
socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Hello Server!&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 4. 接收服务器主动推送的请求 触发message事件</span>
socket<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Message from server &#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 5.连接需要主动断开</span>
socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Http2中也实现了 <strong>Sever Push</strong> 即服务端主动推送数据，但触发条件时客户端必须先发送一个请求。例如 http1.1 请求html页面，当客户端解析时发现里面需要css、js文件就又会再次发送请求获取。而 http2 Sever Push是当客户端请求html页面，除了返回请求数据，服务器还会推送相关的文件（推送什么文件是由后端配置的，需要前后端提前约定好），从而减少http请求数量。</p><p>二者相比，明显WebSocket更加灵活，使用起来更方便，所以目前实现服务端推送消息主流都是用WebSocket的。</p><h2 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题" aria-hidden="true">#</a> 常见问题</h2><ol><li><p>为什么传统上利用多个域名来提供网站资源会更有效</p></li><li><p>Long-Polling、Websockets、Server-Sent Event(SSE)、WebRTC</p></li><li><p>常见的请求头和响应头</p></li><li><p>和缓存有关的<code>HTTP</code>首部字段(非常重要)</p></li><li><p>HTTP method</p></li><li><p>HTTP 状态码</p></li><li><p>HTTPS 加密过程</p></li><li><p>HTTP2新特性（重要）</p></li><li><p>三次握手四次挥手(重要)</p></li></ol>`,59);function _(S,H){const n=a("ExternalLinkIcon");return i(),p("div",null,[f,b,t("ul",null,[t("li",null,[t("p",null,[m,l(),t("a",T,[l("https://developer.mozilla.org/zh-CN/docs/web/http/overview"),e(n)])])]),t("li",null,[t("p",null,[v,l(),t("a",x,[l("https://www.runoob.com/http/http-tutorial.html"),e(n)])])]),t("li",null,[t("p",null,[y,l(),t("a",P,[l("https://devdocs.io/http/"),e(n)])])])]),o(" more "),C])}const A=s(k,[["render",_],["__file","http.html.vue"]]);export{A as default};
