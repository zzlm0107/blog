import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as n,b as s,e as p,d as a}from"./app-04f25f71.js";const i={},u=a(`<h2 id="初识react" tabindex="-1"><a class="header-anchor" href="#初识react" aria-hidden="true">#</a> 初识React</h2><p>使用React的好处：</p><ol><li>采用<strong>组件化模式</strong>、<strong>声明式编码</strong>，提高开发效率及组件复用率</li><li>在 React Native中可以使用React语法进行<strong>移动端开发</strong></li><li>使用<strong>虚拟DOM</strong>+<strong>Diff算法</strong>，尽量减少与真实DOM的交互</li></ol><p>开始我们的第一个react页面：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>hello_react<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 准备好一个“容器” --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

  <span class="token comment">&lt;!-- 引入react核心库 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../js/react.development.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../js/react-dom.development.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 引入babel，用于将jsx转为js --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../js/babel.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/babel<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"> <span class="token comment">/* 此处一定要写babel */</span>
    <span class="token comment">//1.创建虚拟DOM</span>
    <span class="token keyword">const</span> <span class="token constant">VDOM</span> <span class="token operator">=</span> <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>Hello<span class="token punctuation">,</span>React<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span> <span class="token comment">/* 此处一定不要写引号，因为不是字符串 */</span>
    <span class="token comment">//2.渲染虚拟DOM到页面</span>
    ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token constant">VDOM</span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建虚拟DOM的两种方式：</p><ul><li>JS方式(一般不用) <code>React.createElement( 标签类型，{标签内联属性}，标签内容 )</code></li><li>JSX方式, 即上述在 script 标签里写 HTML 的方式</li></ul><p>那么到底什么是虚拟DOM呢？</p><ol><li>虚拟<code>DOM</code>本质是<code>Object</code>类型的对象（一般对象）</li><li>虚拟<code>DOM</code>比较 “<strong>轻</strong>”，真实<code>DOM</code>比较 “<strong>重</strong>”，因为虚拟<code>DOM</code>是<code>React</code>内部在用，无需真实<code>DOM</code>上那么多的属性</li><li>虚拟<code>DOM</code>最终会被<code>React</code>转化为真实<code>DOM</code>，呈现在页面上</li></ol><h2 id="jsx语法" tabindex="-1"><a class="header-anchor" href="#jsx语法" aria-hidden="true">#</a> JSX语法</h2><p>全称<code>JavaScript XML</code>，是React定义的一种类似于XML的JS扩展语法: JS + XML本质上就是<code>React.createElement()</code>方法的语法糖，目的是用来简化创建虚拟DOM。</p><p>具体用法如上，在 script 标签里写 HTML 的方式，注意它不是字符串, 也不是HTML/XML标签，而是通过一个变量进行接收的，它最终产生的就是一个JS对象。</p><p>语法规则：</p><ol><li><p>定义虚拟DOM时，不要写引号。</p></li><li><p>标签中混入<strong>JS表达式时</strong>要用 <code>{ }</code>。</p></li><li><p>样式的类名指定不要用 class，要用 <code>className</code>。（因为class是ES6中类的关键字，所以不让用）</p></li><li><p>内联样式，要用 <code>style={{ key:value }}</code> 的形式去写。</p></li><li><p>只有一个根标签</p></li><li><p>标签必须闭合</p></li></ol><p>7.标签首字母</p><ul><li>若<strong>小写字母</strong>开头，则将该标签转为<code>html</code>中同名元素，若<code>html</code>中无该标签对应的同名元素，则报错。</li><li>若<strong>大写字母</strong>开头，<code>React</code>就去渲染对应的组件，若组件没有定义，则报错</li></ul><h2 id="组件化编程" tabindex="-1"><a class="header-anchor" href="#组件化编程" aria-hidden="true">#</a> 组件化编程</h2><p>组件：就是用来实现局部功能效果的代码和资源的集合，方便复用到其他位置而进行封装的产物。</p><p><strong>函数式组件</strong></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 1. 创建函数式组件</span>
<span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//此处的this是undefined，因为babel编译后开启了严格模式</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">我是用函数定义的组件（适用于简单组件的定义）</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">}</span>
<span class="token comment">// 2. 渲染组件到页面</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span><span class="token punctuation">/&gt;</span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行了<code>ReactDOM.render(&lt;MyComponent/&gt;.......)</code>之后，发生了什么？</p><ol><li>React解析组件标签，找到了MyComponent组件。</li><li>发现组件是使用函数定义的，随后<strong>调用该函数</strong>，将返回的虚拟DOM转为真实DOM，随后呈现在页面中。</li></ol><p><strong>类式组件</strong></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">//1.创建类式组件</span>
<span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token comment">//render是放在哪里的？—— MyComponent的原型对象上，供实例使用。</span>
	<span class="token comment">//render中的this是谁？—— MyComponent的实例对象 &lt;=&gt; MyComponent组件实例对象。</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;render中的this:&#39;</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">我是用类定义的组件(适用于【复杂组件】的定义)</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//2.渲染组件到页面</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span><span class="token punctuation">/&gt;</span></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行了<code>ReactDOM.render(&lt;MyComponent/&gt;.......</code>之后，发生了什么？</p><ol><li>React解析组件标签，找到了MyComponent组件。</li><li>发现组件是使用类定义的，随后<code>new</code>出来该类的实例，并通过该实例调用到原型上的<code>render</code>方法。</li><li>将<code>render</code>返回的虚拟DOM转为真实DOM，随后呈现在页面中。</li></ol><h2 id="组件实例核心属性" tabindex="-1"><a class="header-anchor" href="#组件实例核心属性" aria-hidden="true">#</a> 组件实例核心属性</h2><p>只有类式组件才能获取到组件实例，即this指向的实例对象，所以<strong>核心属性是针对类式组件来说的</strong>。</p><p>但是现在我们也可以使用 hooks 来获取到相关核心属性，即<strong>函数式组件也支持了，并且会成为后续主流写法</strong></p><h3 id="state属性-类式" tabindex="-1"><a class="header-anchor" href="#state属性-类式" aria-hidden="true">#</a> state属性（类式）</h3><p>组件的state属性是一个对象，里面放的是多个key-value，可以看成是组件的数据仓库。</p><p>修改组件的state属性需要使用setState进行更新，不可以直接修改。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 1.创建组件</span>
<span class="token keyword">class</span> <span class="token class-name">Weather</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
	
  <span class="token comment">// 构造器调用几次？ ———— 1次</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>
    <span class="token comment">// 初始化状态</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">isHot</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token literal-property property">wind</span><span class="token operator">:</span><span class="token string">&#39;微风&#39;</span><span class="token punctuation">}</span>
    <span class="token comment">// 解决 changeWeather 中 this 指向问题</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>changeWeather <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">changeWeather</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// render调用几次？ ———— 1+n次 1是初始化的那次 n是状态更新的次数</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;render&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//读取状态</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span>isHot<span class="token punctuation">,</span>wind<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeWeather<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">今天天气很</span><span class="token punctuation">{</span>isHot <span class="token operator">?</span> <span class="token string">&#39;炎热&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;凉爽&#39;</span><span class="token punctuation">}</span><span class="token plain-text">，</span><span class="token punctuation">{</span>wind<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">}</span>

  <span class="token comment">// changeWeather调用几次？ ———— 点几次调几次</span>
  <span class="token function">changeWeather</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// changeWeather放在哪里？ ———— Weather的原型对象上，供实例使用</span>
    <span class="token comment">// 由于changeWeather是作为onClick的回调，所以不是通过实例调用的，是直接调用</span>
    <span class="token comment">// 类中的方法默认开启了局部的严格模式，所以changeWeather中的this为undefined</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;changeWeather&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取原来的isHot值</span>
    <span class="token keyword">const</span> isHot <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isHot
    <span class="token comment">// 严重注意：状态必须通过setState进行更新,且更新是一种合并，不是替换。</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">isHot</span><span class="token operator">:</span><span class="token operator">!</span>isHot<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment">// console.log(this);</span>

    <span class="token comment">// 严重注意：状态(state)不可直接更改，下面这行就是直接更改！！！</span>
    <span class="token comment">// this.state.isHot = !isHot //这是错误的写法</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//2.渲染组件到页面</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Weather</span></span><span class="token punctuation">/&gt;</span></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：<strong>如果在render()函数返回的模板中直接调用changeWeather()方法,其内部是获取不到 this.state 的。因为类中定义的方法，在内部默认开启了</strong>局部</strong>的严格模式 开启严格模式，函数如果直接调用，this不会指向实例，而是undefined。<br> 所以就需要在constructor() 构造器函数中通过 bind() 方法修改this指向，将其指向实例。这样的话render()函数返回的模板中绑定的this.changeWeather方法就是经过修改this指向后的方法，方法内部的this可以获取到state。</p><p><strong>简写形式</strong></p><p>原理：</p><ol><li>在类中直接写赋值语句，等于是给类的<strong>实例对象</strong>添加属性且赋值，相当于添加固定值属性；</li><li>不用bind来绑定this（赋值语句的形式+箭头函数）</li></ol><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 1.创建组件</span>
<span class="token keyword">class</span> <span class="token class-name">Weather</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span>
  <span class="token comment">// 初始化状态</span>
  state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">isHot</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token literal-property property">wind</span><span class="token operator">:</span><span class="token string">&#39;微风&#39;</span><span class="token punctuation">}</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span>isHot<span class="token punctuation">,</span>wind<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeWeather<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">今天天气很</span><span class="token punctuation">{</span>isHot <span class="token operator">?</span> <span class="token string">&#39;炎热&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;凉爽&#39;</span><span class="token punctuation">}</span><span class="token plain-text">，</span><span class="token punctuation">{</span>wind<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 自定义方法————要用赋值语句的形式 + 箭头函数</span>
  <span class="token comment">// 没有放在原型上，而是放在实例上</span>
  <span class="token function-variable function">changeWeather</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> isHot <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isHot
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">isHot</span><span class="token operator">:</span><span class="token operator">!</span>isHot<span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 2.渲染组件到页面</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Weather</span></span><span class="token punctuation">/&gt;</span></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>函数式组件的使用方法参考后面的Hooks章节的<a href="###useState">useState</a></strong></em></p><h3 id="props属性-类式" tabindex="-1"><a class="header-anchor" href="#props属性-类式" aria-hidden="true">#</a> props属性(类式)</h3><p><strong>理解：</strong></p><ol><li><p>每个组件对象都会有<code>props</code>属性</p></li><li><p>组件标签的所有属性都保存在<code>props</code>中</p></li></ol><p><strong>作用：</strong></p><ol><li>通过标签属性从组件<strong>外</strong>向组件<strong>内</strong>传递变化的数据</li><li>注意: 组件内部<strong>不可修改</strong><code>props</code>数据，是只读的</li></ol><p>还可以通过官方库 <strong>prop-types</strong> 限制props的类型，必要性等：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 引入prop<span class="token operator">-</span>types，用于对组件标签属性进行限制 <span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../js/prop-types.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">// 创建组件 </span>
<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">姓名：</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> 
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">性别：</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>sex<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> 
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">年龄：</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">//对标签属性进行类型、必要性的限制</span>
  <span class="token keyword">static</span> propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span>PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span> <span class="token comment">// 限制name必传，且为字符串</span>
    <span class="token literal-property property">sex</span><span class="token operator">:</span>PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">,</span> <span class="token comment">// 限制sex为字符串</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span>PropTypes<span class="token punctuation">.</span>number<span class="token punctuation">,</span> <span class="token comment">// 限制age为数值</span>
    <span class="token literal-property property">speak</span><span class="token operator">:</span>PropTypes<span class="token punctuation">.</span>func<span class="token punctuation">,</span> <span class="token comment">// 限制speak为函数</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">//指定默认标签属性值</span>
  <span class="token keyword">static</span> defaultProps <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">sex</span><span class="token operator">:</span><span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span> <span class="token comment">// sex默认值为男</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">18</span> <span class="token comment">//age默认值为18</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 渲染组件到页面上</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>andy<span class="token punctuation">&quot;</span></span> <span class="token attr-name">age</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>18<span class="token punctuation">&quot;</span></span> <span class="token attr-name">sex</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>男<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 批量传递标签属性</span>
<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;lucy&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">&#39;女&#39;</span><span class="token punctuation">}</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span></span> <span class="token spread"><span class="token punctuation">{</span> <span class="token operator">...</span>person <span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>注意：其实在函数式组件中也可以接收到props，就是函数式组件的参数，拿到之后就可以在jsx中使用。并且也可以在外侧使用 propTypes 类型校验。</strong></em></p><h3 id="ref属性-类式" tabindex="-1"><a class="header-anchor" href="#ref属性-类式" aria-hidden="true">#</a> ref属性（类式）</h3><p>使用jsx写出来的组件内的标签可以定义<code>ref</code>属性来标识自己，这样就可以在组件内获取到真实渲染出来的标签。</p><p>refs属性有三种写法：</p><ul><li>字符串形式,但官方不再推荐，后续可能废除</li></ul><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>input1<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>refs<span class="token punctuation">.</span>input1<span class="token punctuation">)</span>  <span class="token comment">// 获取</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>回调形式。ref的回调函数在渲染时调用一次，每次更新都会执行两次类绑定的回调，第一次清空，第二次赋值</li></ul><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 回调的参数就是当前标签，函数体把标签挂到了组件的一个属性上</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span> <span class="token parameter">c</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>input1 <span class="token operator">=</span> c <span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>input1<span class="token punctuation">)</span>  <span class="token comment">// 获取</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>createRef</code>创建</li></ul><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// React.createRef调用后可以返回一个容器</span>
<span class="token comment">// 该容器可以存储被ref所标识的节点,该容器是“专人专用”的</span>
myRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token comment">// console.log(this.myRef.cuurent) 绑定的容器里面的current属性才是标签</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>myRef<span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>函数式组件的使用方法参考后面的Hooks章节的<a href="###useRef">useRef</a></strong></em></p><h2 id="事件处理" tabindex="-1"><a class="header-anchor" href="#事件处理" aria-hidden="true">#</a> 事件处理</h2><p>通过onXxx属性指定事件处理函数(注意大小写)</p><ol><li>React使用的是<strong>自定义(合成)事件</strong>, 而不是原生DOM事件，底层对所有事件都重新写了一遍 ----为了更好的兼容性</li><li>React中的事件是通过<strong>事件委托</strong>方式处理的(<strong>委托给组件最外层的元素</strong>)，我们在jsx上所绑定的事件会被react收集起来，当jsx转换成真实dom，并且触发了相关真实事件后，事件会层层冒泡到最外层元素，最外层元素通过<code>event.target</code>就知道了触发事件的真实dom是谁，然后去收集的jsx绑定事件的地方查看对应的jsx标签有没有绑定相关事件，如果有就调用。 ----为了的高效</li></ol><p>通过<code>event.target</code>得到发生事件的DOM元素对象----不要过度使用<code>ref</code></p><h2 id="收集表单数据" tabindex="-1"><a class="header-anchor" href="#收集表单数据" aria-hidden="true">#</a> 收集表单数据</h2><p>react中收集表单数据的组件，即带有表单标签的组件可以分为受控组件和非受控组件。</p><h3 id="非受控组件" tabindex="-1"><a class="header-anchor" href="#非受控组件" aria-hidden="true">#</a> 非受控组件</h3><p>现用现取，即触发事件，需要数据的时候通过ref现取此时表单的value。<strong>（表单数据没有经过state状态管控）</strong></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 创建组件</span>
<span class="token keyword">class</span> <span class="token class-name">Login</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">handleSubmit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 阻止表单提交</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span>username<span class="token punctuation">,</span> password<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">您输入的用户名是 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>username<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">，您输入的密码是：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>password<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://www.baidu.com/<span class="token punctuation">&quot;</span></span> <span class="token attr-name">onSubmit</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        用户名：</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token parameter">c</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> c<span class="token punctuation">}</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
        密码：</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token parameter">c</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> c<span class="token punctuation">}</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">登录</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">  
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 渲染组件</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Login</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="受控组件" tabindex="-1"><a class="header-anchor" href="#受控组件" aria-hidden="true">#</a> 受控组件</h3><p>侦听表单数据的变化，将表单数据存储到状态 state 中，需要时从 state 中拿去表单数据。<strong>（表单数据经过state状态管控）</strong></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 创建组件</span>
<span class="token keyword">class</span> <span class="token class-name">Login</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token comment">// 初始化状态</span>
  state <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 保存用户名到状态中</span>
  <span class="token function-variable function">saveUsername</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">username</span><span class="token operator">:</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 保存密码到状态中</span>
  <span class="token function-variable function">savePassword</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">password</span><span class="token operator">:</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 表单提交的回调</span>
  <span class="token function-variable function">handleSubmit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span>username<span class="token punctuation">,</span> password<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">您输入的用户名是 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>username<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">，您输入的密码是：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>password<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://www.baidu.com/<span class="token punctuation">&quot;</span></span> <span class="token attr-name">onSubmit</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        用户名：</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>saveUsername<span class="token punctuation">}</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
        密码：</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>savePassword<span class="token punctuation">}</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">登录</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">  
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 渲染组件</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Login</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>推荐使用受控组件，因为这样可以少用ref，毕竟react官网建议我们尽量减少滥用ref。</strong></p><h2 id="高阶函数和函数柯里化" tabindex="-1"><a class="header-anchor" href="#高阶函数和函数柯里化" aria-hidden="true">#</a> 高阶函数和函数柯里化</h2><p><strong>高阶函数</strong>：如果一个函数符合下面2个规范中的任何一个，那该函数就是高阶函数。</p><ol><li>若A函数，接收的参数是一个函数，那么A就可以称之为高阶函数。</li><li>若A函数，调用的返回值依然是一个函数，那么A就可以称之为高阶函数。</li></ol><p>常见的高阶函数有：<code>Promise</code>、<code>setTimeout</code>、<code>arr.map()</code>等等</p><p><strong>函数的柯里化</strong>：通过函数调用继续返回函数的方式，实现多次接收参数最后统一处理的函数编码形式。</p><p>利用高阶函数和函数柯里化重写上述案例：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">//创建组件</span>
<span class="token keyword">class</span> <span class="token class-name">Login</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span>
  <span class="token comment">//初始化状态</span>
  state <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">username</span><span class="token operator">:</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token comment">//用户名</span>
    <span class="token literal-property property">password</span><span class="token operator">:</span><span class="token string">&#39;&#39;</span> <span class="token comment">//密码</span>
  <span class="token punctuation">}</span>

  <span class="token comment">//保存表单数据到状态中 （高阶函数+函数柯里化）</span>
  <span class="token function-variable function">saveFormData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">dataType</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">[</span>dataType<span class="token punctuation">]</span><span class="token operator">:</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">//表单提交的回调</span>
  <span class="token function-variable function">handleSubmit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//阻止表单提交</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span>username<span class="token punctuation">,</span>password<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">你输入的用户名是：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>username<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,你输入的密码是：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>password<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span><span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">onSubmit</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token punctuation">{</span><span class="token comment">/* 事件绑定的方法加上括号就会在初始化时立即执行，此方法返回一个函数，这个函数会在每次事件发生时由react调用并传入event参数 */</span><span class="token punctuation">}</span><span class="token plain-text">
        用户名：</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">saveFormData</span><span class="token punctuation">(</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span><span class="token plain-text">
        密码：</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">saveFormData</span><span class="token punctuation">(</span><span class="token string">&#39;password&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">登录</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//渲染组件</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Login</span></span><span class="token punctuation">/&gt;</span></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是不使用高阶函数和柯里化也是可以实现的</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">//保存表单数据到状态中</span>
<span class="token function-variable function">saveFormData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">dataType<span class="token punctuation">,</span>event</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">[</span>dataType<span class="token punctuation">]</span><span class="token operator">:</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span><span class="token punctuation">(</span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">onSubmit</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span><span class="token comment">/* 事件绑定了一个函数，没有直接调用，并且会在事件触发时有react调用，传入event参数，实现直接获取到event对象
      */</span><span class="token punctuation">}</span><span class="token plain-text">
	  用户名：</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span> <span class="token parameter">event</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">saveFormData</span><span class="token punctuation">(</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">,</span>event<span class="token punctuation">)</span> <span class="token punctuation">}</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span><span class="token plain-text">
	  密码：</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span> <span class="token parameter">event</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">saveFormData</span><span class="token punctuation">(</span><span class="token string">&#39;password&#39;</span><span class="token punctuation">,</span>event<span class="token punctuation">)</span> <span class="token punctuation">}</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span><span class="token plain-text">
	  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">登录</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
	</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="组件生命周期" tabindex="-1"><a class="header-anchor" href="#组件生命周期" aria-hidden="true">#</a> 组件生命周期</h2><p>生命周期就是指组件当前所处的某一个阶段，对应生命周期调用的函数也叫生命周期钩子。</p><h3 id="旧版生命周期" tabindex="-1"><a class="header-anchor" href="#旧版生命周期" aria-hidden="true">#</a> 旧版生命周期</h3><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/896e2a2a89f642129503d283b41876d3~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" style="width:600px;"><p><strong>初次挂载阶段</strong></p><p>由<code>ReactDOM.render()</code>触发---初次渲染</p><ol><li><code>constructor()</code> —— 类组件中的构造函数</li><li><code>componentWillMount()</code> —— 组件将要挂载 【即将废弃】</li><li><code>render()</code> —— 挂载组件</li><li><code>componentDidMount()</code> —— 组件挂载完成 比较常用： 一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息</li></ol><p><strong>数据更新阶段</strong></p><p>【第一种情况】父组件重新<code>render</code>触发</p><ol><li><code>componentWillReceiveProps()</code> —— 接收属性参数（非首次）【即将废弃】</li></ol><p>然后继续调用后面的钩子函数</p><p>【第二种情况】由组件内部<code>this.setSate()</code></p><ol><li><code>shouldComponentUpdate()</code> —— 组件是否应该被更新（默认返回<code>true</code>）</li></ol><p>然后继续调用后面的钩子函数</p><p>【第三种情况】强制更新 <code>forceUpdate()</code></p><ol><li><code>componentWillUpdate()</code> ——组件将要更新 【即将废弃】</li><li><code>render()</code> —— 组件更新</li><li><code>componentDidUpdate()</code> —— 组件完成更新</li></ol><p><strong>卸载阶段</strong></p><p>由<code>ReactDOM.unmountComponentAtNode()</code>触发</p><ol><li><code>componentWillUnmount()</code> —— 组件即将卸载</li></ol><h3 id="新版生命周期" tabindex="-1"><a class="header-anchor" href="#新版生命周期" aria-hidden="true">#</a> 新版生命周期</h3><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3bceabc916b74ff9b9a2f4552fd9b530~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" style="width:600px;"><p><strong>初始化阶段</strong></p><p>由<code>ReactDOM.render()</code>触发 —— 初次渲染</p><ol><li><code>constructor()</code> —— 类组件中的构造函数</li><li><code>static getDerivedStateFromProps(props, state)</code> 从props得到一个派生的状态【新增】</li><li><code>render()</code> —— 挂载组件</li><li><code>componentDidMount()</code> —— 组件挂载完成 <strong>比较常用</strong></li></ol><p><strong>更新阶段</strong></p><p>由组件内部<code>this.setSate()</code>或父组件重新<code>render</code>触发或强制更新<code>forceUpdate()</code></p><ol><li><code>getDerivedStateFromProps()</code> —— 从props得到一个派生的状态 【新增】</li><li><code>shouldComponentUpdate()</code> —— 组件是否应该被更新（默认返回<code>true</code>）</li><li><code>render()</code> —— 挂载组件</li><li><code>getSnapshotBeforeUpdate()</code> —— 在更新之前获取快照【新增】</li><li><code>componentDidUpdate(prevProps, prevState, snapshotValue)</code> —— 组件完成更新</li></ol><p><strong>卸载阶段</strong></p><p>由<code>ReactDOM.unmountComponentAtNode()</code>触发</p><ol><li><code>componentWillUnmount()</code> —— 组件即将卸载</li></ol>`,109),r={href:"https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/",target:"_blank",rel:"noopener noreferrer"},k=a(`<p>其中较为重要的几个钩子是：</p><ul><li><p><code>render</code>：初始化渲染或更新渲染调用</p></li><li><p><code>componentDidMount</code>：开启监听, 发送ajax请求</p></li><li><p><code>componentWillUnmount</code>：做一些收尾工作, 如: 清理定时器</p></li></ul><h2 id="dom的diffing算法" tabindex="-1"><a class="header-anchor" href="#dom的diffing算法" aria-hidden="true">#</a> DOM的diffing算法</h2><p><strong>关于key的经典面试题</strong></p><ol><li><p>react/vue中的key有什么作用？（key的内部原理是什么？）</p></li><li><p>为什么遍历列表时，key最好不要用index?</p></li></ol><p><strong>先回答第一个问题，react/vue中的key有什么作用？（key的内部原理是什么？）</strong></p><p>简单的说: key是虚拟DOM对象的标识, 在更新显示时key起着极其重要的作用。</p><p>详细的说: 当状态中的数据发生变化时，react会根据【新数据】生成【新的虚拟DOM】, 随后React进行【新虚拟DOM】与【旧虚拟DOM】的diff比较，比较规则如下：</p><ul><li><p>旧虚拟DOM中找到了与新虚拟DOM相同的key：</p><ul><li>若虚拟DOM中内容没变, 直接使用之前的真实DOM</li><li>若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM</li></ul></li><li><p>旧虚拟DOM中未找到与新虚拟DOM相同的key</p><ul><li>根据数据创建新的真实DOM，随后渲染到到页面</li></ul></li></ul><p><strong>第二个问题：为什么遍历列表时，key最好不要用index?</strong></p><p>若对数据进行：逆序添加、逆序删除等破坏顺序操作: 会产生没有必要的真实DOM更新 ==&gt; 界面效果没问题, 但效率低</p><p>如果结构中还包含输入类的DOM：会产生错误DOM更新 ==&gt; 界面有问题</p><p>注意！如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，使用index作为key是没有问题的</p><p><strong>最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号等唯一值。如果确定只是简单的展示数据，用index也是可以的</strong></p><h2 id="脚手架" tabindex="-1"><a class="header-anchor" href="#脚手架" aria-hidden="true">#</a> 脚手架</h2><p>使用 react 脚手架快速搭建项目</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 全局安装脚手架</span>
<span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> create-react-app

<span class="token comment"># 创建react项目</span>
npx create-react-app my-project
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动后的项目文件夹目录：</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>public <span class="token comment">---- 静态资源文件夹</span>
	favicon<span class="token punctuation">.</span>icon <span class="token comment">------ 网站页签图标</span>
	index<span class="token punctuation">.</span>html <span class="token comment">-------- 主页面</span>
	logo192<span class="token punctuation">.</span>png <span class="token comment">------- logo图</span>
	logo512<span class="token punctuation">.</span>png <span class="token comment">------- logo图</span>
	manifest<span class="token punctuation">.</span>json <span class="token comment">----- 应用加壳的配置文件</span>
	robots<span class="token punctuation">.</span>txt <span class="token comment">-------- 爬虫协议文件</span>
src <span class="token comment">---- 源码文件夹</span>
	App<span class="token punctuation">.</span>css <span class="token comment">-------- App组件的样式</span>
	App<span class="token punctuation">.</span>js <span class="token comment">--------- App组件</span>
	App<span class="token punctuation">.</span>test<span class="token punctuation">.</span>js <span class="token comment">---- 用于给App做测试</span>
	index<span class="token punctuation">.</span>css <span class="token comment">------ 样式</span>
	index<span class="token punctuation">.</span>js <span class="token comment">------- 入口文件</span>
	logo<span class="token punctuation">.</span>svg <span class="token comment">------- logo图</span>
	reportWebVitals<span class="token punctuation">.</span>js <span class="token comment">--- 页面性能分析文件(需要web-vitals库的支持)</span>
	setupTests<span class="token punctuation">.</span>js <span class="token comment">---- 组件单元测试的文件(需要jest-dom库的支持)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="样式的模块化" tabindex="-1"><a class="header-anchor" href="#样式的模块化" aria-hidden="true">#</a> 样式的模块化</h2><p>这一部分其实就是 webpack 里的功能，通过给样式文件添加 <code>.modlue.css</code> 后缀形成模块化，导入后以对象形式使用即可避免类名重复覆盖问题。</p><p>文件名保存为 <code>index.module.css</code></p><p>引入文件 <code>import hello from &#39;./index.module.css&#39;</code></p><p>使用样式 <code>&lt;h2 className={hello.title}&gt; Hello &lt;/h2&gt;</code></p><h2 id="原生父子通信" tabindex="-1"><a class="header-anchor" href="#原生父子通信" aria-hidden="true">#</a> 原生父子通信</h2><p>拆分组件、实现静态组件，注意：<code>className</code>、<code>style</code>的写法</p><p>动态初始化列表，如何确定将数据放在哪个组件的<code>state</code>中？</p><ol><li>某个组件使用：放在其 <strong>自身</strong> 的<code>state</code>中</li><li>某些组件使用：放在他们共同的 <strong>父组件</strong> <code>state</code>中（官方称此操作为：状态提升）</li></ol><p>关于父子之间通信：</p><ol><li>【父组件】给【子组件】传递数据：通过<code>props</code>传递</li><li>【子组件】给【父组件】传递数据：通过<code>props</code>传递，要求父提前给子传递一个<strong>函数</strong></li></ol><p>注意<code>defaultChecked</code> （只在第一次指定的时候有作用，之后就没作用了）和 <code>checked</code>的区别，类似的还有：<code>defaultValue</code> 和 <code>value</code></p><p>状态在哪里，操作状态的方法就在哪里</p><p><strong>修改组件的state属性需要使用setState进行更新，不可以直接修改，并且setState是对状态属性直接增加或替换，所以需要提前拿到状态属性并修改为合适的形式再调用方法替换。</strong></p><h2 id="代理跨域" tabindex="-1"><a class="header-anchor" href="#代理跨域" aria-hidden="true">#</a> 代理跨域</h2><p>由于<strong>同源政策</strong>的限制，所以我们需要<strong>配置代理服务器</strong>来跨域发送请求：</p><p><strong>方法1：</strong></p><p>在package.json中追加如下proxy配置</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;proxy&quot;</span><span class="token operator">:</span><span class="token string">&quot;http://localhost:5000&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,38),d=n("li",null,[n("p",null,"优点：配置简单，前端请求资源时可以不加任何前缀。")],-1),m=n("li",null,[n("p",null,"缺点：不能配置多个代理。")],-1),v=n("strong",null,"在本地开启了一个和本地同源的代理服务器",-1),g={href:"http://localhost:3000",target:"_blank",rel:"noopener noreferrer"},b=a(`<p><strong>方法2：(旧版写法，新版不同，待更新。。。)</strong></p><p>在src下创建配置文件：<code>src/setupProxy.js</code></p><p><em>注意此方法同样是在本地开启代理服务器。请求地址依然需要发送给本地</em></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http-proxy-middleware&#39;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>
    <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token string">&#39;/api1&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token comment">//api1是需要转发的请求(所有带有/api1前缀的请求都会转发给5000)</span>
      <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&#39;http://localhost:5000&#39;</span><span class="token punctuation">,</span> <span class="token comment">//配置转发目标地址(能返回数据的服务器地址)</span>
      <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//控制服务器接收到的请求头中host字段的值</span>
      <span class="token comment">/*
      	changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000
      	changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:3000
      	changeOrigin默认值为false，但我们一般将changeOrigin值设为true
      */</span>
      <span class="token literal-property property">pathRewrite</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string-property property">&#39;^/api1&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">}</span> <span class="token comment">//去除请求前缀，保证交给后台服务器的是正常请求地址(必须配置)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token string">&#39;/api2&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> 
      <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&#39;http://localhost:5001&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token literal-property property">pathRewrite</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string-property property">&#39;^/api2&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="pubsub-消息订阅与发布" tabindex="-1"><a class="header-anchor" href="#pubsub-消息订阅与发布" aria-hidden="true">#</a> PubSub 消息订阅与发布</h2><p>PubSub是帮助实现兄弟组件通信的一个库，只需要<strong>接收数据的组件订阅（subscribe）消息</strong>，提供数据的组件发布消息，即可快捷实现数据传递。</p><p>下载安装：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> pubsub-js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>具体使用：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> PubSub <span class="token keyword">from</span> <span class="token string">&#39;pubsub-js&#39;</span>

<span class="token comment">// A组件接收数据</span>
<span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 接收数据，订阅消息</span>
  PubSub<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">&#39;myFun&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">msg<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// msg是消息标识，即此处&#39;myFun&#39;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// B组件发布消息</span>
<span class="token function-variable function">search</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  PubSub<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token string">&#39;myFun&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;我是数据&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>建议在组件即将卸载的钩子componentWillUnmount中取消订阅</strong></p><ol><li>取消指定订阅：<code>PubSub.unsubscrib(名称)</code></li><li>取消所有订阅：<code>PubSub.clearAllSubscriptions()</code></li></ol><h2 id="扩展" tabindex="-1"><a class="header-anchor" href="#扩展" aria-hidden="true">#</a> 扩展</h2><h3 id="类式组件中setstate更新状态的异步性" tabindex="-1"><a class="header-anchor" href="#类式组件中setstate更新状态的异步性" aria-hidden="true">#</a> 类式组件中setState更新状态的异步性</h3><ol><li><code>setState(stateChange,[callback])</code> -----对象式的setState</li></ol><p>stateChange为状态改变对象（该对象可以体现出状态的更改）</p><p>callback是可选的回调函数，它在状态更新完毕、界面也更新后(render调用后)才被调用</p><p>2.<code> setState(updater,[callback])</code> ---函数式的setState</p><p>updater为返回stateChange对象的函数，并且 可以接收到state和orops。</p><p>ca11back是可选的回调函数，它在状态更新、界面也更新后(renderi调用后)才被调用。</p><p><strong>总结：</strong></p><p>1.对象式的setState是函数式的setState的简写方式（语法糖）</p><p>2.使用原侧：</p><p>(1).如果新状态不依赖于原状态===&gt;使用对象方式</p><p>(2).如果新状态依赖于原状态==&gt;使用函数方式</p><p>(3).如果需要在setState()执行后获取最新的状态数据，要在第二个 ca11back函数 中读取</p><h3 id="组件优化" tabindex="-1"><a class="header-anchor" href="#组件优化" aria-hidden="true">#</a> 组件优化</h3><p><strong>Component的2个问题</strong></p><ol><li><p>只要执行setState(),即使不改变状态数据，组件也会重新render()</p></li><li><p>只当前组件重新render(),就会自动重新render-子组件==&gt;效率低</p></li></ol><p><strong>效率高的做法</strong></p><p>只有当组件的state或props数据发生改变时才重新render()</p><p><strong>问题原因</strong></p><p>Component中的 shouldComponentUpdate() 总是返回 true</p><p><strong>解决办法</strong></p><p>办法1：重写shouldComponentUpdate()方法。比较新旧state或props数据，如果有变化才返回true,如果没有返回fa1se</p><p>办法2：使用 <code>class xxx extends PureComponent</code>。PureComponent重写了shouldComponentUpdate(),只有state或props数据有变化才返回true</p><p>注意：只是进行state和orops数据的浅比较，如果只是数据对象内数据变了，返回false。 不要直接修改state数据，而是要产生新数据</p><p>项目中一般使用 PureComponent 来优化</p><h3 id="render-props" tabindex="-1"><a class="header-anchor" href="#render-props" aria-hidden="true">#</a> render props</h3><p><strong>如何向组件内部动态传入带内容的结构（标签）？</strong></p><p>vue中：使用s1ot技术，也就是通过组件标签体传入html结构</p><p>React中：使用children props:通过组件标签体传入结构；或者使用render props:通过组件标签属性传入结构，一般用render()函数属性</p><p><strong>children props</strong></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 根组件</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">A</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
	</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">B</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">xxxx</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">B</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">A</span></span><span class="token punctuation">&gt;</span></span>

<span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span>   <span class="token comment">// 子组件A中获取到结构在相应位置展示，但如果B组件需要A组件内的数据，=&gt;做不到</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>render props</strong></p><p><code>&lt;A render={(data)=&gt;&lt;B data={data}&gt;&lt;/B&gt;} &gt;&lt;/A&gt;</code></p><p>A组件：<code>{this.props.render(内部state数据)}</code><br> B组件：读取A组件传入的数据显示<code>{this.props.data}</code></p><h3 id="错误边界" tabindex="-1"><a class="header-anchor" href="#错误边界" aria-hidden="true">#</a> 错误边界</h3><p>理解：错误边界(Error boundary):用来捕获后代组件错误，渲染出备用页面</p><p>特点：只能捕获后代组件生命周期产生的错误，不能捕获自己组件产生的错误和其他组件在合成事件、定时器中产生的错误</p><p>使用方式：<code>getDerivedStateFromError()</code> 配合 <code>componentDidCatch()</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//生命周期函数，一旦后台组件报错，就会触发</span>
<span class="token keyword">static</span> <span class="token function">getDerivedstateFromError</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//在render之前触发，返回新的state</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">hasError</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">componentDidcatch</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span>info</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token comment">//统计页面的错误。发送请求发送到后台去</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,52);function h(y,f){const t=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("具体详情可以查看 "),n("a",r,[s("react生命周期"),p(t)])]),k,n("ol",null,[d,m,n("li",null,[n("p",null,[s("工作方式："),v,s("。上述方式配置代理，需要将我们写的请求地址改为本地服务器的地址，即如果我们本地服务器在"),n("a",g,[s("http://localhost:3000"),p(t)]),s("，那么我们的请求就往3000这个地址发。当请求了3000不存在的资源时，那么该请求会转发给5000 （优先匹配前端资源）")])])]),b])}const j=e(i,[["render",h],["__file","react基础.html.vue"]]);export{j as default};
