import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as c,c as i,a as n,b as s,d as t,t as u,e as a}from"./app-57c7840a.js";const d={},r=n("strong",null,"vue2官网",-1),k={href:"https://v2.cn.vuejs.org/",target:"_blank",rel:"noopener noreferrer"},v=n("strong",null,"菜鸟教程",-1),m={href:"https://www.runoob.com/vue2/vue-tutorial.html",target:"_blank",rel:"noopener noreferrer"},g=a('<h2 id="vue框架简介" tabindex="-1"><a class="header-anchor" href="#vue框架简介" aria-hidden="true">#</a> vue框架简介</h2><ol><li>遵循 MVVM 模式</li><li>编码简洁，体积小，运行效率高，适合 移动/PC 端开发</li><li>它本身只关注 UI，可以轻松引入 vue 插件或其它第三方库开发项目</li><li>采用<strong>组件化</strong>模式，提高代码复用率、且让代码更好维护</li><li><strong>声明式</strong>编码，让编码人员无需直接操作DOM，提高开发效率</li><li>使用<strong>虚拟DOM</strong>和<strong>Diff算法</strong>，尽量复用DOM节点</li></ol><h2 id="基础使用" tabindex="-1"><a class="header-anchor" href="#基础使用" aria-hidden="true">#</a> 基础使用</h2>',3),b=n("li",null,"想让Vue工作，就必须创建一个Vue实例，且要传入一个配置对象；",-1),h=n("li",null,"root容器里的代码依然符合html规范，只不过混入了一些特殊的Vue语法；",-1),x=n("li",null,"root容器里的代码被称为【Vue模板】；",-1),f=n("li",null,"Vue实例和容器是一一对应的；",-1),y=n("li",null,"真实开发中只有一个Vue实例，并且会配合着组件一起使用；",-1),q=n("li",null,"一旦data中的数据发生改变，那么页面中用到该数据的地方也会自动更新；",-1),V=a(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//创建Vue实例</span>
<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">&#39;#root&#39;</span><span class="token punctuation">,</span> <span class="token comment">//el用于指定当前Vue实例为哪个容器服务，值通常为css选择器字符串。</span>
	<span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span> <span class="token comment">//data中用于存储数据，数据供el所指定的容器去使用，值我们暂时先写成一个对象。</span>
		<span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;andy&#39;</span><span class="token punctuation">,</span>
		<span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>el有两种写法：</strong> new Vue实例时就指定，或者实例创建完通过 <code>$mount(&#39;#root&#39;)</code> 指定。</p><p><strong>data有两种写法：</strong> 对象式 和 函数式（组件必须）</p><h2 id="mvvm-模型" tabindex="-1"><a class="header-anchor" href="#mvvm-模型" aria-hidden="true">#</a> MVVM 模型</h2><p>MVVM 本质上是 MVC （Model-View- Controller）的改进版。即模型-视图-视图模型。</p><p><code>模型</code>model指的是后端传递的数据，<code>视图</code>view指的是所看到的页面。</p><p><code>视图模型</code>viewModel是 mvvm 模式的核心，它是连接 view 和 model 的桥梁。它有两个方向：</p><p>将<code>模型</code>转化成<code>视图</code>，即将后端传递的数据转化成所看到的页面。实现的方式是：<strong>数据绑定</strong></p><p>将<code>视图</code>转化成<code>模型</code>，即将所看到的页面转化成后端的数据。实现的方式是：<strong>DOM 事件监听</strong></p><p>这两个方向都实现的，我们称之为<strong>数据的双向绑定</strong></p><h2 id="模板语法" tabindex="-1"><a class="header-anchor" href="#模板语法" aria-hidden="true">#</a> 模板语法</h2><h3 id="插值语法" tabindex="-1"><a class="header-anchor" href="#插值语法" aria-hidden="true">#</a> 插值语法</h3><ul><li>功能：用于解析标签体内容，向页面输出数据</li><li>写法：<code>{{xxx}}</code>，xxx是js表达式，且可以直接读取到data中的所有属性，可以调用对象的方法</li><li>备注：里面写<strong>js表达式</strong>：有返回值的js代码，而不是<strong>js语句</strong></li></ul><h3 id="指令语法" tabindex="-1"><a class="header-anchor" href="#指令语法" aria-hidden="true">#</a> 指令语法</h3><ul><li>功能：用于解析标签（包括：标签属性、标签体内容、绑定事件.....）</li><li>举例：<code>v-bind:href=&quot;xxx&quot;</code> 或 简写为 <code>:href=&quot;xxx&quot;</code>，xxx同样要写js表达式，且可以直接读取到data中的所有属性</li><li>备注：Vue中有很多的指令，且形式都是：<code>v-xxx</code></li></ul><p><strong>常用指令语法如下：</strong></p><p><code>v-bind</code>: 单项数据绑定，数据只能从 data 流向页面。可以简写为 <code>:</code></p><p><code>v-model</code>: 双项数据绑定，适用于表单标签。数据不仅能从 data 流向页面，还能从页面流向 data</p><p><code>v-on</code>: 绑定指定事件名的回调函数，可以简写为 <code>@click=&#39;xxx&#39;</code></p><p><code>v-text</code>: 向其所在的节点中渲染文本内容, 注意<code>v-text</code>会替换掉节点中的内容，<code>{{xx}}</code>则不会。</p><p><code>v-html</code>: 向指定节点中渲染包含html结构的内容。会替换掉节点中所有的内容，<code>{{xx}}</code>则不会。</p><p><code>v-if v-else-if v-else</code>: 判断节点是否被渲染，需要连续使用</p><p><code>v-show</code>: 判断节点的显示与隐藏</p><p><code>v-for</code> : 遍历数组/对象</p>`,24),w=n("p",{"display:":"",none:""},[n("code",null,"v-cloak"),s(" : 使用它防止闪现表达式, 与css配合: [v-cloak]")],-1),_=a(`<h2 id="计算属性与侦听属性" tabindex="-1"><a class="header-anchor" href="#计算属性与侦听属性" aria-hidden="true">#</a> 计算属性与侦听属性</h2><p><strong>计算属性 computed</strong></p><blockquote><p>在<code>computed</code>属性对象中定义计算属性的方法，在页面中使用<code>{{方法名}}</code>来显示计算的结果</p></blockquote><ol><li>定义：要用的属性不存在，要通过已有属性<strong>计算</strong>得来。</li><li>原理：底层借助了<code>Objcet.defineproperty</code>方法提供的<code>getter</code>和<code>setter</code>。</li><li>get函数什么时候执行？ <ol><li>初次读取时会执行一次。</li><li>当依赖的数据发生改变时会被再次调用。</li></ol></li><li>优势：与methods实现相比，内部有<strong>缓存</strong>机制（复用），效率更高，调试方便。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//完整写法</span>
<span class="token literal-property property">fullName</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;get被调用了&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">&#39;-&#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;set&#39;</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span>
        <span class="token keyword">const</span> arr <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//简写</span>
<span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;get被调用了&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">&#39;-&#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>监视属性 watch</strong></p><blockquote><p>通过vm对象的<code>$watch()</code>或<code>watch配置</code>来监视指定的属性，当属性变化时, 回调函数<strong>自动调用</strong>, 在函数内部进行计算</p></blockquote><ol><li>当被监视的属性变化时, 回调函数自动调用, 进行相关操作</li><li>监视的属性必须存在，才能进行监视！！</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">watch</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token comment">// 完整写法</span>
    <span class="token literal-property property">isHot</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token literal-property property">immediate</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//初始化时让handler调用一下</span>
        deep： <span class="token boolean">true</span>， <span class="token comment">// 开启深度监视</span>
        <span class="token comment">//handler什么时候调用？当isHot发生改变时。</span>
        <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span>oldValue</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;isHot被修改了&#39;</span><span class="token punctuation">,</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>，
    <span class="token comment">//简写</span>
    <span class="token function">isHot</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span>oldValue</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;isHot被修改了&#39;</span><span class="token punctuation">,</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>二者区别</strong></p><ol><li>计算属性变量在computed中定义，监视属性监听的是已经在 data 中定义的变量, 当该变量变化时，会触发 watch 中的方法.</li><li>computed 具有缓存功能，可以监听对象某个具体属性。</li><li>watch可以进行深度监听，监听对象的变化。</li><li>计算属性是声明式的描述一个值依赖了其他值，依赖的值改变后重新计算结果更新DOM。监视属性的是定义的变量，当定义的值发生变化时，执行相对应的函数。</li><li>computed能完成的功能，watch都可以完成。watch能完成的功能，computed不一定能完成，例如：watch可以进行异步操作。</li></ol><p><strong>补充：</strong></p><ol><li>所被Vue管理的函数，最好写成普通函数，这样this的指向才是vm 或 组件实例对象。</li><li>所有不被Vue所管理的函数（定时器的回调函数、ajax的回调函数等、Promise的回调函数），最好写成箭头函数，这样this的指向才是vm 或 组件实例对象。</li></ol><h2 id="样式绑定" tabindex="-1"><a class="header-anchor" href="#样式绑定" aria-hidden="true">#</a> 样式绑定</h2><h3 id="class类名绑定" tabindex="-1"><a class="header-anchor" href="#class类名绑定" aria-hidden="true">#</a> class类名绑定</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&#39;xxx&#39;</span> <span class="token comment">// xxx可以是字符串、对象、数组。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li><p>当是字符串时：适用于<strong>类名不确定，要动态指定</strong></p></li><li><p>当是数组时：适用于<strong>要绑定多个样式，个数不确定，名字也不确定</strong></p></li><li><p>当是对象时： 适用于<strong>要绑定多个样式，个数确定，名字也确定，但不确定用不用</strong>，对象里类名对应为布尔值</p></li></ol><h3 id="style样式绑定" tabindex="-1"><a class="header-anchor" href="#style样式绑定" aria-hidden="true">#</a> style样式绑定</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">:</span>style<span class="token operator">=</span><span class="token string">&quot;{ color: activeColor, fontSize: fontSize + &#39;px&#39; }&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="列表渲染" tabindex="-1"><a class="header-anchor" href="#列表渲染" aria-hidden="true">#</a> 列表渲染</h2><p><code>v-for</code> 指令</p><ol><li>用于展示列表数据</li><li>语法：<code>v-for=&quot;(item, index) in xxx&quot; :key=&quot;yyy&quot;</code></li><li>可遍历：数组、对象、字符串（用的很少）、指定次数（用的很少）</li></ol><ul><li>数组: <code>(item, index)</code></li><li>对象: <code>(value, key)</code></li><li>字符串：<code>(char, index)</code></li><li>数字：<code>(number, index)</code></li></ul><p><strong>需要指定key的原因</strong></p><ol><li>虚拟DOM中<code>key</code>的作用：</li></ol><blockquote><p>key是虚拟DOM对象的标识，当数据发生变化时，Vue会根据【新数据】生成【新的虚拟DOM】, 随后Vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较，比较规则如下：</p></blockquote><ol><li>对比规则： <ol><li>旧虚拟DOM中找到了与新虚拟DOM相同的<code>key</code>： <ul><li>若虚拟DOM中内容没变, 直接使用之前的真实DOM</li><li>若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM</li></ul></li><li>旧虚拟DOM中未找到与新虚拟DOM相同的<code>key</code>创建新的真实DOM，随后渲染到到页面。</li></ol></li><li>用<code>index</code>作为<code>key</code>可能会引发的问题： <ol><li>若对数据进行：逆序添加、逆序删除等破坏顺序操作: 会产生没有必要的真实DOM更新 <code>==&gt;</code> 界面效果没问题, 但效率低</li><li>如果结构中还包含输入类的DOM： 会产生错误DOM更新 <code>==&gt; </code>界面有问题</li></ol></li><li>开发中如何选择<code>key</code>: <ol><li>最好使用每条数据的唯一标识作为<code>key</code>, 比如id、手机号、身份证号、学号等唯一值。</li><li>如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，使用<code>index</code>作为<code>key</code>是没有问题的。</li></ol></li></ol><h2 id="监视数据原理" tabindex="-1"><a class="header-anchor" href="#监视数据原理" aria-hidden="true">#</a> 监视数据原理</h2><ol><li>vue会监视<code>data</code>中所有层次的数据。</li><li>如何监测对象中的数据？</li></ol><blockquote><p>通过setter实现监视，且要在new Vue时就传入要监测的数据。</p></blockquote><p>① 对象中后追加的属性，Vue默认不做响应式处理</p><p>② 如需给后添加的属性做响应式，请使用如下API：<code>Vue.set(target，propertyName/index，value)</code> 或 <code>vm.$set(target，propertyName/index，value)</code></p><ol><li>如何监测数组中的数据？ 通过包裹数组更新元素的方法实现，本质就是做了两件事： <ol><li>调用原生对应的方法对数组进行更新。</li><li>重新解析模板，进而更新页面。</li></ol></li><li>在Vue修改数组中的某个元素一定要用如下方法： <ol><li>使用这些API: <code>push()</code>、<code>pop()</code>、<code>shift()</code>、<code>unshift()</code>、<code>splice()</code>、<code>sort()</code>、<code>reverse()</code></li><li><code>Vue.set()</code> 或 <code>vm.$set()</code></li></ol></li></ol><p>特别注意：<code>Vue.set()</code> 和 <code>vm.$set()</code> 不能给 <code>vm</code> 或 <code>vm</code> 的根数据对象 添加属性！！！</p><h2 id="事件处理" tabindex="-1"><a class="header-anchor" href="#事件处理" aria-hidden="true">#</a> 事件处理</h2><p><strong>事件的基本使用：</strong></p><ol><li>使用 <code>v-on:xxx</code> 或 <code>@xxx</code> 绑定事件，其中<code>xxx</code>是事件名；</li><li>事件的回调需要配置在<code>methods</code>对象中，最终会在<code>vm</code>上；</li><li><code>methods</code>中配置的函数，不要用箭头函数！否则<code>this</code>就不是<code>vm</code>了；</li><li><code>methods</code>中配置的函数，都是被<code>Vue</code>所管理的函数，<code>this</code>的指向是<code>vm</code> 或 组件实例对象；</li><li><code>@click=&quot;demo&quot; </code>和 <code>@click=&quot;demo($event)&quot; </code>效果一致，但后者可以<strong>传参</strong>；<code>$event</code> 就是当前触发事件的元素，当有其他参数时即使不传 <code>$event</code>，在回调函数中也可以使用 <code>event</code> 这个参数。</li></ol><p><strong>事件修饰符</strong></p><ol><li><code>prevent</code>：阻止默认事件（常用）；<code>event.preventDefault()</code></li><li><code>stop</code>：阻止事件冒泡（常用）；<code>event.stopPropagation()</code></li><li><code>once</code>：事件只触发一次（常用）；</li><li><code>capture</code>：使用事件的捕获模式；</li><li><code>self</code>：只有<code>event.target</code>是当前操作的元素时才触发事件；</li><li><code>passive</code>：事件的默认行为立即执行，无需等待事件回调执行完毕；</li></ol><p><strong>按键修饰符</strong></p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code> 回车 =&gt; enter
 删除 =&gt; delete (捕获“删除”和“退格”键)
 退出 =&gt; esc
 空格 =&gt; space
 换行 =&gt; tab (特殊，必须配合keydown去使用)
 上 =&gt; up
 下 =&gt; down
 左 =&gt; left
 右 =&gt; right
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><code>Vue</code>未提供别名的按键，可以使用按键原始的<code>key</code>值去绑定，但注意要转为<code>kebab-case</code>（短横线命名）</li><li>系统修饰键（用法特殊）：<code>ctrl</code>、<code>alt</code>、<code>shift</code>、<code>meta</code></li></ol><ul><li>(1). 配合<code>keyup</code>使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发。</li><li>(2). 配合<code>keydown</code>使用：正常触发事件。</li></ul><ol><li>也可以使用<code>keyCode</code>去指定具体的按键（不推荐）</li></ol><h2 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期" aria-hidden="true">#</a> 生命周期</h2><img src="https://v2.cn.vuejs.org/images/lifecycle.png"><ol><li>初始化显示</li></ol><ul><li><code>beforeCreate()</code> 创建实例之前，此时仅完成相关初始化操作</li><li><code>created()</code> 实例创建完毕，可以访问到 data数据和 methods方法</li><li><code>beforeMount()</code> 挂载之前，页面展现的是未经vue编译的DOM结构</li><li><code>mounted()</code> 挂载完毕， 页面展现出编译后的DOM结构，在此可以完成发请求，定时器等操作</li></ul><ol><li>更新状态</li></ol><ul><li><code>beforeUpdate()</code> 数据更新前，数据是新的，但DOM是旧的，需要经过Diff算法对比</li><li><code>updated()</code> 更新完成</li></ul><ol><li>销毁 vue 实例: <code>vm.$destory()</code></li></ol><ul><li><code>beforeDestory()</code> 卸载前，数据方法都还可以访问到，在此可以完成清除定时器等操作</li><li><code>destoryed() </code> 卸载完成</li></ul><p><strong>父子组件生命周期流程</strong></p><ol><li>加载渲染过程</li></ol><p><em>父beforeCreate -&gt; 父created -&gt; 父beforeMount -&gt; 子beforeCreate-&gt;子created-&gt;子beforeMount-&gt;子mounted-&gt;父mounted</em></p><ol start="2"><li>更新过程</li></ol><p><em>父beforeUpdate-&gt;子beforeUpdate-&gt;子updated-&gt;父updated</em></p><ol start="3"><li>销毁过程</li></ol><p><em>父beforeDestroy-&gt;子beforeDestroy-&gt;子destroyed-&gt;父destroyed</em></p><h2 id="过渡动画" tabindex="-1"><a class="header-anchor" href="#过渡动画" aria-hidden="true">#</a> 过渡动画</h2><p>作用：在插入、更新或移除 DOM元素时，在合适的时候给元素添加样式类名。</p><p>写法：</p><ol><li>准备好样式： <ul><li>元素进入的样式： <ol><li>v-enter：进入的起点</li><li>v-enter-active：进入过程中</li><li>v-enter-to：进入的终点</li></ol></li><li>元素离开的样式： <ol><li>v-leave：离开的起点</li><li>v-leave-active：离开过程中</li><li>v-leave-to：离开的终点</li></ol></li></ul></li><li>使用<code>&lt;transition&gt;</code>包裹要过度的元素，并配置name属性：</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;transition name=&quot;hello&quot;&gt;
    &lt;h1 v-show=&quot;isShow&quot;&gt;你好啊！&lt;/h1&gt;
&lt;/transition&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>备注：若有多个元素需要过渡，则需要使用：<code>&lt;transition-group&gt;</code>，且每个元素都要指定<code>key</code>值。</li></ol><h2 id="自定义指令" tabindex="-1"><a class="header-anchor" href="#自定义指令" aria-hidden="true">#</a> 自定义指令</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 全局指令</span>
Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span>指令名<span class="token punctuation">,</span>配置对象<span class="token punctuation">)</span> 

<span class="token comment">// 局部指令</span>
<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">directives</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">指令名</span><span class="token operator">:</span>配置对象<span class="token punctuation">}</span>	
<span class="token punctuation">}</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>指令配置对象的三个回调</p><ul><li><code>bind</code>：指令与元素成功绑定时调用。</li><li><code>inserted</code>：指令所在元素被插入页面时调用。</li><li><code>update</code>：指令所在模板结构被重新解析时调用。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 局部指令</span>
<span class="token literal-property property">directives</span> <span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&#39;my-directive&#39;</span> <span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token function">bind</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// el是绑定的元素，binging是传递的值</span>
            el<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> binding<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">toupperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>指令定义时不加<code>v-</code>，但使用时要加<code>v-</code>；</li><li>指令名如果是多个单词，要使用<code>kebab-case</code>命名方式，不要用<code>camelCase</code>命名。</li></ol><h2 id="组件" tabindex="-1"><a class="header-anchor" href="#组件" aria-hidden="true">#</a> 组件</h2><p>vue组件分为<strong>非单文件组件（基本不用）<strong>和</strong>单文件组件</strong>两种，重点介绍单文件组件。</p><p>单文件组件包括 <strong>template模板，script脚本，style样式 三大标签</strong></p><h2 id="脚手架" tabindex="-1"><a class="header-anchor" href="#脚手架" aria-hidden="true">#</a> 脚手架</h2>`,76),j={href:"https://cli.vuejs.org/zh/",target:"_blank",rel:"noopener noreferrer"},M=a(`<p>全局安装：<code>npm install -g vue-cli</code></p><p>脚手架项目文件结构：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>├── node_modules 
├── public
│   ├── favicon.ico: 页签图标
│   └── index.html: 主页面
├── src
│   ├── assets: 存放静态资源
│   │   └── logo.png
│   │── component: 存放组件
│   │   └── HelloWorld.vue
│   │── App.vue: 汇总所有组件
│   │── main.js: 入口文件
├── .gitignore: git版本管制忽略的配置
├── babel.config.js: babel的配置文件
├── package.json: 应用包配置文件 
├── README.md: 应用描述文件
├── package-lock.json：包版本控制文件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="组件相关" tabindex="-1"><a class="header-anchor" href="#组件相关" aria-hidden="true">#</a> 组件相关</h2><h3 id="ref属性" tabindex="-1"><a class="header-anchor" href="#ref属性" aria-hidden="true">#</a> ref属性</h3><ol><li>被用来给元素或子组件注册引用信息（id的替代者）</li><li>应用在html标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象（vc）</li><li>使用方式： <ol><li>打标识：<code>&lt;h1 ref=&quot;xxx&quot;&gt;.....&lt;/h1&gt;</code>或 <code>&lt;School ref=&quot;xxx&quot;&gt;&lt;/School&gt;</code></li><li>获取：<code>this.$refs.xxx</code></li></ol></li></ol><h3 id="props" tabindex="-1"><a class="header-anchor" href="#props" aria-hidden="true">#</a> props</h3><ol><li>功能：让组件接收外部传过来的数据</li><li>传递数据：<code>&lt;Demo name=&quot;xxx&quot;/&gt;</code></li><li>接收数据： <ol><li>第一种方式（只接收）：<code>props:[&#39;name&#39;] </code></li><li>第二种方式（限制类型）：<code>props:{name:String}</code></li><li>第三种方式（限制类型、限制必要性、指定默认值）：</li></ol></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token comment">//类型</span>
        <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//必要性</span>
        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">&#39;老王&#39;</span> <span class="token comment">//默认值</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>备注：props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据。</p></blockquote><h3 id="mixin" tabindex="-1"><a class="header-anchor" href="#mixin" aria-hidden="true">#</a> mixin</h3><ol><li><p>功能：可以把多个组件共用的数据方法提取成一个混入对象，<em>重名优先以组件内的为准</em></p></li><li><p>使用方式：</p><p>第一步定义混合：</p></li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{
    data(){....},
    methods:{....}
    ....
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二步使用混入：</p><ul><li>全局混入：<code>Vue.mixin(xxx)</code></li><li>局部混入：<code>mixins:[&#39;xxx&#39;] </code></li></ul><h3 id="插件" tabindex="-1"><a class="header-anchor" href="#插件" aria-hidden="true">#</a> 插件</h3><ol><li>功能：用于增强Vue</li><li>本质：包含install方法的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据。</li><li>定义插件：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>对象<span class="token punctuation">.</span><span class="token function-variable function">install</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">Vue<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1. 添加全局过滤器</span>
    Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">)</span>

    <span class="token comment">// 2. 添加全局指令</span>
    Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">)</span>

    <span class="token comment">// 3. 配置全局混入(合)</span>
    Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">)</span>

    <span class="token comment">// 4. 添加实例方法</span>
    <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">$myMethod</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
    <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$myProperty <span class="token operator">=</span> xxxx
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>使用插件：<code>Vue.use(xxx)</code></li></ol><h3 id="插槽" tabindex="-1"><a class="header-anchor" href="#插槽" aria-hidden="true">#</a> 插槽</h3><ol><li><p>作用：让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于 <strong>父组件 ===&gt; 子组件</strong></p></li><li><p>分类：默认插槽、具名插槽、作用域插槽</p></li></ol><p><strong>默认插槽</strong></p><p>父组件中：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Category</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>html结构1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Category</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>子组件中：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
       <span class="token comment">&lt;!-- 定义插槽 --&gt;</span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">&gt;</span></span>插槽默认内容...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
&lt;/template
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>具名插槽</strong></p><p>父组件中：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Category</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>center<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>html结构1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>footer</span><span class="token punctuation">&gt;</span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>html结构2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Category</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>子组件中：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
       <span class="token comment">&lt;!-- 定义插槽 --&gt;</span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>center<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>插槽默认内容...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>footer<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>插槽默认内容...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>作用域插槽</strong></p><p>理解：数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。（games数据在Category组件中，但使用数据所遍历出来的结构由App组件决定）</p><p>父组件中：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Category</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scopeData<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 生成的是ul列表 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>g in scopeData.games<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>g<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{g}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Category</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Category</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scopeData<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 生成的是h4标题 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>g in scopeData.games<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>g<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{g}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Category</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>子组件中：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">:games</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>games<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;Category&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token comment">//数据在子组件自身</span>
        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">{</span>
                <span class="token literal-property property">games</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&#39;红色警戒&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;穿越火线&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;劲舞团&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;超级玛丽&#39;</span><span class="token punctuation">]</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="组件通信" tabindex="-1"><a class="header-anchor" href="#组件通信" aria-hidden="true">#</a> 组件通信</h2><ol><li><p><strong>props</strong></p><p>父传子，子传父（父传子函数，子调用传参）</p></li><li><p><strong>自定义事件</strong></p><p>子传父（父给子绑定自定义事件，子组件<code>emit</code>触发传参）</p></li><li><p><strong>全局事件总线</strong></p><p>重要关系：<code>VueComponent.prototype.__proto__ === Vue.prototype</code></p><p><strong>也就是说我们找组件上的相关属性和方法如果找不到会向上继续找，并且能找到vue原型对象那去，那么我们在vue原型对象上挂载一些属性方法就可以让每个组件都能访问到。</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">h</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$bus <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token comment">//安装全局事件总线</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token comment">//注册路由,vuex仓库</span>
	router<span class="token punctuation">,</span>
	store
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>


<span class="token comment">// A 组件向全局事件总线绑定事件   </span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">&#39;myEvent&#39;</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>func<span class="token punctuation">)</span>
<span class="token comment">// B 组件触发事件，传递参数</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;myEvent&#39;</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span>
<span class="token comment">// A 组件注意解绑</span>
<span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$off</span><span class="token punctuation">(</span><span class="token string">&#39;myEvent&#39;</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>func<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>slot</p></li><li><p>vuex</p></li><li><p>pubsub-js 消息订阅与发布</p></li></ol>`,39);function D(p,O){const e=l("ExternalLinkIcon");return c(),i("div",null,[n("p",null,[r,s(),n("a",k,[s("https://v2.cn.vuejs.org/"),t(e)])]),n("p",null,[v,s(),n("a",m,[s("https://www.runoob.com/vue2/vue-tutorial.html"),t(e)])]),g,n("ol",null,[b,h,x,f,y,n("li",null,u(p.xxx)+"中的xxx要写js表达式，且xxx可以自动读取到data中的所有属性；",1),q]),V,w,_,n("p",null,[s("vue-cli是Vue官方提供的脚手架工具 "),n("a",j,[s("中文网址"),t(e)])]),M])}const N=o(d,[["render",D],["__file","vue2.html.vue"]]);export{N as default};
