import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as p,c as i,a as t,b as n,e,d as a}from"./app-04f25f71.js";const d={},c=t("h2",{id:"初识uni-app",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#初识uni-app","aria-hidden":"true"},"#"),n(" 初识uni-app")],-1),r=t("code",null,"uni-app",-1),u={href:"https://vuejs.org/",target:"_blank",rel:"noopener noreferrer"},g=t("blockquote",null,[t("p",null,"翻译翻译就是：写一套代码就可以在多端运行")],-1),k={href:"https://dcloud.io/hbuilderx.html",target:"_blank",rel:"noopener noreferrer"},h={href:"https://uniapp.dcloud.net.cn/tutorial/",target:"_blank",rel:"noopener noreferrer"},v=a(`<h2 id="初见hbuilderx" tabindex="-1"><a class="header-anchor" href="#初见hbuilderx" aria-hidden="true">#</a> 初见HBuilderX</h2><p>第一次使用时需要配置打开的默认浏览器路径，下载相关语法插件，配置关联微信开发者工具（微信开发者工具需要开启服务端口，在微信工具的设置-&gt;安全中）等</p><p>官方提供的项目文件夹放置规范如下：</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>┌─uniCloud              云空间目录，阿里云为uniCloud-aliyun,腾讯云为uniCloud-tcb（详见uniCloud）
│─components            符合vue组件规范的uni-app组件目录
│  └─comp-a.vue         可复用的a组件
├─utssdk                存放uts文件
├─pages                 业务页面文件存放的目录
│  ├─index
│  │  └─index.vue       index页面
│  └─list
│     └─list.vue        list页面
├─static                存放应用引用的本地静态资源（如图片、视频等）的目录，注意：静态资源只能存放于此
├─uni_modules           存放[uni_module](/uni_modules)。
├─platforms             存放各平台专用页面的目录，详见
├─nativeplugins         App原生语言插件 详见
├─nativeResources       App端原生资源目录
│  └─android            Android原生资源目录 详见
├─hybrid                App端存放本地html文件的目录，详见
├─wxcomponents          存放小程序组件的目录，详见
├─unpackage             非工程代码，一般存放运行或发行的编译结果
├─AndroidManifest.xml   Android原生应用清单文件 详见
├─main.js               Vue初始化入口文件
├─App.vue               应用配置，用来配置App全局样式以及监听 应用生命周期
├─manifest.json         配置应用名称、appid、logo、版本等打包信息，详见
├─pages.json            配置页面路由、导航条、选项卡等页面类信息，详见
└─uni.scss              这里是uni-app内置的常用样式变量 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Tips</strong></p><ul><li><p>编译到任意平台时，<code>static</code> 目录下的文件均会被完整打包进去，且不会编译。非 <code>static</code> 目录下的文件（vue、js、css 等）只有被引用到才会被打包编译进去。</p></li><li><p><code>static</code> 目录下的 <code>js</code> 文件不会被编译，如果里面有 <code>es6</code> 的代码，不经过转换直接运行，在手机设备上会报错。</p></li><li><p><code>css</code>、<code>less/scss</code> 等资源不要放在 <code>static</code> 目录下，建议这些公用的资源放在自建的 <code>common</code> 目录下。</p></li><li><p>HbuilderX 1.9.0+ 支持在根目录创建 <code>ext.json</code>、<code>sitemap.json</code> 等小程序需要的文件。</p></li></ul><p>同时为了实现多端兼容，综合考虑编译速度、运行性能等因素，<code>uni-app</code> 约定了如下开发规范：</p>`,7),f=t("li",null,"页面文件遵循 Vue 单文件组件 (SFC) 规范",-1),m={href:"https://uniapp.dcloud.net.cn/component/",target:"_blank",rel:"noopener noreferrer"},y=t("code",null,"wx",-1),b=t("code",null,"uni",-1),x={href:"https://uniapp.dcloud.net.cn/api/",target:"_blank",rel:"noopener noreferrer"},_=t("li",null,[n("数据绑定及事件处理同 "),t("code",null,"Vue.js"),n(" 规范，同时补充了App及页面的生命周期")],-1),q=t("li",null,"为兼容多端运行，建议使用flex布局进行开发",-1),w=a(`<h2 id="全局文件之pages-json" tabindex="-1"><a class="header-anchor" href="#全局文件之pages-json" aria-hidden="true">#</a> 全局文件之pages.json</h2><p><code>pages.json</code> 文件用来对 uni-app 进行全局配置，决定页面文件的路径、窗口样式、原生的导航栏、底部的原生tabbar 等。下面介绍几个比较重要的：</p><h3 id="globalstyle" tabindex="-1"><a class="header-anchor" href="#globalstyle" aria-hidden="true">#</a> globalStyle</h3><p>globalStyle 用于设置应用的状态栏、导航条、标题、窗口背景色等。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// pages.json</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;globalStyle&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token property">&quot;navigationBarTextStyle&quot;</span><span class="token operator">:</span> <span class="token string">&quot;black&quot;</span><span class="token punctuation">,</span> <span class="token comment">//导航栏文字样式 black | white</span>
		<span class="token property">&quot;navigationBarTitleText&quot;</span><span class="token operator">:</span> <span class="token string">&quot;演示&quot;</span><span class="token punctuation">,</span>   <span class="token comment">//导航栏文字内容</span>
		<span class="token property">&quot;navigationBarBackgroundColor&quot;</span><span class="token operator">:</span> <span class="token string">&quot;#F8F8F8&quot;</span><span class="token punctuation">,</span>  <span class="token comment">//导航栏背景颜色</span>
		<span class="token property">&quot;enablePullDownRefresh&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token comment">//是否开启下拉刷新</span>
		<span class="token comment">//...</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),j={href:"https://uniapp.dcloud.net.cn/collocation/pages.html#globalstyle",target:"_blank",rel:"noopener noreferrer"},B=t("h3",{id:"pages",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#pages","aria-hidden":"true"},"#"),n(" pages")],-1),S=t("p",null,[t("code",null,"uni-app"),n(" 通过 pages 节点配置应用由哪些页面组成，pages 节点接收一个数组，数组每个项都是一个对象。主要包含两项:")],-1),C=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"属性"),t("th",{style:{"text-align":"left"}},"类型"),t("th",{style:{"text-align":"left"}},"默认值"),t("th",{style:{"text-align":"left"}},"描述")])],-1),T=t("tr",null,[t("td",{style:{"text-align":"left"}},"path"),t("td",{style:{"text-align":"left"}},"String"),t("td",{style:{"text-align":"left"}}),t("td",{style:{"text-align":"left"}},"配置页面路径")],-1),A=t("td",{style:{"text-align":"left"}},"style",-1),P=t("td",{style:{"text-align":"left"}},"Object",-1),F=t("td",{style:{"text-align":"left"}},null,-1),O={style:{"text-align":"left"}},E={href:"https://uniapp.dcloud.net.cn/collocation/pages#style",target:"_blank",rel:"noopener noreferrer"},J=a(`<p><strong>Tips：</strong></p><ul><li>pages节点的第一项为应用入口页（即首页）</li><li><strong>应用中新增/减少页面</strong>，都需要对 pages 数组进行修改</li><li>文件名<strong>不需要写后缀</strong>，框架会自动寻找路径下的页面资源</li></ul><h3 id="tabbar" tabindex="-1"><a class="header-anchor" href="#tabbar" aria-hidden="true">#</a> tabBar</h3><p>如果应用是一个多 tab 应用，可以通过 tabBar 配置项指定一级导航栏，以及 tab 切换时显示的对应页。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;tabBar&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>	
    <span class="token property">&quot;color&quot;</span><span class="token operator">:</span> <span class="token string">&quot;#ccc&quot;</span><span class="token punctuation">,</span>  <span class="token comment">// tab 上的文字默认颜色	</span>
    <span class="token property">&quot;selectedColor&quot;</span><span class="token operator">:</span> <span class="token string">&quot;#ff55ff&quot;</span><span class="token punctuation">,</span> <span class="token comment">// tab 上的文字选中时的颜色</span>
    <span class="token property">&quot;backgroundColor&quot;</span><span class="token operator">:</span> <span class="token string">&quot;#ffffff&quot;</span> <span class="token comment">// tab背景色</span>
    <span class="token property">&quot;list&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    	<span class="token punctuation">{</span>
    		<span class="token property">&quot;text&quot;</span><span class="token operator">:</span><span class="token string">&quot;首页&quot;</span><span class="token punctuation">,</span> <span class="token comment">//名称</span>
				<span class="token property">&quot;pagePath&quot;</span><span class="token operator">:</span><span class="token string">&quot;pages/index/index&quot;</span><span class="token punctuation">,</span> <span class="token comment">//页面路径</span>
				<span class="token property">&quot;iconPath&quot;</span><span class="token operator">:</span><span class="token string">&quot;static/logo.png&quot;</span><span class="token punctuation">,</span> <span class="token comment">//图片路径</span>
				<span class="token property">&quot;selectedIconPath&quot;</span><span class="token operator">:</span><span class="token string">&quot;static/1.jpg&quot;</span> <span class="token comment">//选择后图片路径</span>
    		<span class="token comment">// &quot;iconfont&quot;: {} //字体图标配置，优先级比iconPath更高</span>
  		<span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),H={href:"https://uniapp.dcloud.net.cn/collocation/pages.html#pages",target:"_blank",rel:"noopener noreferrer"},N=a(`<h3 id="condition" tabindex="-1"><a class="header-anchor" href="#condition" aria-hidden="true">#</a> condition</h3><p>启动模式配置，仅开发期间生效，用于模拟直达页面的场景，如：小程序转发后，用户点击所打开的页面。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;condition&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">//模式配置，仅开发期间生效</span>
	<span class="token property">&quot;current&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">//当前激活的模式（或list 的索引项）</span>
	<span class="token property">&quot;list&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
			<span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;swiper&quot;</span><span class="token punctuation">,</span> <span class="token comment">//模式名称</span>
			<span class="token property">&quot;path&quot;</span><span class="token operator">:</span> <span class="token string">&quot;pages/component/swiper/swiper&quot;</span><span class="token punctuation">,</span> <span class="token comment">//启动页面，必选</span>
			<span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token string">&quot;interval=4000&amp;autoplay=false&quot;</span> <span class="token comment">//启动参数，在页面的onLoad函数里面得到。</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">{</span>
			<span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span>
			<span class="token property">&quot;path&quot;</span><span class="token operator">:</span> <span class="token string">&quot;pages/component/switch/switch&quot;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意在微信小程序开发工具中需要手动改变编译模式。</p><h3 id="easycom" tabindex="-1"><a class="header-anchor" href="#easycom" aria-hidden="true">#</a> easycom</h3><blockquote><p><code>HBuilderX 2.5.5</code>起支持<code>easycom</code>组件模式。</p></blockquote><p>传统vue组件，需要安装、引用、注册，三个步骤后才能使用组件。<code>easycom</code>将其精简为一步。 只要组件安装在项目根目录或uni_modules的components目录下，并符合<code>components/组件名称/组件名称.vue</code> 或 <code>uni_modules/插件ID/components/组件名称/组件名称.vue</code>目录结构。就可以不用引用、注册，直接在页面中使用，相当于全局组件。</p><h2 id="内置组件" tabindex="-1"><a class="header-anchor" href="#内置组件" aria-hidden="true">#</a> 内置组件</h2><h3 id="view" tabindex="-1"><a class="header-anchor" href="#view" aria-hidden="true">#</a> view</h3><p>类似于传统html中的div，用于包裹各种元素内容。</p><table><thead><tr><th style="text-align:left;">属性名</th><th style="text-align:left;">类型</th><th style="text-align:left;">默认值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">hover-class</td><td style="text-align:left;">String</td><td style="text-align:left;">none</td><td style="text-align:left;">指定按下去的样式类。当 hover-class=&quot;none&quot; 时，没有点击态效果</td></tr><tr><td style="text-align:left;">hover-stop-propagation</td><td style="text-align:left;">Boolean</td><td style="text-align:left;">false</td><td style="text-align:left;">指定是否阻止本节点的祖先节点出现点击态，App、H5、支付宝小程序、百度小程序不支持（支付宝小程序、百度小程序文档中都有此属性，实测未支持）</td></tr><tr><td style="text-align:left;">hover-start-time</td><td style="text-align:left;">Number</td><td style="text-align:left;">50</td><td style="text-align:left;">按住后多久出现点击态，单位毫秒</td></tr><tr><td style="text-align:left;">hover-stay-time</td><td style="text-align:left;">Number</td><td style="text-align:left;">400</td><td style="text-align:left;">手指松开后点击态保留时间，单位毫秒</td></tr></tbody></table><h3 id="scroll-view" tabindex="-1"><a class="header-anchor" href="#scroll-view" aria-hidden="true">#</a> scroll-view</h3>`,12),$={href:"https://uniapp.dcloud.net.cn/component/scroll-view.html",target:"_blank",rel:"noopener noreferrer"},D=a(`<table><thead><tr><th style="text-align:left;">属性名</th><th style="text-align:left;">类型</th><th style="text-align:left;">默认值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">scroll-x</td><td style="text-align:left;">Boolean</td><td style="text-align:left;">false</td><td style="text-align:left;">允许横向滚动</td></tr><tr><td style="text-align:left;">scroll-y</td><td style="text-align:left;">Boolean</td><td style="text-align:left;">false</td><td style="text-align:left;">允许纵向滚动</td></tr></tbody></table><p>使用竖向滚动时，需要给 <code>&lt;scroll-view&gt;</code> 一个固定高度，通过 css 设置 height；使用横向滚动时，需要给<code>&lt;scroll-view&gt;</code>添加<code>white-space: nowrap;</code>样式。</p><h3 id="swiper" tabindex="-1"><a class="header-anchor" href="#swiper" aria-hidden="true">#</a> swiper</h3><p>滑块视图容器。一般用于左右滑动或上下滑动，比如banner轮播图。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swiper</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swiper-item</span><span class="token punctuation">&gt;</span></span> xxx <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swiper-item</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swiper-item</span><span class="token punctuation">&gt;</span></span> xxx <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swiper-item</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swiper-item</span><span class="token punctuation">&gt;</span></span> xxx <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swiper-item</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swiper</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一些重要的属性如下：</p><table><thead><tr><th style="text-align:left;">属性名</th><th style="text-align:left;">类型</th><th style="text-align:left;">默认值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">indicator-dots</td><td style="text-align:left;">Boolean</td><td style="text-align:left;">false</td><td style="text-align:left;">是否显示面板指示点</td></tr><tr><td style="text-align:left;">indicator-color</td><td style="text-align:left;">Color</td><td style="text-align:left;">rgba(0, 0, 0, .3)</td><td style="text-align:left;">指示点颜色</td></tr><tr><td style="text-align:left;">indicator-active-color</td><td style="text-align:left;">Color</td><td style="text-align:left;">#000000</td><td style="text-align:left;">当前选中的指示点颜色</td></tr><tr><td style="text-align:left;">autoplay</td><td style="text-align:left;">Boolean</td><td style="text-align:left;">false</td><td style="text-align:left;">是否自动切换</td></tr><tr><td style="text-align:left;">current</td><td style="text-align:left;">Number</td><td style="text-align:left;">0</td><td style="text-align:left;">当前所在滑块的 index</td></tr><tr><td style="text-align:left;">interval</td><td style="text-align:left;">Number</td><td style="text-align:left;">5000</td><td style="text-align:left;">自动切换时间间隔</td></tr><tr><td style="text-align:left;">duration</td><td style="text-align:left;">Number</td><td style="text-align:left;">500</td><td style="text-align:left;">滑动动画时长</td></tr><tr><td style="text-align:left;">circular</td><td style="text-align:left;">Boolean</td><td style="text-align:left;">false</td><td style="text-align:left;">是否采用衔接滑动，即播放到末尾后重新回到开头</td></tr><tr><td style="text-align:left;">vertical</td><td style="text-align:left;">Boolean</td><td style="text-align:left;">false</td><td style="text-align:left;">滑动方向是否为纵向</td></tr></tbody></table>`,7),L={href:"https://uniapp.dcloud.net.cn/component/swiper.html",target:"_blank",rel:"noopener noreferrer"},I=a('<h3 id="icon" tabindex="-1"><a class="header-anchor" href="#icon" aria-hidden="true">#</a> icon</h3><p><strong>属性说明</strong></p><table><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>type</td><td>String</td><td></td><td>icon的类型</td></tr><tr><td>size</td><td>Number</td><td>23</td><td>icon的大小，单位px</td></tr><tr><td>color</td><td>Color</td><td></td><td>icon的颜色，同css的color</td></tr></tbody></table><p>各平台 type 有效值说明：</p><table><thead><tr><th style="text-align:center;">平台</th><th style="text-align:center;">type 有效值</th></tr></thead><tbody><tr><td style="text-align:center;">App、H5、微信小程序、QQ小程序</td><td style="text-align:center;">success, success_no_circle, info, warn, waiting, cancel, download, search, clear</td></tr><tr><td style="text-align:center;">支付宝小程序</td><td style="text-align:center;">info, warn, waiting, cancel, download, search, clear, success, success_no_circle,loading</td></tr><tr><td style="text-align:center;">百度小程序</td><td style="text-align:center;">success, info, warn, waiting, success_no_circle, clear, search, personal, setting, top, close, cancel, download, checkboxSelected, radioSelected, radioUnselect</td></tr></tbody></table><h3 id="text" tabindex="-1"><a class="header-anchor" href="#text" aria-hidden="true">#</a> text</h3>',6),R={href:"https://uniapp.dcloud.net.cn/component/text.html",target:"_blank",rel:"noopener noreferrer"},V=a('<table><thead><tr><th style="text-align:left;">属性名</th><th style="text-align:left;">类型</th><th style="text-align:left;">默认值</th><th style="text-align:left;">说明</th><th style="text-align:left;">平台差异说明</th></tr></thead><tbody><tr><td style="text-align:left;">selectable</td><td style="text-align:left;">Boolean</td><td style="text-align:left;">false</td><td style="text-align:left;">文本是否可选</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">user-select</td><td style="text-align:left;">Boolean</td><td style="text-align:left;">false</td><td style="text-align:left;">文本是否可选</td><td style="text-align:left;">微信小程序</td></tr></tbody></table><p><strong>Tips</strong></p><ul><li><code>&lt;text&gt;</code> 组件内只支持嵌套 <code>&lt;text&gt;</code>，不支持其它组件或自定义组件，否则会引发在不同平台的渲染差异。</li><li>在app-nvue下，只有<code>&lt;text&gt;</code>才能包裹文本内容。无法在<code>&lt;view&gt;</code>组件包裹文本。</li><li>decode 可以解析的有 <code></code> <code>&lt;</code> <code>&gt;</code> <code>&amp;</code> <code>&#39;</code> <code> </code> <code> </code>。</li><li>各个操作系统的空格标准并不一致。</li><li>除了文本节点以外的其他节点都无法长按选中。</li><li>支持 <code>\\n</code> 方式换行。</li><li>如果使用 <code>&lt;span&gt;</code> 组件编译时会被转换为 <code>&lt;text&gt;</code>。</li></ul><h3 id="navigator" tabindex="-1"><a class="header-anchor" href="#navigator" aria-hidden="true">#</a> navigator</h3><p>用于页面跳转。该组件类似HTML中的<code>&lt;a&gt;</code>组件，但只能跳转本地页面。目标页面必须在pages.json中注册。</p><table><thead><tr><th style="text-align:left;">属性名</th><th style="text-align:left;">类型</th><th style="text-align:left;">默认值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">url</td><td style="text-align:left;">String</td><td style="text-align:left;"></td><td style="text-align:left;">应用内的跳转链接，值为相对路径或绝对路径，如：&quot;../first/first&quot;，&quot;/pages/first/first&quot;，注意不能加 <code>.vue</code> 后缀</td></tr><tr><td style="text-align:left;">open-type</td><td style="text-align:left;">String</td><td style="text-align:left;">navigate</td><td style="text-align:left;">跳转方式 navigate | redirect | switchTab | reLaunch | navigateBack</td></tr></tbody></table>',6),U={href:"https://uniapp.dcloud.io/tutorial/page.html#emit",target:"_blank",rel:"noopener noreferrer"},X={href:"https://ask.dcloud.net.cn/article/35021",target:"_blank",rel:"noopener noreferrer"},M=t("code",null,"encodeURIComponent",-1),Q=t("code",null,"encodeURIComponent",-1),K=a(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>navigator <span class="token operator">:</span>url<span class="token operator">=</span><span class="token string">&quot;&#39;/pages/navigate/navigate?item=&#39;+ encodeURIComponent(JSON.stringify(item))&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>navigator<span class="token operator">&gt;</span>

<span class="token comment">// navigate.vue页面接受参数</span>
<span class="token function-variable function">onLoad</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">option</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> item <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>option<span class="token punctuation">.</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="imgae" tabindex="-1"><a class="header-anchor" href="#imgae" aria-hidden="true">#</a> imgae</h3><table><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th><th>平台差异说明</th></tr></thead><tbody><tr><td>src</td><td>String</td><td></td><td>图片资源地址</td><td></td></tr><tr><td>mode</td><td>String</td><td>&#39;scaleToFill&#39;</td><td>图片裁剪、缩放的模式</td><td></td></tr><tr><td>lazy-load</td><td>Boolean</td><td>false</td><td>图片懒加载。只针对page与scroll-view下的image有效</td><td>微信小程序、百度小程序、字节跳动小程序、飞书小程序</td></tr></tbody></table><p><strong>Tips</strong></p><ul><li><code>&lt;image&gt;</code> 组件默认宽度 320px、高度 240px；<code>app-nvue平台，暂时默认为屏幕宽度、高度 240px；</code></li><li><code>src</code> 仅支持相对路径、绝对路径，支持 base64 码；</li><li>页面结构复杂，css样式太多的情况，使用 image 可能导致样式生效较慢，出现 “闪一下” 的情况，此时设置 <code>image{will-change: transform}</code> ,可优化此问题。</li><li>自定义组件里面使用 <code>&lt;image&gt;</code>时，若 <code>src</code> 使用相对路径可能出现路径查找失败的情况，故建议使用绝对路径。</li><li>svg 格式的图片在不同的平台支持情况不同。具体为：app-nvue 不支持 svg 格式的图片，小程序上只支持网络地址。</li></ul><p><strong>mode 有效值：</strong></p><p>mode 有 14 种模式，其中 5 种是缩放模式，9 种是裁剪模式。</p><table><thead><tr><th>模式</th><th>值</th><th>说明</th></tr></thead><tbody><tr><td>缩放</td><td>scaleToFill</td><td>不保持纵横比缩放图片，使图片的宽高完全拉伸至填满 image 元素 （常用）</td></tr><tr><td>缩放</td><td>aspectFit</td><td>保持纵横比缩放图片，使图片的长边能完全显示出来。也就是说，可以完整地将图片显示出来。</td></tr><tr><td>缩放</td><td>aspectFill</td><td>保持纵横比缩放图片，只保证图片的短边能完全显示出来。也就是说，图片通常只在水平或垂直方向是完整的，另一个方向将会发生截取。</td></tr><tr><td>缩放</td><td>widthFix</td><td>宽度不变，高度自动变化，保持原图宽高比不变</td></tr><tr><td>缩放</td><td>heightFix</td><td>高度不变，宽度自动变化，保持原图宽高比不变 <strong>App 和 H5 平台 HBuilderX 2.9.3+ 支持、微信小程序需要基础库 2.10.3</strong></td></tr></tbody></table><h2 id="uni-app的-api" tabindex="-1"><a class="header-anchor" href="#uni-app的-api" aria-hidden="true">#</a> uni-app的 API</h2><h3 id="api-promise化" tabindex="-1"><a class="header-anchor" href="#api-promise化" aria-hidden="true">#</a> API Promise化</h3><p>1.具体 API <code>Promise 化</code> 的策略：</p><ul><li>异步的方法，如果不传入 success、fail、complete 等 callback 参数，将以 Promise 返回数据。例如：<code>uni.getImageInfo()</code></li><li>异步的方法，且有返回对象，如果希望获取返回对象，必须至少传入一项 success、fail、complete 等 callback 参数。例如：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token comment">// 正常使用</span>
 <span class="token keyword">const</span> task <span class="token operator">=</span> uni<span class="token punctuation">.</span><span class="token function">connectSocket</span><span class="token punctuation">(</span>
  <span class="token function">success</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">)</span>

 <span class="token comment">// Promise 化</span>
 uni<span class="token punctuation">.</span><span class="token function">connectSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
   <span class="token comment">// 此处即为正常使用时 success 回调的 res</span>
   <span class="token comment">// uni.connectSocket() 正常使用时是会返回 task 对象的，如果想获取 task ，则不要使用 Promise 化</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>不进行 <code>Promise 化</code> 的 API：</li></ol><ul><li>同步的方法（即以 sync 结束）。例如：<code>uni.getSystemInfoSync()</code></li><li>以 create 开头的方法。例如：<code>uni.createMapContext()</code></li><li>以 manager 结束的方法。例如：<code>uni.getBackgroundAudioManager()</code></li></ul><p>具体相关信息请查看官网。</p><h3 id="网络请求" tabindex="-1"><a class="header-anchor" href="#网络请求" aria-hidden="true">#</a> 网络请求</h3><p>通过 <strong><code>uni.request(OBJECT)</code></strong> 发起网络请求。</p><blockquote><p>在各个小程序平台运行时，网络相关的 API 在使用前需要配置域名白名单。</p><p><strong>success等等函数最好都要用箭头函数，不然拿不到this指定的data数据！</strong></p></blockquote><p><strong>OBJECT 参数说明</strong></p><table><thead><tr><th>参数名</th><th>类型</th><th>必填</th><th>默认值</th><th>说明</th><th>平台差异说明</th></tr></thead><tbody><tr><td>url</td><td>String</td><td>是</td><td></td><td>开发者服务器接口地址</td><td></td></tr><tr><td>data</td><td>Object/String/ArrayBuffer</td><td>否</td><td></td><td>请求的参数</td><td>App 3.3.7 以下不支持 ArrayBuffer 类型</td></tr><tr><td>header</td><td>Object</td><td>否</td><td></td><td>设置请求的 header，header 中不能设置 Referer。</td><td>App、H5端会自动带上cookie，且H5端不可手动修改</td></tr><tr><td>method</td><td>String</td><td>否</td><td>GET</td><td>有效值详见下方说明</td><td></td></tr><tr><td>timeout</td><td>Number</td><td>否</td><td>60000</td><td>超时时间，单位 ms</td><td>H5(HBuilderX 2.9.9+)、APP(HBuilderX 2.9.9+)、微信小程序（2.10.0）、支付宝小程序</td></tr><tr><td>success</td><td>Function</td><td>否</td><td></td><td>收到开发者服务器成功返回的回调函数</td><td></td></tr><tr><td>fail</td><td>Function</td><td>否</td><td></td><td>接口调用失败的回调函数</td><td></td></tr><tr><td>complete</td><td>Function</td><td>否</td><td></td><td>接口调用结束的回调函数（调用成功、失败都会执行）</td><td></td></tr></tbody></table><p><strong>success 返回参数说明</strong></p><table><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>data</td><td>Object/String/ArrayBuffer</td><td>开发者服务器返回的数据</td></tr><tr><td>statusCode</td><td>Number</td><td>开发者服务器返回的 HTTP 状态码</td></tr><tr><td>header</td><td>Object</td><td>开发者服务器返回的 HTTP Response Header</td></tr><tr><td>cookies</td><td><code>Array.&lt;string&gt;</code></td><td>开发者服务器返回的 cookies，格式为字符串数组</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>uni<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;https://www.example.com/request&#39;</span><span class="token punctuation">,</span> <span class="token comment">//仅为示例，并非真实接口地址。</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&#39;uni.request&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">header</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&#39;custom-header&#39;</span><span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span> <span class="token comment">//自定义请求头信息</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">&#39;request success&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>返回值</strong></p><p>如果希望返回一个 <code>requestTask</code> 对象，需要至少传入 success / fail / complete 参数中的一个。例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> requestTask <span class="token operator">=</span> uni<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;https://www.example.com/request&#39;</span><span class="token punctuation">,</span> <span class="token comment">//仅为示例，并非真实接口地址。</span>
	<span class="token function-variable function">complete</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
requestTask<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,27),Y={href:"https://uniapp.dcloud.net.cn/api/#promise-%E5%B0%81%E8%A3%85",target:"_blank",rel:"noopener noreferrer"},z=t("p",null,[n("通过 "),t("code",null,"requestTask"),n("，可中断请求任务。")],-1),W=t("h3",{id:"路由跳转",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#路由跳转","aria-hidden":"true"},"#"),n(" 路由跳转")],-1),G=t("p",null,[t("strong",null,[t("code",null,"uni.navigateTo(OBJECT)")])],-1),Z=t("p",null,[n("保留当前页面，跳转到应用内的某个页面，使用"),t("code",null,"uni.navigateBack"),n("可以返回到原页面。")],-1),tt=t("thead",null,[t("tr",null,[t("th",null,"参数"),t("th",null,"类型"),t("th",null,"必填"),t("th",null,"默认值"),t("th",null,"说明"),t("th",null,"平台差异说明")])],-1),nt=t("tr",null,[t("td",null,"url"),t("td",null,"String"),t("td",null,"是"),t("td"),t("td",null,"需要跳转的应用内非 tabBar 的页面的路径 , 路径后可以带参数。参数与路径之间使用?分隔，参数键与参数值用=相连，不同参数用&分隔；如 'path?key=value&key2=value2'，path为下一个页面的路径，下一个页面的onLoad函数可得到传递的参数"),t("td")],-1),st=t("td",null,"animationType",-1),et=t("td",null,"String",-1),at=t("td",null,"否",-1),lt=t("td",null,"pop-in",-1),ot={href:"https://uniapp.dcloud.net.cn/api/router#animation",target:"_blank",rel:"noopener noreferrer"},pt=t("td",null,"App",-1),it=t("tr",null,[t("td",null,"animationDuration"),t("td",null,"Number"),t("td",null,"否"),t("td",null,"300"),t("td",null,"窗口动画持续时间，单位为 ms"),t("td",null,"App")],-1),dt=t("tr",null,[t("td",null,"events"),t("td",null,"Object"),t("td",null,"否"),t("td"),t("td",null,"页面间通信接口，用于监听被打开页面发送到当前页面的数据。2.8.9+ 开始支持。"),t("td")],-1),ct=t("tr",null,[t("td",null,"success"),t("td",null,"Function"),t("td",null,"否"),t("td"),t("td",null,"接口调用成功的回调函数"),t("td")],-1),rt=t("tr",null,[t("td",null,"fail"),t("td",null,"Function"),t("td",null,"否"),t("td"),t("td",null,"接口调用失败的回调函数"),t("td")],-1),ut=t("tr",null,[t("td",null,"complete"),t("td",null,"Function"),t("td",null,"否"),t("td"),t("td",null,"接口调用结束的回调函数（调用成功、失败都会执行）"),t("td")],-1),gt=a(`<p>相关示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//在起始页面跳转到test.vue页面并传递参数</span>
uni<span class="token punctuation">.</span><span class="token function">navigateTo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;test?id=1&amp;name=uniapp&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 在test.vue页面接受参数</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
	<span class="token function-variable function">onLoad</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">option</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//option为object类型，会序列化上个页面传递的参数</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>option<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印出上个页面传递的参数。</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>option<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印出上个页面传递的参数。</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 在起始页面跳转到test.vue页面，并监听test.vue发送过来的事件数据</span>
uni<span class="token punctuation">.</span><span class="token function">navigateTo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;pages/test?id=1&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">events</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 为指定事件添加一个监听器，获取被打开页面传送到当前页面的数据</span>
    <span class="token function-variable function">acceptDataFromOpenedPage</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">someEvent</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token operator">...</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 通过eventChannel向被打开页面传送数据</span>
    res<span class="token punctuation">.</span>eventChannel<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;acceptDataFromOpenerPage&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">&#39;data from starter page&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 在test.vue页面，向起始页通过事件传递数据</span>
<span class="token function-variable function">onLoad</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">option</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> eventChannel <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getOpenerEventChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  eventChannel<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;acceptDataFromOpenedPage&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">&#39;data from test page&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  eventChannel<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;someEvent&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">&#39;data from test page for someEvent&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 监听acceptDataFromOpenerPage事件，获取上一页面通过eventChannel传送到当前页面的数据</span>
  eventChannel<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;acceptDataFromOpenerPage&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外还要一些其他的跳转方式：</p><ul><li><p><strong><code>uni.redirectTo(OBJECT)</code></strong> 关闭当前页面，跳转到应用内的某个页面。</p></li><li><p><strong><code>uni.reLaunch(OBJECT)</code></strong> 关闭所有页面，打开到应用内的某个页面。</p></li><li><p><strong><code>uni.switchTab(OBJECT)</code></strong> 跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面。</p></li><li><p><strong><code>uni.navigateBack({delta：1})</code></strong> 关闭当前页面，返回上一页面或多级页面。可通过 <code>getCurrentPages()</code> 获取当前的页面栈，决定需要返回几层。</p></li></ul><p><strong>OBJECT参数说明</strong></p><table><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">类型</th><th style="text-align:left;">必填</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">url</td><td style="text-align:left;">String</td><td style="text-align:left;">是</td><td style="text-align:left;">需要跳转的应用内非 tabBar 的页面的路径，路径后可以带参数。参数与路径之间使用?分隔，参数键与参数值用=相连，不同参数用&amp;分隔；如 &#39;path?key=value&amp;key2=value2&#39;</td></tr><tr><td style="text-align:left;">success</td><td style="text-align:left;">Function</td><td style="text-align:left;">否</td><td style="text-align:left;">接口调用成功的回调函数</td></tr><tr><td style="text-align:left;">fail</td><td style="text-align:left;">Function</td><td style="text-align:left;">否</td><td style="text-align:left;">接口调用失败的回调函数</td></tr><tr><td style="text-align:left;">complete</td><td style="text-align:left;">Function</td><td style="text-align:left;">否</td><td style="text-align:left;">接口调用结束的回调函数（调用成功、失败都会执行）</td></tr></tbody></table>`,8),kt={href:"https://uniapp.dcloud.net.cn/api/router.html#event-channel",target:"_blank",rel:"noopener noreferrer"},ht=a('<h3 id="数据缓存" tabindex="-1"><a class="header-anchor" href="#数据缓存" aria-hidden="true">#</a> 数据缓存</h3><p><strong><code>uni.setStorage(OBJECT)</code></strong> 与 <strong><code>uni.setStorageSync(KEY,DATA)</code></strong></p><p>将数据存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容。</p><p><strong>OBJECT 参数说明</strong></p><table><thead><tr><th style="text-align:left;">参数名</th><th style="text-align:left;">类型</th><th style="text-align:left;">必填</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">key</td><td style="text-align:left;">String</td><td style="text-align:left;">是</td><td style="text-align:left;">本地缓存中的指定的 key</td></tr><tr><td style="text-align:left;">data</td><td style="text-align:left;">Any</td><td style="text-align:left;">是</td><td style="text-align:left;">需要存储的内容，只支持原生类型、及能够通过 JSON.stringify 序列化的对象</td></tr><tr><td style="text-align:left;">success</td><td style="text-align:left;">Function</td><td style="text-align:left;">否</td><td style="text-align:left;">接口调用成功的回调函数</td></tr><tr><td style="text-align:left;">fail</td><td style="text-align:left;">Function</td><td style="text-align:left;">否</td><td style="text-align:left;">接口调用失败的回调函数</td></tr><tr><td style="text-align:left;">complete</td><td style="text-align:left;">Function</td><td style="text-align:left;">否</td><td style="text-align:left;">接口调用结束的回调函数（调用成功、失败都会执行）</td></tr></tbody></table><p><strong><code>uni.getStorage(OBJECT)</code></strong> 与 <strong><code>uni.getStorageSync(KEY)</code></strong></p><p>从本地缓存中读取指定的 key 的值</p><p><strong>OBJECT 参数说明</strong></p>',8),vt=t("table",null,[t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"参数名"),t("th",{style:{"text-align":"left"}},"类型"),t("th",{style:{"text-align":"left"}},"必填"),t("th",{style:{"text-align":"left"}},"说明")])]),t("tbody",null,[t("tr",null,[t("td",{style:{"text-align":"left"}},"key"),t("td",{style:{"text-align":"left"}},"String"),t("td",{style:{"text-align":"left"}},"是"),t("td",{style:{"text-align":"left"}},"本地缓存中的指定的 key")]),t("tr",{"data:":"",key对应的内容:""},[t("td",{style:{"text-align":"left"}},"success"),t("td",{style:{"text-align":"left"}},"Function"),t("td",{style:{"text-align":"left"}},"是"),t("td",{style:{"text-align":"left"}},"接口调用的回调函数，res =")]),t("tr",null,[t("td",{style:{"text-align":"left"}},"fail"),t("td",{style:{"text-align":"left"}},"Function"),t("td",{style:{"text-align":"left"}},"否"),t("td",{style:{"text-align":"left"}},"接口调用失败的回调函数")]),t("tr",null,[t("td",{style:{"text-align":"left"}},"complete"),t("td",{style:{"text-align":"left"}},"Function"),t("td",{style:{"text-align":"left"}},"否"),t("td",{style:{"text-align":"left"}},"接口调用结束的回调函数（调用成功、失败都会执行）")])])],-1),ft=a(`<p><strong><code>uni.removeStorage(OBJECT)</code></strong> 与 <strong><code>uni.removeStorageSync(KEY)</code></strong></p><p>从本地缓存中移除指定 key。 异步方法的参数对象与上面相同。</p><p><strong><code>uni.clearStorage()</code></strong> 与 <strong><code>uni.clearStorageSync()</code></strong></p><p>清除本地缓存。 均无参数</p><h3 id="交互反馈" tabindex="-1"><a class="header-anchor" href="#交互反馈" aria-hidden="true">#</a> 交互反馈</h3><p><strong><code>uni.showToast(OBJECT)</code></strong> 显示消息提示框。</p><p><strong>OBJECT参数说明</strong></p><table><thead><tr><th>参数</th><th>类型</th><th>必填</th><th>说明</th><th>平台差异说明</th></tr></thead><tbody><tr><td>title</td><td>String</td><td>是</td><td>提示的内容，长度与 icon 取值有关。</td><td></td></tr><tr><td>icon</td><td>String</td><td>否</td><td>图标，有效值详见下方说明。</td><td></td></tr><tr><td>image</td><td>String</td><td>否</td><td>自定义图标的本地路径（app端暂不支持gif）</td><td>App、H5、微信小程序、百度小程序</td></tr><tr><td>mask</td><td>Boolean</td><td>否</td><td>是否显示透明蒙层，防止触摸穿透，默认：false</td><td>App、微信小程序</td></tr><tr><td>duration</td><td>Number</td><td>否</td><td>提示的延迟时间，单位毫秒，默认：1500</td><td></td></tr><tr><td>position</td><td>String</td><td>否</td><td>纯文本轻提示显示位置，填写有效值后只有 <code>title</code> 属性生效，且不支持通过 uni.hideToast 隐藏。top | center | bottom</td><td>App</td></tr><tr><td>success</td><td>Function</td><td>否</td><td>接口调用成功的回调函数</td><td></td></tr><tr><td>fail</td><td>Function</td><td>否</td><td>接口调用失败的回调函数</td><td></td></tr><tr><td>complete</td><td>Function</td><td>否</td><td>接口调用结束的回调函数（调用成功、失败都会执行）</td><td></td></tr></tbody></table><p>其中 icon 取值：</p><table><thead><tr><th style="text-align:left;">值</th><th style="text-align:left;">说明</th><th style="text-align:left;">平台差异说明</th></tr></thead><tbody><tr><td style="text-align:left;">success</td><td style="text-align:left;">显示成功图标，此时 title 文本在<code>小程序</code>平台最多显示 7 个汉字长度。</td><td style="text-align:left;">支付宝小程序无长度无限制</td></tr><tr><td style="text-align:left;">error</td><td style="text-align:left;">显示错误图标，此时 title 文本在<code>小程序</code>平台最多显示 7 个汉字长度。</td><td style="text-align:left;">支付宝小程序、快手小程序、字节小程序、百度小程序、京东小程序、QQ小程序不支持</td></tr><tr><td style="text-align:left;">fail</td><td style="text-align:left;">显示错误图标，此时 title 文本无长度显示。</td><td style="text-align:left;">支付宝小程序、字节小程序</td></tr><tr><td style="text-align:left;">exception</td><td style="text-align:left;">显示异常图标。此时 title 文本无长度显示。</td><td style="text-align:left;">支付宝小程序</td></tr><tr><td style="text-align:left;">loading</td><td style="text-align:left;">显示加载图标，此时 title 文本在<code>小程序</code>平台最多显示 7 个汉字长度。</td><td style="text-align:left;">支付宝小程序不支持</td></tr><tr><td style="text-align:left;">none</td><td style="text-align:left;">不显示图标，此时 title 文本在<code>小程序</code>最多可显示两行，<code>App</code>仅支持单行显示。</td><td style="text-align:left;"></td></tr></tbody></table><p><strong><code>uni.hideToast()</code></strong></p><p>隐藏消息提示框。</p><p><strong><code>uni.showLoading(OBJECT)</code></strong></p><p>显示 loading 提示框, 需主动调用 <code>uni.hideLoading()</code> 才能关闭提示框。</p><p><strong>OBJECT参数说明</strong></p><table><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">类型</th><th style="text-align:left;">必填</th><th style="text-align:left;">说明</th><th style="text-align:left;">平台差异说明</th></tr></thead><tbody><tr><td style="text-align:left;">title</td><td style="text-align:left;">String</td><td style="text-align:left;">是</td><td style="text-align:left;">提示的文字内容，显示在loading的下方</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">mask</td><td style="text-align:left;">Boolean</td><td style="text-align:left;">否</td><td style="text-align:left;">是否显示透明蒙层，防止触摸穿透，默认：false</td><td style="text-align:left;">H5、App、微信小程序、百度小程序</td></tr><tr><td style="text-align:left;">success</td><td style="text-align:left;">Function</td><td style="text-align:left;">否</td><td style="text-align:left;">接口调用成功的回调函数</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">fail</td><td style="text-align:left;">Function</td><td style="text-align:left;">否</td><td style="text-align:left;">接口调用失败的回调函数</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">complete</td><td style="text-align:left;">Function</td><td style="text-align:left;">否</td><td style="text-align:left;">接口调用结束的回调函数（调用成功、失败都会执行）</td><td style="text-align:left;"></td></tr></tbody></table><p><strong><code>uni.showModal(OBJECT)</code></strong></p><p>显示模态弹窗，可以只有一个确定按钮，也可以同时有确定和取消按钮。</p><p><strong>OBJECT参数说明</strong></p><table><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">类型</th><th style="text-align:left;">必填</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">title</td><td style="text-align:left;">String</td><td style="text-align:left;">否</td><td style="text-align:left;">提示的标题</td></tr><tr><td style="text-align:left;">content</td><td style="text-align:left;">String</td><td style="text-align:left;">否</td><td style="text-align:left;">提示的内容</td></tr><tr><td style="text-align:left;">showCancel</td><td style="text-align:left;">Boolean</td><td style="text-align:left;">否</td><td style="text-align:left;">是否显示取消按钮，默认为 true</td></tr><tr><td style="text-align:left;">cancelText</td><td style="text-align:left;">String</td><td style="text-align:left;">否</td><td style="text-align:left;">取消按钮的文字，默认为&quot;取消&quot;</td></tr><tr><td style="text-align:left;">cancelColor</td><td style="text-align:left;">HexColor</td><td style="text-align:left;">否</td><td style="text-align:left;">取消按钮的文字颜色，默认为&quot;#000000&quot;</td></tr><tr><td style="text-align:left;">confirmText</td><td style="text-align:left;">String</td><td style="text-align:left;">否</td><td style="text-align:left;">确定按钮的文字，默认为&quot;确定&quot;</td></tr><tr><td style="text-align:left;">success</td><td style="text-align:left;">Function</td><td style="text-align:left;">否</td><td style="text-align:left;">接口调用成功的回调函数</td></tr><tr><td style="text-align:left;">fail</td><td style="text-align:left;">Function</td><td style="text-align:left;">否</td><td style="text-align:left;">接口调用失败的回调函数</td></tr><tr><td style="text-align:left;">complete</td><td style="text-align:left;">Function</td><td style="text-align:left;">否</td><td style="text-align:left;">接口调用结束的回调函数（调用成功、失败都会执行）</td></tr></tbody></table><p><strong>success返回参数说明</strong></p><table><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">类型</th><th style="text-align:left;">说明</th><th style="text-align:left;">平台差异说明</th></tr></thead><tbody><tr><td style="text-align:left;">confirm</td><td style="text-align:left;">Boolean</td><td style="text-align:left;">为 true 时，表示用户点击了确定按钮</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">cancel</td><td style="text-align:left;">Boolean</td><td style="text-align:left;">为 true 时，表示用户点击了取消（用于 Android 系统区分点击蒙层关闭还是点击取消按钮关闭）</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">content</td><td style="text-align:left;">String</td><td style="text-align:left;"><code>editable</code> 为 true 时，用户输入的文本</td><td style="text-align:left;">H5 (3.2.10+)、App (3.2.10+)、微信小程序 (2.17.1+)、字节小程序（2.62.0+）</td></tr></tbody></table><h3 id="下拉刷新" tabindex="-1"><a class="header-anchor" href="#下拉刷新" aria-hidden="true">#</a> 下拉刷新</h3><p>在 js 中定义 onPullDownRefresh 处理函数（和onLoad等生命周期函数同级），监听该页面用户下拉刷新事件。</p><ul><li>需要在 <code>pages.json</code> 里，找到的当前页面的pages节点，并在 <code>style</code> 选项中开启 <code>enablePullDownRefresh</code>。</li><li>当处理完数据刷新后，<code>uni.stopPullDownRefresh</code> 可以停止当前页面的下拉刷新。</li></ul><p><strong><code>uni.startPullDownRefresh(OBJECT)</code></strong></p><p>开始下拉刷新，调用后触发下拉刷新动画，效果与用户手动下拉刷新一致。</p><p><strong>OBJECT 参数说明</strong></p><table><thead><tr><th style="text-align:left;">参数名</th><th style="text-align:left;">类型</th><th style="text-align:left;">必填</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">success</td><td style="text-align:left;">Function</td><td style="text-align:left;">否</td><td style="text-align:left;">接口调用成功的回调</td></tr><tr><td style="text-align:left;">fail</td><td style="text-align:left;">Function</td><td style="text-align:left;">否</td><td style="text-align:left;">接口调用失败的回调函数</td></tr><tr><td style="text-align:left;">complete</td><td style="text-align:left;">Function</td><td style="text-align:left;">否</td><td style="text-align:left;">接口调用结束的回调函数（调用成功、失败都会执行）</td></tr></tbody></table><p><strong><code>uni.stopPullDownRefresh()</code></strong></p><p>停止当前页面下拉刷新。</p><h3 id="页面通讯" tabindex="-1"><a class="header-anchor" href="#页面通讯" aria-hidden="true">#</a> 页面通讯</h3><p><strong><code>getCurrentPages()</code></strong></p><p><code>getCurrentPages()</code> 函数用于获取当前页面栈的实例，以数组形式按栈的顺序给出，第一个元素为首页，最后一个元素为当前页面。</p><p><strong>注意：</strong> <code>getCurrentPages()</code>仅用于展示页面栈的情况，请勿修改页面栈，以免造成页面状态错误。</p><p>每个页面实例的方法属性列表：</p><table><thead><tr><th>方法</th><th>描述</th><th>平台说明</th></tr></thead><tbody><tr><td>page.$getAppWebview()</td><td>获取当前页面的webview对象实例</td><td>App</td></tr><tr><td>page.$vm</td><td>当前页面的 Vue 实例</td><td></td></tr><tr><td>page.route</td><td>获取当前页面的路由</td><td></td></tr></tbody></table><p>熟悉页面栈后才能更好的使用getCurrentPages()，下面将列举几种常用的使用场景： 1.利用页面栈的长度 例如：进入小程序非默认首页时，需要提供返回首页的按钮或者执行其它事件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">onShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">let</span> pages <span class="token operator">=</span> <span class="token function">getCurrentPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//当前页面栈</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span>pages<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//todo</span>
     <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、跨页面赋值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token keyword">let</span> pages <span class="token operator">=</span> <span class="token function">getCurrentPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当前页面栈</span>
 <span class="token keyword">let</span> prevPage <span class="token operator">=</span> pages<span class="token punctuation">[</span>pages<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//上一页面</span>
 <span class="token comment">//直接给上移页面赋值</span>
 prevPage<span class="token punctuation">.</span>list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、页面跳转后自动刷新</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token comment">//举例</span>
 uni<span class="token punctuation">.</span><span class="token function">switchTab</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
     <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;../index/index&#39;</span><span class="token punctuation">,</span>
     <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">var</span> page <span class="token operator">=</span> <span class="token function">getCurrentPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//当前页面</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span>page <span class="token operator">==</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> page <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
         page<span class="token punctuation">.</span><span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//或者其它操作</span>
     <span class="token punctuation">}</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4、获取当前页面相关信息</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> pages <span class="token operator">=</span> <span class="token function">getCurrentPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//当前页面栈</span>
<span class="token comment">//当前页面为页面栈的最后一个元素</span>
<span class="token keyword">let</span> prevPage <span class="token operator">=</span> pages<span class="token punctuation">[</span>pages<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//当前页面</span>
<span class="token comment">// or</span>
<span class="token comment">// pop() 方法用于删除并返回数组的最后一个元素</span>
<span class="token keyword">let</span> prevPage <span class="token operator">=</span> pages<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当前页面</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> prevPage<span class="token punctuation">.</span>route<span class="token punctuation">)</span> <span class="token comment">//举例：输出为‘pages/index/index</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>getApp()</code></strong></p><p><code>getApp()</code> 函数用于获取当前应用实例，一般用于获取globalData 。</p><p><strong>实例</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">getApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>globalData<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：</strong></p><ul><li><p>不要在定义于 <code>App()</code> 内的函数中，或调用 <code>App</code> 前调用 <code>getApp()</code> ，可以通过 <code>this.$scope</code> 获取对应的app实例</p></li><li><p>通过 <code>getApp()</code> 获取实例之后，不要私自调用生命周期函数。</p></li><li><p>当在首页<code>nvue</code>中使用<code>getApp()</code>不一定可以获取真正的<code>App</code>对象。对此提供了<code>const app = getApp({allowDefault: true})</code>用来获取原始的<code>App</code>对象，可以用来在首页对<code>globalData</code>等初始化</p></li><li><p><strong><code>uni.$emit(eventName,OBJECT)</code></strong> 触发全局的自定义事件，附加参数都会传给监听器回调函数。</p></li><li><p><strong><code>uni.$on(eventName,callback)</code></strong> 监听全局的自定义事件，事件由 uni.$emit 触发，回调函数会接收事件触发函数的传入参数。</p></li><li><p><strong><code>uni.$once(eventName,callback)</code></strong> 监听全局的自定义事件，事件由 uni.$emit 触发，但仅触发一次，在第一次触发之后移除该监听器。</p></li><li><p><strong><code>uni.$off([eventName, callback])</code></strong> 移除全局自定义事件监听器。</p></li></ul><p><strong>Tips</strong></p><ul><li>如果uni.$off没有传入参数，则移除App级别的所有事件监听器；</li><li>如果只提供了事件名（eventName），则移除该事件名对应的所有监听器；</li><li>如果同时提供了事件与回调，则只移除这个事件回调的监听器；</li><li>提供的回调必须跟$on的回调为同一个才能移除这个回调的监听器；</li></ul><p><strong>注意事项</strong></p><ul><li>uni.$emit、 uni.$on 、 uni.$once 、uni.$off 触发的事件都是 App 全局级别的，跨任意组件，页面，nvue，vue 等</li><li>使用时，注意及时销毁事件监听，比如，页面 onLoad 里边 uni.$on 注册监听，onUnload 里边 uni.$off 移除，或者一次性的事件，直接使用 uni.$once 监听</li><li>注意 uni.$on 定义完成后才能接收到 uni.$emit 传递的数据</li></ul><h2 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期" aria-hidden="true">#</a> 生命周期</h2><p>生命周期的概念：一个对象从创建、运行、销毁的整个过程被成为生命周期。</p><p>生命周期函数：在生命周期中每个阶段会伴随着每一个函数的触发，这些函数被称为生命周期函数。</p><h3 id="应用生命周期" tabindex="-1"><a class="header-anchor" href="#应用生命周期" aria-hidden="true">#</a> 应用生命周期</h3><p><code>uni-app</code> 支持如下应用生命周期函数：</p>`,60),mt=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"函数名"),t("th",{style:{"text-align":"left"}},"说明")])],-1),yt=t("tr",null,[t("td",{style:{"text-align":"left"}},"onLaunch"),t("td",{style:{"text-align":"left"}},[n("当"),t("code",null,"uni-app"),n(" 初始化完成时触发（全局只触发一次）")])],-1),bt=t("tr",null,[t("td",{style:{"text-align":"left"}},"onShow"),t("td",{style:{"text-align":"left"}},[n("当 "),t("code",null,"uni-app"),n(" 启动，或从后台进入前台显示")])],-1),xt=t("tr",null,[t("td",{style:{"text-align":"left"}},"onHide"),t("td",{style:{"text-align":"left"}},[n("当 "),t("code",null,"uni-app"),n(" 从前台进入后台")])],-1),_t=t("tr",null,[t("td",{style:{"text-align":"left"}},"onError"),t("td",{style:{"text-align":"left"}},[n("当 "),t("code",null,"uni-app"),n(" 报错时触发")])],-1),qt=t("td",{style:{"text-align":"left"}},"onUniNViewMessage",-1),wt={style:{"text-align":"left"}},jt=t("code",null,"nvue",-1),Bt={href:"https://uniapp.dcloud.io/tutorial/nvue-api?id=communication",target:"_blank",rel:"noopener noreferrer"},St=t("tr",null,[t("td",{style:{"text-align":"left"}},"onUnhandledRejection"),t("td",{style:{"text-align":"left"}},"对未处理的 Promise 拒绝事件监听函数（2.8.1+）")],-1),Ct=t("tr",null,[t("td",{style:{"text-align":"left"}},"onPageNotFound"),t("td",{style:{"text-align":"left"}},"页面不存在监听函数")],-1),Tt=t("tr",null,[t("td",{style:{"text-align":"left"}},"onThemeChange"),t("td",{style:{"text-align":"left"}},"监听系统主题变化")],-1),At=a('<p><strong>分析：</strong></p><ul><li><p>第一次加载页面时会调用<code>onLaunch</code> ，<code>onShow</code></p></li><li><p>当你在浏览器离开页面，去查看其它页面，或者其它应用会触发<code>onHide</code>，在回来查看该页面时触发<code>onShow</code></p></li><li><p><strong>应用生命周期仅可在<code>App.vue</code>中监听，在其它页面监听无效</strong>。</p></li></ul><h3 id="页面生命周期" tabindex="-1"><a class="header-anchor" href="#页面生命周期" aria-hidden="true">#</a> 页面生命周期</h3>',3),Pt=t("code",null,"uni-app",-1),Ft={href:"https://uniapp.dcloud.net.cn/tutorial/page.html#componentlifecycle",target:"_blank",rel:"noopener noreferrer"},Ot=t("thead",null,[t("tr",null,[t("th",null,"函数名"),t("th",null,"说明")])],-1),Et=t("td",null,"onLoad",-1),Jt={href:"https://uniapp.dcloud.net.cn/api/router#navigateto",target:"_blank",rel:"noopener noreferrer"},Ht=t("tr",null,[t("td",null,"onShow"),t("td",null,"监听页面显示。页面每次出现在屏幕上都触发，包括从下级页面点返回露出当前页面")],-1),Nt=t("tr",null,[t("td",null,"onReady"),t("td",null,"监听页面初次渲染完成。注意如果渲染速度快，会在页面进入动画完成前触发")],-1),$t=t("tr",null,[t("td",null,"onHide"),t("td",null,"监听页面隐藏")],-1),Dt=t("tr",null,[t("td",null,"onUnload"),t("td",null,"监听页面卸载")],-1),Lt=t("h3",{id:"组件生命周期",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#组件生命周期","aria-hidden":"true"},"#"),n(" 组件生命周期")],-1),It=t("p",null,"同vue组件生命周期。",-1);function Rt(Vt,Ut){const s=o("ExternalLinkIcon");return p(),i("div",null,[c,t("p",null,[r,n(" 是一个使用 "),t("a",u,[n("Vue.js"),e(s)]),n("开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、Web（响应式）、以及各种小程序（微信/支付宝/百度/头条/飞书/QQ/快手/钉钉/淘宝）、快应用等多个平台。")]),g,t("ul",null,[t("li",null,[t("p",null,[n("uni-app的编辑工具官方推荐使用 "),t("strong",null,[t("a",k,[n("HBuilderX"),e(s)])])])]),t("li",null,[t("p",null,[n("详细文档和具体语法规范请查看 "),t("strong",null,[t("a",h,[n("uni-app官网"),e(s)])])])])]),v,t("ul",null,[f,t("li",null,[n("组件标签靠近小程序规范，详见"),t("a",m,[n("uni-app 组件规范"),e(s)])]),t("li",null,[n("接口能力（JS API）靠近微信小程序规范，但需将前缀 "),y,n(" 替换为 "),b,n("，详见"),t("a",x,[n("uni-app接口规范"),e(s)])]),_,q]),w,t("p",null,[n("更多配置项请查看官方文档里的 "),t("a",j,[n("相关部分"),e(s)])]),B,S,t("table",null,[C,t("tbody",null,[T,t("tr",null,[A,P,F,t("td",O,[n("配置页面窗口表现，配置项参考官方（页面配置会覆盖全局配置） "),t("a",E,[n("pageStyle"),e(s)])])])])]),J,t("p",null,[n("更多配置项请查看官方文档里的 "),t("a",H,[n("相关部分"),e(s)])]),N,t("p",null,[n("可滚动视图区域。用于区域滚动。"),t("a",$,[n("官方文档"),e(s)])]),D,t("p",null,[n("此外还有一些绑定事件，具体参考 "),t("a",L,[n("官方文档"),e(s)])]),I,t("p",null,[n("文本组件。用于包裹文本内容。 相当于 span标签。 "),t("a",R,[n("相关文档"),e(s)])]),V,t("p",null,[n("在url上可以携带参数，相当于vue中的query参数。但url有长度限制，太长的字符串会传递失败，可使用"),t("a",U,[n("窗体通信"),e(s)]),n("、"),t("a",X,[n("全局变量"),e(s)]),n("，或"),M,n("等多种方式解决，如下为"),Q,n("示例。")]),K,t("p",null,[n("如果没有传入 success / fail / complete 参数，则会返回封装后的 Promise 对象："),t("a",Y,[n("Promise 封装"),e(s)])]),z,W,G,Z,t("table",null,[tt,t("tbody",null,[nt,t("tr",null,[st,et,at,lt,t("td",null,[n("窗口显示的动画效果，详见："),t("a",ot,[n("窗口动画"),e(s)])]),pt]),it,dt,ct,rt,ut])]),gt,t("p",null,[n("此外在 2.8.9+ 后支持 "),t("a",kt,[n("页面间事件通信通道"),e(s)])]),ht,vt,ft,t("table",null,[mt,t("tbody",null,[yt,bt,xt,_t,t("tr",null,[qt,t("td",wt,[n("对 "),jt,n(" 页面发送的数据进行监听，可参考 "),t("a",Bt,[n("nvue 向 vue 通讯"),e(s)])])]),St,Ct,Tt])]),At,t("p",null,[Pt,n(" 支持如下主要的页面生命周期函数：此外还要一些 "),t("a",Ft,[n("其他的钩子"),e(s)])]),t("table",null,[Ot,t("tbody",null,[t("tr",null,[Et,t("td",null,[n("监听页面加载，其参数为上个页面传递的数据，参数类型为 Object（用于页面传参），参考"),t("a",Jt,[n("示例"),e(s)])])]),Ht,Nt,$t,Dt])]),Lt,It])}const Qt=l(d,[["render",Rt],["__file","uniapp基础.html.vue"]]);export{Qt as default};
