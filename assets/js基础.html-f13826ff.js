import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as r,c as o,d as t}from"./app-d41615b3.js";const d={},a=t('<h2 id="初识js" tabindex="-1"><a class="header-anchor" href="#初识js" aria-hidden="true">#</a> 初识JS</h2><p>JavaScript负责页面中的的行为。是一门运行在浏览器端的脚本语言。</p><p>JS可以直接写在HTML文件内部的 <strong>script标签</strong> 中，也可以在外部创建一个js文件然后利用script标签的src属性引入（这样这个script标签内部不能在编写代码）。</p><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h2><p>JS目前共有8种数据类型：number、string、boolean、null、undefined、object、symbol、bigInt。</p><p>我们可以使用 <strong>typeof运算符</strong> 来检查数据类型。 <code>typeof xxx</code> 会返回变量的数据类型。（但需要注意的是 <code>typeof null</code> 返回的是 object，这是js的历史遗留问题，用 <code>xxx === null</code> 代替判断）</p><ul><li><strong>基本数据类型:</strong> 除 object 以外的其他7种类型都是。</li><li><strong>引用数据类型：</strong> object，其内部包含 Array，Function， Date。</li></ul><h2 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换" aria-hidden="true">#</a> 类型转换</h2><ul><li><p><strong>转string类型：</strong> （前两个为强制类型转换，第三个是隐式转换）</p><ul><li><code>xxx.toString()</code> 方法。<strong>强制转换</strong> 但不适用于null和undefined，因为他们自身上没有方法。</li><li><code>String(xxx)</code> <strong>强制转换</strong> 对自身上有 <code>toString()</code> 的会直接调用。null直接返回&quot;null&quot;,undefined直接返回&quot;undefined&quot;。</li><li><code>xxx + &#39;&#39;</code> 任意的数据类型 + &quot;&quot;. <strong>隐式转换</strong> 隐式的将整体转换为字符串</li></ul></li><li><p><strong>转number类型：</strong></p><ul><li><code>Number(xxx)</code> <strong>强制转换</strong> 纯数字的字符串会正常转换，非纯数字字符串或undefined转为 <strong>NaN</strong>。空串或null转为 0，布尔值true为 1，false为 0.</li><li><code>parseInt(xxx)</code> 或 <code>parseFloat(xxx)</code> <strong>强制转换</strong> 可以将<strong>一个字符串中的头部有效的整数位</strong>提取出来，并转换为Number。 非string会先转为string再执行。</li></ul></li><li><p><strong>转boolean类型：</strong></p><ul><li><code>Boolean(xxx)</code> **强制转换 ** 除了空串， 0， NaN, undefined， null会转为false，其余都是true。</li></ul></li></ul><h2 id="基础语法" tabindex="-1"><a class="header-anchor" href="#基础语法" aria-hidden="true">#</a> 基础语法</h2><p>关于流程控制，判断，循环，遍历等不再记录笔记，各种语言都是相通的。</p><h2 id="常用方法" tabindex="-1"><a class="header-anchor" href="#常用方法" aria-hidden="true">#</a> 常用方法</h2><h3 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> <strong>字符串</strong></h3><h4 id="查找" tabindex="-1"><a class="header-anchor" href="#查找" aria-hidden="true">#</a> 查找</h4><p>str.<code>charAt</code>(2) == str[2] 返回字符串指定位置的字符</p><p>str.<code>includes</code>(searchStr, position?) 判断是否包含指定子串</p><p>str.<code>indexOf</code>(searchStr, position?) 返回指定字串第一次出现的开始索引，没有返回-1</p><p>str.<code>lastIndexOf</code>(searchStr, position?) 返回指定字串最后一次出现的开始索引,没有返回-1</p><p>str.<code>search</code>(regexp) 返回正则第一次匹配到的索引，没有返回-1</p><h4 id="其他常用方法" tabindex="-1"><a class="header-anchor" href="#其他常用方法" aria-hidden="true">#</a> 其他常用方法</h4><p>str.<code>toLowerCase</code>() 返回字符串的全小写格式</p><p>str.<code>toUpperCase</code>() 返回字符串的全大写格式</p><p>str.<code>trim</code>() 清除字符串两边可能存在的空格</p><p>str.<code>trimStart</code>() 清除字符串开头可能存在的空格</p><p>str.<code>trimEnd</code>() 清除字符串结尾可能存在的空格</p><p>str.<code>concat</code>(str2,[...strN]) 字符串拼接，返回拼接完的新字符串</p><p>str.<code>repeat</code>(count) 返回重复指定次数的新字符串</p><p>str.<code>substring</code>(indexStart[, indexEnd]) 返回指定开始位置到指定结束（不包括）的子串，不影响原来的</p><p>str.<code>slice</code>(beginIndex[, endIndex]) 返回指定开始位置到指定结束（不包括）的子串，不影响原来的</p><p>str.<code>split</code>(separator[, limit]) 返回以指定字符分隔后的数组</p><p>判断字符串是否以指定子串开头/结尾，index表示搜索位置，默认0 length表示设置字符串结尾位置</p><p>str.<code>stratsWith</code>(searchStr,index?)</p><p>str.<code>endsWith</code>(searchStr,length?)</p><p>匹配指定的字符串或正则表达式，并用新的字符串代替</p><p>str.<code>replace</code>(regexp|substr, newSubStr|function)</p><h3 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> <strong>数组</strong></h3><h4 id="增加元素" tabindex="-1"><a class="header-anchor" href="#增加元素" aria-hidden="true">#</a> 增加元素</h4><p><em>arr.<code>push</code>(3)</em> 增加元素到数组末尾</p><p><em>arr.<code>unshift</code>(0)</em> 增加元素到数组开头</p><h4 id="删除元素" tabindex="-1"><a class="header-anchor" href="#删除元素" aria-hidden="true">#</a> 删除元素</h4><p><em>arr.<code>pop</code>()</em> 删除末尾元素</p><p><em>arr.<code>shift</code>()</em> 删除开头元素</p><p>从哪个下标位置开始（包括），删几个，增加的元素（多选）。对原数组做修改</p><p><em>arr.<code>splice</code>(start, deleteCount?, item?)</em></p><h4 id="修改元素" tabindex="-1"><a class="header-anchor" href="#修改元素" aria-hidden="true">#</a> 修改元素</h4><p>数组下标直接修改</p><h4 id="查找元素" tabindex="-1"><a class="header-anchor" href="#查找元素" aria-hidden="true">#</a> 查找元素</h4><p>返回符合回调函数的第一个元素/最后一个元素的 <strong>值</strong> ，没有返回undefind 回调函数需要返回一个Boolean值</p><p><em>arr.<code>find</code>( (element, index?, array?) =&gt; { /</em> … <em>/ } )</em></p><p><em>arr.<code>findLast</code>( (element, index?, array?) =&gt; { /</em> … <em>/ } )</em></p><p>返回符合回调函数的第一个元素/最后一个元素的 <strong>索引</strong>，没有返回-1 回调函数需要返回一个Boolean值</p><p><em>arr.<code>findIndex</code>((element, index, array) =&gt; { /</em> … <em>/ } )</em></p><p><em>arr.<code>findLastIndex</code>((element, index, array) =&gt; { /</em> … <em>/ } )</em></p><p>判断数组中是否 <strong>包含</strong> 指定元素</p><p><em>arr.<code>includes</code>(searchElement, fromIndex?)</em></p><p>返回数组中指定元素的第一个/最后一个 <strong>索引</strong>,没有返回-1</p><p><em>arr.<code>indexOf</code>(searchElement, fromIndex?)</em></p><p><em>arr.<code>lastIndexOf</code>(searchElement, fromIndex?)</em></p><h4 id="遍历数组" tabindex="-1"><a class="header-anchor" href="#遍历数组" aria-hidden="true">#</a> 遍历数组</h4><p>对数组的每个元素执行一次给定的函数，没有返回值</p><p><em>arr.<code>forEach</code>((element, index?, array?) =&gt; { /</em> … <em>/ })</em></p><p>测试数组内是否所有元素都能通过指定函数,返回Boolean值</p><p><em>arr.<code>every</code>((element, index, array) =&gt; { /</em> … <em>/ } )</em></p><p>测试数组内是否至少有一个元素可以通过指定函数,返回Boolean值</p><p><em>arr.<code>some</code>((element, index, array) =&gt; { /</em> … <em>/ } )</em></p><p>测试数组内的每个元素是否可以通过指定函数，返回由通过元素组成的数组</p><p><em>arr.<code>filter</code>((element, index, array) =&gt; { /</em> … <em>/ } )</em></p><p>对数组的每个元素执行一次给定的函数，并将每个元素执行返回的值组成一个新数组</p><p><em>arr.<code>map</code>((element, index, array) =&gt; { /</em> … <em>/ })</em></p><p>对数组中的每个元素按序执行一次指定函数，并且每次都会将先前元素的计算结果作为参数传入，最后将其结果汇总为单个返回值。若不传初始值initialValue，则将数组索引为 0 的元素作为初始值，从索引 1 元素开始执行函数。</p><p><em>arr.<code>reduce</code>((previousValue, currentValue, currentIndex, array) =&gt; { /</em> … <em>/ }, initialValue?)</em></p><h4 id="其他常用方法-1" tabindex="-1"><a class="header-anchor" href="#其他常用方法-1" aria-hidden="true">#</a> 其他常用方法</h4><p><strong>数组拼接</strong>，返回一个新数组，valueN为数组或值</p><p><em>arr.<code>concat</code>(value0, value1, /</em> … ,<em>/ valueN)</em></p><p><strong>数组转字符串</strong>，参数为分隔符，不传分隔符是逗号</p><p><em>arr.<code>join</code>(&#39;-&#39;)</em></p><p>**数组翻转</p><p><em>arr.<code>reverse()</code></em></p><p><strong>数组截取</strong></p><p><em>arr.<code>slice</code>(start, end)</em></p><p>**数组排序</p><p><em>arr.<code>sort</code>((a, b) =&gt; { return a - b } )</em> 升序</p><p><em>arr.<code>sort</code>((a, b) =&gt; { return b - a } )</em> 降序</p><p><strong>获取所有的值的迭代器对象</strong></p><p><em>arr.<code>values()</code></em></p><p><strong>数组判断</strong></p><p><em><code>Array.isArray</code>(arr)</em></p><p><strong>类数组转数组</strong></p><p><em>Array.<code>form(arr)</code></em></p><h3 id="对象" tabindex="-1"><a class="header-anchor" href="#对象" aria-hidden="true">#</a> <strong>对象</strong></h3><p><strong>对象拷贝（浅拷贝）</strong> 将所有可枚举的自有属性从原对象拷贝到目标对象上</p><p><em><code>Object.assgin</code>(target,sources)</em></p><p><strong>对象属性存在判断</strong></p><p><em><code>Object.hasOwn</code>(instance, prop)</em></p><p><em>obj.<code>hasOwnProperty</code>(prop)</em></p><p><strong>对象原型链关系判断</strong> 测试一个对象是否存在于另一个对象的原型链上</p><p><em>prototypeObj.<code>isPrototypeOf</code>(object)</em></p><p><strong>获取所有的键</strong><br><em><code>Object.keys</code>(obj)</em> 返回可枚举属性的数组</p><p><em><code>Object.getOwnPropertyNames</code>(obj)</em> 返回所有自身属性的数组(包括不可枚举属性,不包括Symbol)</p><p><em><code>Object.getOwnPropertySymbols</code>(obj)</em> 返回Symbol属性的数组</p><p><strong>获取所有的值（浅层）</strong></p><p><em><code>Object.values</code>(obj)</em></p>',102),n=[a];function c(p,s){return r(),o("div",null,n)}const l=e(d,[["render",c],["__file","js基础.html.vue"]]);export{l as default};
