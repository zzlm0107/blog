import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as c,c as o,a as n,b as s,d as i,e as a}from"./app-6422d99d.js";const l={},u=a(`<h2 id="初识canvas" tabindex="-1"><a class="header-anchor" href="#初识canvas" aria-hidden="true">#</a> 初识canvas</h2><p><code>&lt;canvas&gt;</code>元素用于生成图像。它本身就像一个画布，JavaScript 通过操作它的 API，在上面生成图像。它的底层是一个个像素，基本上<code>&lt;canvas&gt;</code>是一个可以用 JavaScript 操作的位图（bitmap）。</p><p>它与 SVG 图像的区别在于，<code>&lt;canvas&gt;</code>是脚本调用各种方法生成图像，SVG 则是一个 XML 文件，通过各种子元素生成图像。</p><p>使用 Canvas API 之前，需要在网页里面新建一个<code>&lt;canvas&gt;</code>元素。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>canvas<span class="token punctuation">&quot;</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>400<span class="token punctuation">&quot;</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>250<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  您的浏览器不支持 Canvas
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果浏览器不支持这个 API，就会显示<code>&lt;canvas&gt;</code>标签中间的文字：“您的浏览器不支持 Canvas”。</p><p>每个<code>&lt;canvas&gt;</code>元素都有一个对应的<code>CanvasRenderingContext2D</code>对象（上下文对象）。Canvas API 就定义在这个对象上面。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 获取canvas标签对象</span>
<span class="token keyword">var</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;myCanvas&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 调用标签上的方法，获取 2d 实例对象</span>
<span class="token keyword">var</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&#39;2d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>按照用途，Canvas API 分成两大部分：绘制图形和图像处理。</p><h2 id="绘制基本图形" tabindex="-1"><a class="header-anchor" href="#绘制基本图形" aria-hidden="true">#</a> 绘制基本图形</h2><p>Canvas 画布提供了一个作图的平面空间，该空间的每个点都有自己的坐标。原点<code>(0, 0)</code>位于图像左上角，<code>x</code>轴的正向是原点向右，<code>y</code>轴的正向是原点向下。</p><p>下面是一些绘制时常见的方法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 开始绘制路径</span>
CanvasRenderingContext2D<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 结束路径，返回到当前路径的起始点，会从当前点到起始点绘制一条直线</span>
CanvasRenderingContext2D<span class="token punctuation">.</span><span class="token function">closePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 设置路径的起点，即将一个新路径的起始点移动到(x，y)坐标</span>
CanvasRenderingContext2D<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 使用直线从当前点连接到(x, y)坐标</span>
CanvasRenderingContext2D<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 在路径内部填充颜色（默认为黑色）</span>
CanvasRenderingContext2D<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 指定路径填充的颜色和样式（默认为黑色）</span>
CanvasRenderingContext2D<span class="token punctuation">.</span>fillStyle

<span class="token comment">// 路径线条着色（默认为黑色），即显示路径</span>
CanvasRenderingContext2D<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 指定路径线条的颜色和样式（默认为黑色）</span>
CanvasRenderingContext2D<span class="token punctuation">.</span>strokeStyle
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>绘制矩形</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 都接受四个参数，分别是矩形左上角的横坐标和纵坐标、矩形的宽和高。</span>

ctx<span class="token punctuation">.</span><span class="token function">rect</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span>			<span class="token comment">// 绘制矩形路径</span>
ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span>		<span class="token comment">// 绘制填充矩形</span>
ctx<span class="token punctuation">.</span><span class="token function">strokeRect</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span>		<span class="token comment">// 绘制矩形边框</span>
ctx<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span>		<span class="token comment">// 清除矩形范围内的像素</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>绘制圆弧</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 绘制圆弧路径</span>
<span class="token comment">// 参数： 起点x坐标，起点y坐标，半径，开始角度，结束角度，是否逆时针绘制</span>
ctx<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> radius<span class="token punctuation">,</span> startAngle<span class="token punctuation">,</span> endAngle<span class="token punctuation">,</span> anticlockwise<span class="token punctuation">)</span>
<span class="token comment">// 通过指定两根切线和半径绘制弧形</span>
ctx<span class="token punctuation">.</span><span class="token function">arcTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 实例</span>
ctx<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>绘制二次贝塞尔曲线</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 确定绘制起点</span>
ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
<span class="token comment">// 给定两点坐标，确定基线轨迹</span>
ctx<span class="token punctuation">.</span><span class="token function">quadraticCurveTo</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>
ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>封装路径path2D</strong></p><p>封装路劲就相当于将一段路径的绘制方法提取出来，然后我们就可以实现完整的移动路径，提高效率。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建一个2d路径对象</span>
<span class="token keyword">let</span> chatPath <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Path2D</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 为该路径对象添加路径的绘制方法</span>
chatPath<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token comment">//...</span>

<span class="token comment">// 绘制封装的路径</span>
ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span>chatPath<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="样式控制" tabindex="-1"><a class="header-anchor" href="#样式控制" aria-hidden="true">#</a> 样式控制</h2><p>样式控制主要是控制画笔的颜色，宽度等，从而实现更丰富的绘制效果。</p><p><strong>线条控制</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 指定线条的宽度，默认为1.0</span>
CanvasRenderingContext2D<span class="token punctuation">.</span>lineWidth <span class="token operator">=</span> <span class="token number">2</span>
<span class="token comment">// 指定显示路径的颜色，默认为黑色，可以使用rgba等</span>
CanvasRenderingContext2D<span class="token punctuation">.</span>strokeStyle <span class="token operator">=</span> <span class="token string">&quot;#ff00ff&quot;</span>
<span class="token comment">// 指定填充的颜色</span>
CanvasRenderingContext2D<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">&quot;skyblue&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>颜色渐变</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 定义线性渐变样式, 参数分别是两点的坐标</span>
<span class="token comment">// 方法会在两个位置之间，根据起点终点的颜色，生成一段渐变的颜色设置</span>
CanvasRenderingContext2D<span class="token punctuation">.</span><span class="token function">createLinearGradient</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">)</span>

<span class="token comment">// 实例</span>
<span class="token keyword">let</span> gradient <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">createLinearGradient</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 设置线性渐变范围</span>
gradient<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;pink&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 起点颜色</span>
gradient<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;skyblue&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 终点颜色</span>
ctx<span class="token punctuation">.</span>strokeStyle <span class="token operator">=</span> gradient <span class="token comment">// 给需要渐变的地方赋值</span>


<span class="token comment">// 定义径向渐变样式, 参数分别是两个圆的参数</span>
CanvasRenderingContext2D<span class="token punctuation">.</span><span class="token function">createRadialGradient</span><span class="token punctuation">(</span>x0<span class="token punctuation">,</span> y0<span class="token punctuation">,</span> r0<span class="token punctuation">,</span> x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> r1<span class="token punctuation">)</span>
gradient<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;white&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
gradient<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> gradient<span class="token punctuation">;</span>


<span class="token comment">// 定义扇形渐变，参数：开始渐变的角度，渐变扇形原点</span>
CanvasRenderingContext2D<span class="token punctuation">.</span><span class="token function">createConicGradient</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>
gradient<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;white&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
gradient<span class="token punctuation">.</span><span class="token function">addColorStop</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> gradient<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>阴影</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 阴影的水平位移，默认为0</span>
CanvasRenderingContext2D<span class="token punctuation">.</span>shadowOffsetX <span class="token operator">=</span> <span class="token number">5</span>
<span class="token comment">// 阴影的垂直位移，默认为0</span>
CanvasRenderingContext2D<span class="token punctuation">.</span>shadowOffsetY <span class="token operator">=</span> <span class="token number">5</span>
<span class="token comment">// 阴影的模糊程度，默认为0</span>
CanvasRenderingContext2D<span class="token punctuation">.</span>shadowBlur <span class="token operator">=</span> <span class="token number">8</span>
<span class="token comment">// 阴影的颜色，默认为black</span>
CanvasRenderingContext2D<span class="token punctuation">.</span>shadowColor <span class="token operator">=</span> <span class="token string">&#39;red&#39;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="文字绘制" tabindex="-1"><a class="header-anchor" href="#文字绘制" aria-hidden="true">#</a> 文字绘制</h2><p>下面是一些常用的绘制文字的方法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 在指定位置绘制实心字符</span>
CanvasRenderingContext2D<span class="token punctuation">.</span><span class="token function">fillText</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> maxWidth<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">// 在指定位置绘制空心字符</span>
CanvasRenderingContext2D<span class="token punctuation">.</span><span class="token function">strokeText</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> maxWidth<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment">// 指定字型大小和字体</span>
CanvasRenderingContext2D<span class="token punctuation">.</span>font <span class="token operator">=</span> <span class="token string">&#39;10px sans-serif&#39;</span>
<span class="token comment">// 指定文字对齐方式  start/center/end/left/right</span>
CanvasRenderingContext2D<span class="token punctuation">.</span>textAlign <span class="token operator">=</span> <span class="token string">&#39;start&#39;</span>
<span class="token comment">// 文本的方向 ltr/rtl</span>
CanvasRenderingContext2D<span class="token punctuation">.</span>direction <span class="token operator">=</span> <span class="token string">&#39;inherit&#39;</span>
<span class="token comment">// 文本基线对齐方向  top/middle/bottom ...</span>
CanvasRenderingContext2D<span class="token punctuation">.</span>textBaseline <span class="token operator">=</span> <span class="token string">&#39;alphabetic&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="图像变换" tabindex="-1"><a class="header-anchor" href="#图像变换" aria-hidden="true">#</a> 图像变换</h2><p>以下方法用于图像变换。</p><ul><li><code>CanvasRenderingContext2D.rotate()</code>：图像旋转</li><li><code>CanvasRenderingContext2D.scale()</code>：图像缩放</li><li><code>CanvasRenderingContext2D.translate()</code>：图像平移</li><li><code>CanvasRenderingContext2D.transform()</code>：通过一个变换矩阵完成图像变换</li><li><code>CanvasRenderingContext2D.setTransform()</code>：取消前面的图像变换</li></ul><p><strong>旋转</strong></p><p><code>CanvasRenderingContext2D.rotate()</code>方法用于图像旋转。它接受一个弧度值作为参数，表示顺时针旋转的度数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>ctx<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码会显示一个顺时针倾斜45度的矩形。注意，<code>rotate()</code>方法必须在<code>fillRect()</code>方法之前调用，否则是不起作用的。</p><p>旋转中心点始终是画布左上角的原点。如果要更改中心点，需要使用<code>translate()</code>方法移动画布。</p><p><strong>缩放</strong></p><p><code>CanvasRenderingContext2D.scale()</code>方法用于缩放图像。它接受两个参数，分别是<code>x</code>轴方向的缩放倍率和<code>y</code>轴方向的缩放倍率。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>ctx<span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，原来的矩形是 10 x 10，缩放后展示出来是 100 x 30。</p><p>如果缩放因子为1，就表示图像没有任何缩放。如果为-1，则表示方向翻转。<code>ctx.scale(-1, 1)</code>为水平翻转，<code>ctx.scale(1, -1)</code>表示垂直翻转。</p><p><strong>平移</strong></p><p><code>CanvasRenderingContext2D.translate()</code>方法用于平移图像。它接受两个参数，分别是 x 轴和 y 轴移动的距离（单位像素）。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>

ctx<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>
ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">&#39;red&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>组合操作</strong></p><p><code>CanvasRenderingContext2D.transform()</code>方法接受一个变换矩阵的六个元素作为参数，完成缩放、旋转、移动和倾斜等变形。</p><p>它的使用格式如下。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ctx.transform(a, b, c, d, e, f);
/*
a:水平缩放(默认值1，单位倍数)
b:水平倾斜(默认值0，单位弧度)
c:垂直倾斜(默认值0，单位弧度)
d:垂直缩放(默认值1，单位倍数)
e:水平位移(默认值0，单位像素)
f:垂直位移(默认值0，单位像素)
*/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是一个例子。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>var canvas = document.getElementById(&#39;myCanvas&#39;);
var ctx = canvas.getContext(&#39;2d&#39;);

ctx.transform(2, 0, 0, 1, 50, 50);
ctx.fillRect(0, 0, 100, 100);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，原始图形是 100 x 100 的矩形，结果缩放成 200 x 100 的矩形，并且左上角从<code>(0, 0)</code>移动到<code>(50, 50)</code>。</p><p>注意，多个<code>transform()</code>方法具有叠加效果。</p><p><strong>取消变换</strong></p><p><code>CanvasRenderingContext2D.setTransform()</code>方法取消前面的图形变换，将画布恢复到该方法指定的状态。该方法的参数与<code>transform()</code>方法完全一致。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ctx.translate(50, 50);
ctx.fillRect(0, 0, 100, 100);

ctx.setTransform(1, 0, 0, 1, 0, 0);
ctx.fillRect(0, 0, 100, 100);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，第一个<code>fillRect()</code>方法绘制的矩形，左上角从<code>(0, 0)</code>平移到<code>(50, 50)</code>。<code>setTransform()</code>方法取消了这个变换（已绘制的图形不受影响），将画布恢复到默认状态（变换矩形<code>1, 0, 0, 1, 0, 0</code>），所以第二个矩形的左上角回到<code>(0, 0)</code>。</p><h2 id="图像合成" tabindex="-1"><a class="header-anchor" href="#图像合成" aria-hidden="true">#</a> 图像合成</h2><p>在默认情况之下，如果在Canvas之中将某个物体（源）绘制在另一个物体（目标）之上，那么浏览器就会简单地把源特体的图像叠放在目标物体图像上面。</p><p>简单点讲，在Canvas中，把图像源和目标图像，通过Canvas中的<code>globalCompositeOperation</code>操作，可以得到不同的效果。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>ctx<span class="token punctuation">.</span>globalCompositeOperation <span class="token operator">=</span> <span class="token string">&#39;source-over&#39;</span> <span class="token comment">// 默认，上层图片覆盖下层</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,65),d={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation",target:"_blank",rel:"noopener noreferrer"},r=a(`<h2 id="图片控制" tabindex="-1"><a class="header-anchor" href="#图片控制" aria-hidden="true">#</a> 图片控制</h2><p>Canvas API 允许将图像文件写入画布，做法是读取图片后，使用<code>drawImage()</code>方法将这张图片放上画布。</p><p><code>CanvasRenderingContext2D.drawImage()</code>有三种使用格式。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ctx.drawImage(image, dx, dy);
ctx.drawImage(image, dx, dy, dWidth, dHeight);
ctx.drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>各个参数的含义如下。</p><ul><li>image：图像元素</li><li>sx：图像内部的横坐标，用于映射到画布的放置点上。</li><li>sy：图像内部的纵坐标，用于映射到画布的放置点上。</li><li>sWidth：图像在画布上的宽度，会产生缩放效果。如果未指定，则图像不会缩放，按照实际大小占据画布的宽度。</li><li>sHeight：图像在画布上的高度，会产生缩放效果。如果未指定，则图像不会缩放，按照实际大小占据画布的高度。</li><li>dx：画布内部的横坐标，用于放置图像的左上角</li><li>dy：画布内部的纵坐标，用于放置图像的右上角</li><li>dWidth：图像在画布内部的宽度，会产生缩放效果。</li><li>dHeight：图像在画布内部的高度，会产生缩放效果。</li></ul><p>我们也可以利用canvas绘制图片的功能实现视频的展现控制，添加水印的操作。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> video <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;video&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.btn&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 按钮控制视频播放</span>
btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>video<span class="token punctuation">.</span>paused<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        video<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        video<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// </span>
<span class="token keyword">let</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
img<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&#39;./images/logo.jpeg&#39;</span>
<span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ctx<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>video<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 绘制视频的当前帧</span>
    ctx<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 绘制水印图片</span>
    <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>render<span class="token punctuation">)</span> <span class="token comment">// 浏览器每渲染一帧调用一次</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，调用 <code>ctx.clip(path2D)</code>,传入设定的path2D路径，即可实现将画布裁剪。</p><h2 id="保存与恢复" tabindex="-1"><a class="header-anchor" href="#保存与恢复" aria-hidden="true">#</a> 保存与恢复</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 将当前画布上的画笔等各种状态进行保存,放入一个栈中</span>
ctx<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 将栈中最新一次的状态恢复出来</span>
ctx<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="像素操作" tabindex="-1"><a class="header-anchor" href="#像素操作" aria-hidden="true">#</a> 像素操作</h2><p>通过调用<code>ctx.getImageData(0,0,200,200)</code> 方法即可获取指定区域内的像素数据，数据是一个数组，每四个元素指定了当前像素的rgba值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> imgData <span class="token operator">=</span> <span class="token function">getImageData</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span>

<span class="token comment">// 一些像素处理操作</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token operator">&lt;</span>imageData<span class="token punctuation">.</span>data<span class="token punctuation">.</span>length<span class="token punctuation">,</span> i<span class="token operator">+=</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    imageData<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">255</span> <span class="token operator">-</span> imageData<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    imageData<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">255</span> <span class="token operator">-</span> imageData<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>
    imageData<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">255</span> <span class="token operator">-</span> imageData<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span>
    imageData<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">255</span>
<span class="token punctuation">}</span>

<span class="token comment">// 将数据重新绘制到画布上</span>
ctx<span class="token punctuation">.</span><span class="token function">putImageData</span><span class="token punctuation">(</span>imgData<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14);function k(v,m){const t=p("ExternalLinkIcon");return c(),o("div",null,[u,n("p",null,[s("具体的模式细节参考 "),n("a",d,[s("MDN"),i(t)])]),r])}const x=e(l,[["render",k],["__file","canvas.html.vue"]]);export{x as default};
