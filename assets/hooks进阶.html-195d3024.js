const e=JSON.parse('{"key":"v-357ed326","path":"/code/webDev/react/hooks%E8%BF%9B%E9%98%B6.html","title":"Hooks 进阶","lang":"zh-CN","frontmatter":{"title":"Hooks 进阶","icon":"react","date":"2023-05-02T00:00:00.000Z","category":["React","前端框架"],"tag":["react"],"description":"Hooks Hooks 是react官方为了推行函数式组件而提出的，就是一些封装好的方法，帮助我们更好的使用函数式组件。事实上函数式组件搭配Hooks确实相比类式组件来说使用更加容易，与vue3有异曲同工之妙。 useState State Hook让函数组件也可以有state状态，并进行状态数据的读写操作 语法：const [xxx,setXxx] = useState(initvalue) （需要提前import引入，声明在相关逻辑的顶层） useState()说明：","head":[["meta",{"property":"og:url","content":"https://zzlm0107.github.io/blog/blog/code/webDev/react/hooks%E8%BF%9B%E9%98%B6.html"}],["meta",{"property":"og:site_name","content":"正の博客"}],["meta",{"property":"og:title","content":"Hooks 进阶"}],["meta",{"property":"og:description","content":"Hooks Hooks 是react官方为了推行函数式组件而提出的，就是一些封装好的方法，帮助我们更好的使用函数式组件。事实上函数式组件搭配Hooks确实相比类式组件来说使用更加容易，与vue3有异曲同工之妙。 useState State Hook让函数组件也可以有state状态，并进行状态数据的读写操作 语法：const [xxx,setXxx] = useState(initvalue) （需要提前import引入，声明在相关逻辑的顶层） useState()说明："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-08T14:29:56.000Z"}],["meta",{"property":"article:author","content":"正"}],["meta",{"property":"article:tag","content":"react"}],["meta",{"property":"article:published_time","content":"2023-05-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-08T14:29:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Hooks 进阶\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-05-02T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-08T14:29:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"正\\",\\"url\\":\\"https://github.com/zzlm0107\\"}]}"]]},"headers":[{"level":2,"title":"Hooks","slug":"hooks","link":"#hooks","children":[{"level":3,"title":"useState","slug":"usestate","link":"#usestate","children":[]},{"level":3,"title":"useEffect","slug":"useeffect","link":"#useeffect","children":[]},{"level":3,"title":"useRef","slug":"useref","link":"#useref","children":[]},{"level":3,"title":"useContext","slug":"usecontext","link":"#usecontext","children":[]},{"level":3,"title":"useReducer","slug":"usereducer","link":"#usereducer","children":[]},{"level":3,"title":"useCallback","slug":"usecallback","link":"#usecallback","children":[]},{"level":3,"title":"useMemo","slug":"usememo","link":"#usememo","children":[]},{"level":3,"title":"useImperativeHandle","slug":"useimperativehandle","link":"#useimperativehandle","children":[]},{"level":3,"title":"useLayoutEffect","slug":"uselayouteffect","link":"#uselayouteffect","children":[]},{"level":3,"title":"自定义hooks","slug":"自定义hooks","link":"#自定义hooks","children":[]}]},{"level":2,"title":"函数式组件其他API","slug":"函数式组件其他api","link":"#函数式组件其他api","children":[{"level":3,"title":"forwardRef","slug":"forwardref","link":"#forwardref","children":[]}]}],"git":{"createdTime":1689840466000,"updatedTime":1696775396000,"contributors":[{"name":"zzlm0107","email":"zzlm0107@163.com","commits":3}]},"readingTime":{"minutes":6.53,"words":1958},"filePathRelative":"code/webDev/react/hooks进阶.md","localizedDate":"2023年5月2日","excerpt":"<h2> Hooks</h2>\\n<p>Hooks 是react官方为了推行函数式组件而提出的，就是一些封装好的方法，帮助我们更好的使用函数式组件。事实上函数式组件搭配Hooks确实相比类式组件来说使用更加容易，与vue3有异曲同工之妙。</p>\\n<h3> useState</h3>\\n<p>State Hook让函数组件也可以有state状态，并进行状态数据的读写操作</p>\\n<ol>\\n<li>\\n<p>语法：<code>const [xxx,setXxx] = useState(initvalue)</code> （需要提前import引入，声明在相关逻辑的顶层）</p>\\n</li>\\n<li>\\n<p>useState()说明：</p>\\n</li>\\n</ol>","autoDesc":true}');export{e as data};
