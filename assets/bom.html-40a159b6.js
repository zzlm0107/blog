import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as o}from"./app-c3cb1ad7.js";const e={},t=o(`<p>browser object model 浏览器对象模型。BOM可以使我们通过JS来操作浏览器，<strong>注意浏览器的全局对象只有一个即window，下面的说明对象都是挂载在window的，属于是window的属性。只是书写时会省略掉window</strong></p><h2 id="navigator对象" tabindex="-1"><a class="header-anchor" href="#navigator对象" aria-hidden="true">#</a> navigator对象</h2><p>代表的当前浏览器的信息，使用较少，其中主要用 <strong>userAgent属性</strong> 来判断浏览器标识。</p><h2 id="history对象" tabindex="-1"><a class="header-anchor" href="#history对象" aria-hidden="true">#</a> history对象</h2><p>history对象可以用来操作浏览器的历史记录，实现向前或向后翻页。</p><ul><li><p><code>history.back()</code>: 回退到上一个页面</p></li><li><p><code>history.forward()</code>: 前进到下一个页面</p></li><li><p><code>history.go(参数)</code>: 跳转到指定的页面，当前页面是0，正整数向前跳转对应数量页面，负整数向后回退对应数量页面</p></li></ul><h2 id="location对象" tabindex="-1"><a class="header-anchor" href="#location对象" aria-hidden="true">#</a> location对象</h2><p>location对象中封装了浏览器的地址栏的信息，并且对其相应属性修改操作也会导致地址栏变化引起跳转。</p><ul><li><code>location.href</code>: 浏览器的地址栏信息</li><li><code>location.protocol</code>: 网址的协议</li><li><code>location.host</code>: 网址的域名</li><li><code>location.host</code>: 网址的端口号</li><li><code>location.search</code>: 网址的search参数</li><li><code>location.assign(url)</code>: 跳转页面，与修改 location.href 效果一致</li><li><code>location.reload()</code>: 刷新当前页面</li><li><code>location.replace(url)</code>: 清空历史记录并跳转到指定页面</li></ul><h2 id="json对象" tabindex="-1"><a class="header-anchor" href="#json对象" aria-hidden="true">#</a> JSON对象</h2><p><strong>JSON就是一个特殊格式的字符串</strong>，这个字符串可以被任意的语言所识别。<strong>JSON字符串中的属性名与值必须加双引号</strong></p><ul><li><code>JSON.parse(json)</code>： 将json字符串转换为JS对象</li><li><code>JSON.stringify(obj)</code>： 将JS对象转换为json字符串</li></ul><h2 id="本地-会话存储" tabindex="-1"><a class="header-anchor" href="#本地-会话存储" aria-hidden="true">#</a> 本地/会话存储</h2><ul><li><strong>localStorage</strong>：本地存储，存储在对应网址下的本地存储空间中，浏览器关闭也不会消失。适合持久性存储相关数据。需要手动清除。容量更大。</li><li><strong>sessionStorage</strong>：会话存储，存储在对应网址下的会话存储空间中，相关网址关闭即清空，适合暂时性存储数据。容量较小。</li></ul><p><em>注意：存储的数据必须都是字符串，如果想存对象可以先 JSON.stringify(obj) 转为字符串再存入，以键值对的方式存入。</em></p><p>两种对象的方法都一致，下面以本地存储为例：</p><ul><li><code>localStorage.setItem(key, value)</code> 存入键值对</li><li><code>localStorage.getItem(key)</code> 按key读取value，读取不到返回null</li><li><code>localStorage.removeItem(key)</code> 按key移除键值对</li><li><code>localStorage.clear()</code> 清空存储空间</li></ul><h2 id="计时器" tabindex="-1"><a class="header-anchor" href="#计时器" aria-hidden="true">#</a> 计时器</h2><p>window全局对象上有两个计时器方法：<code>setInterval</code> 和 <code>setTimeout</code></p><p><strong>setInterval</strong> : 定时器，设定时间间隔，每间隔指定时间就执行一次回调函数，会执行多次</p><p><strong>setTimeout</strong> : 延时器，设定延时时间，延时指定时间后才执行回调函数，只执行一次</p><p>如果我们想给回调函数传递参数，只需要在设定时间的后面依次添加即可。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我会在1s后延时触发&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我每隔1s就会触发一次&#39;</span>，val<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> timer1 <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>f1<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token comment">// 设置延时器</span>
<span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer1<span class="token punctuation">)</span> <span class="token comment">// 清除延时器</span>

<span class="token keyword">let</span> timer2 <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>f2<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 设置定时器</span>
<span class="token function">clearInterval</span><span class="token punctuation">(</span>timer2<span class="token punctuation">)</span> <span class="token comment">// 清除定时器</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23),c=[t];function i(l,p){return s(),a("div",null,c)}const u=n(e,[["render",i],["__file","bom.html.vue"]]);export{u as default};
