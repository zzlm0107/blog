import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as e}from"./app-c3cb1ad7.js";const t={},p=e(`<h2 id="作用域问题" tabindex="-1"><a class="header-anchor" href="#作用域问题" aria-hidden="true">#</a> 作用域问题</h2><p>JS的作用域可以分为两种：全局作用域和函数作用域。</p><ul><li><p><strong>全局作用域：</strong> 全局作用域中只有一个全局对象即window实例。在全局作用域中创建的变量和函数最后都会挂载到window对象上，并且可以在在页面的任意位置访问。</p></li><li><p><strong>函数作用域：</strong> 函数执行时创建的作用域，在函数执行完毕就会销毁。内部创建的变量不能在外部访问。变量寻找机制是先找当前内部自身的，找不到就层层向上寻找，直到找到全局作用域。</p></li></ul><p>初期JS只能用 <code>var</code> 声明变量，没有块级作用域。ES6新引入的 <code>let</code> 和 <code>const</code> 声明的变量具有块级作用域。所以现在更推荐使用 <code>let</code> 声明变量。</p><h2 id="this指向问题" tabindex="-1"><a class="header-anchor" href="#this指向问题" aria-hidden="true">#</a> this指向问题</h2><p>this指上下文对象，根据函数的调用方式不同会执向不同的对象。</p><ul><li>全局函数的直接调用，this是window</li><li>以对象方法的形式调用，this是调用的对象</li><li>以构造函数的形式调用时，this是创建的那个对象</li><li>使用call和apply调用时，this是指定的那个对象</li></ul><p>更改this指向的三个方法：</p><ul><li><code>Function.prototype.call(thisArg, arg1, arg2, ...)</code> 立即执行，第一个参数为修改的this指向，后面的都是函数的参数。</li><li><code>Function.prototype.apply(thisArg, arr)</code> 立即执行，第一个参数为修改的this指向，后面是一个数组，里面存放着函数的参数，调用时会将数组元素提取出来传入。</li><li><code>Function.prototype.bind(thisArg，arg1, arg2, ...)</code> 返回一个新数组，即修改this指向后的数组。</li><li>后面的参数会以默认参数的形式放到新数组中。</li></ul><h2 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包" aria-hidden="true">#</a> 闭包</h2><p><strong>闭包</strong>（closure）是一个函数以及其捆绑的周边环境状态的引用的组合。</p><p>使用闭包主要是利用内部函数访问外部函数的作用域。在js中，当函数执行完毕后，其内部声明的变量会检查是否存在引用关系使得该变量需要被继续使用，这种情况下即使函数执行完毕也不会立刻销毁变量。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">makeFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&quot;Mozilla&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">displayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> displayName<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 闭包函数 函数以及其创建时捆绑的周边环境状态的引用的组合。</span>
<span class="token keyword">var</span> myFunc <span class="token operator">=</span> <span class="token function">makeFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>优点：</strong></p><ul><li>可以读取函数内部变量，从而<strong>创建私有变量</strong>，只能通过暴露出去的方法访问。</li><li><strong>延长变量的生命周期</strong>，词法环境被引用使得函数执行完毕不会立刻销毁其内部的变量。</li></ul><p><strong>缺点：</strong></p><ul><li><strong>内存泄漏</strong> 闭包会一直保持对变量的引用而不销毁，过多的使用会导致占用大量内存空间。</li></ul><h2 id="防抖与节流" tabindex="-1"><a class="header-anchor" href="#防抖与节流" aria-hidden="true">#</a> 防抖与节流</h2><p><strong>防抖：</strong> 触发 n 秒后在执行该事件，若在 n 秒内被重复触发，则重新计时</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> timer<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      	<span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token keyword">this</span>
    		<span class="token keyword">let</span> args <span class="token operator">=</span> arguments
        <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>
      	<span class="token comment">// 需要保存this，回调函数是普通形式，里面的this会指向window，需要修改为调用者</span>
        timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>_this<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>节流：</strong> n 秒内只运行一次，若在 n 秒内重复触发，只有第一次生效</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">throttled</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> timer
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          	<span class="token comment">// 不需要保存this，回调函数是箭头函数，this指向上下文对象即函数调用者</span>
            timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>
                timer <span class="token operator">=</span> <span class="token keyword">null</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>问</strong>：为什么返回的函数有的版本会要求必须保存一次this指向呢？</p><p><strong>答：</strong> 需要进行防抖节流的函数里面有可能有 this 相关的语句，所以 this 必须指向调用它的对象，而定时器的回调函数如果是普通函数function形式，那么里面的this向外寻找就找到了定时器的this即window，这是不正确的，但若是使用箭头函数，箭头函数的this是上下文对象，可以获取到调用时的this，此时不必保存。</p><p>防抖场景：</p><ol><li>登录，短信验证等用户可能不小心点击了多次按钮，避免短时间内向后台请求多次。</li><li>resize事件，通常会短时间内触发多次，使用防抖将最后一次触发的一段时间后再修改窗口尺寸，避免性能浪费。</li><li>文本编辑器实时保存，只有在用户停止输入一段后才进行保存操作。</li></ol><p>节流场景:</p><ol><li>浏览器播放事件,每隔一秒计算一次进度信息等</li><li>input 框实时搜索并发送请求展示下拉列表，每隔一秒发送一次请求，（或防抖用户停止输入1s后发送请求）</li></ol><h2 id="浅拷贝与深拷贝" tabindex="-1"><a class="header-anchor" href="#浅拷贝与深拷贝" aria-hidden="true">#</a> 浅拷贝与深拷贝</h2><p>浅拷贝就是对于对象类型的数据只会拷贝其指针，修改拷贝后的数据也会影响原数据。</p><p>深拷贝就是对于对象类型的数据彻底开辟新的内存空间存储另一份。修改拷贝后的数据不会影响原数据。</p><p><strong>浅拷贝方法：</strong></p><ul><li><code>Object.assign(target, source)</code> 将源对象属性添加到目标对象上，相同的键会被覆盖。</li><li>数组上的<code>slice(), concat()</code></li><li>拓展运算符</li></ul><p><strong>深拷贝方法：</strong></p><ul><li><p>lodash的<code>cloneDeep(obj)</code></p></li><li><p><code>JSON.parse( JSON.stringify(obj) )</code> 但会忽略undefined、symbol和函数</p></li><li><p>手写递归循环深拷贝(简单版)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">deepClone</span> <span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//判断source是不是对象</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>source <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token keyword">return</span> source<span class="token punctuation">;</span>

    <span class="token comment">//根据source类型初始化结果变量</span>
    <span class="token keyword">let</span> target <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 判断是否是自身属性</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//判断数据i的类型</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> source<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                target<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                target<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> source<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> target<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="new-构造函数创建流程" tabindex="-1"><a class="header-anchor" href="#new-构造函数创建流程" aria-hidden="true">#</a> new/构造函数创建流程</h2><p>1.创建一个新的空对象</p><p>2.将新的对象作为函数的上下文对象，即将构造函数的this指向这个空对象。</p><p>3.执行构造函数中的代码</p><p>4.如果该函数没有返回对象，返回this，此时this指代的就是新对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">/* new操作符具体就做了三件事 */</span>

<span class="token comment">// 1.创建一个新的空对象</span>
<span class="token keyword">var</span> obj  <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// 2.将这个空对象的 原型 指向构造函数的 原型对象</span>
obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype
<span class="token comment">// 3.将构造函数的this指向这个空对象, 并执行构造函数中的代码，向空对象添加属性和方法</span>
<span class="token function">Person</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="原型与原型链" tabindex="-1"><a class="header-anchor" href="#原型与原型链" aria-hidden="true">#</a> 原型与原型链</h2><ol><li><p>一个函数被创建后，<strong>解析器会默认在函数中添加一个属性<code>prototype</code></strong>，这个属性指向函数的原型对象。</p></li><li><p>当函数作为构造函数使用，<strong>它所创建的对象中都会有一个隐含的属性 <code>__proto__</code> 获取到该构造函数的原型对象。</strong> 这个属性被称为创建对象的原型。</p></li><li><p>如果我们向构造函数的原型对象<code>prototype</code>上添加属性和方法。那么它创建的对象就可以通过他的原型<code>__proto__</code> 获取到构造函数的原型对象，进而获取到里面的属性和方法，这一过程是隐式且自动的。</p></li></ol><p>4.构造函数的原型对象本质上也是一个对象，它也是由object构造函数创建的。</p><p>至此，原型链诞生了：（此图选自他人文章，仅借鉴学习使用）</p><img src="https://pic4.zhimg.com/80/v2-923a4b2f1f88c93eeec301cec81bf03b_720w.webp" alt="原型链图"><p>当我们用构造函数创建一个对象后，我们想要找该对象身上的一个方法，先找对象自身内部；没有找到就通过 <code>p.__proto__</code> 找构造函数的原型对象内部；还没有找到就找 <code>原型对象.__proto__</code> ,找到object的原型对象内部，还没有就返回null。整个结构就是原型链，对象属性方法的查找机制也是顺着原型链查找的。</p><h2 id="事件循环" tabindex="-1"><a class="header-anchor" href="#事件循环" aria-hidden="true">#</a> 事件循环</h2><p>由于JS是单线程语言，即一段时间内只能做一件事，所以对于一些异步的任务并不会持续等待，而是将其推入异步任务队列等待执行，由此产生了js的执行机制探讨。</p><ol><li><p>所有的任务可以分为<strong>同步任务和异步任务</strong>， 同步任务立即执行，异步任务推入异步任务队列等待同步任务执行完毕后再执行。</p></li><li><p>异步任务队列中又细分为<strong>宏任务队列和微任务队列</strong>，在宏任务执行过程中遇到微任务就会将其推入到微任务队列，等到此宏任务执行完毕，就会依次将微任务队列里的微任务提到主线程开始执行，直到清空微任务队列。开始读取下一个宏任务继续循环，直到宏任务队列也清空。<strong>（即每次读取宏任务前都要清空微任务队列）</strong></p></li></ol><p><strong>同步和异步任务分别进入不同的执行环境，同步的进入主线程，即主执行栈，异步的进入任务队列。主线程内的任务执行完毕为空，会去任务队列读取对应的任务，推入主线程执行。 上述过程的不断重复就是我们说的 Event Loop (事件循环)。</strong></p><ul><li><p>宏任务主要包含：script(整体代码)、setTimeout、setInterval、I/O、UI 交互事件、setImmediate(Node.js 环境)</p></li><li><p>微任务主要包含：Promise、MutaionObserver、process.nextTick(Node.js 环境)</p></li></ul><h2 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式" aria-hidden="true">#</a> 正则表达式</h2><p>两种方式创建：前面是匹配规则，后面是匹配模式。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&quot;[A-Z]{6,8}&quot;</span><span class="token punctuation">,</span><span class="token string">&#39;g&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[A-Z]{6,8}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>匹配模式：</strong></p><p>i:忽略大小写（ignore）</p><p>g:全局搜索（global 将默认只匹配1次变为全局搜索匹配）</p><p><strong>匹配规则：</strong></p><ol><li><p>**字符组：**对于一定范围内的顺序字符匹配，全部书写比较麻烦，就可以使用字符组。例如：</p><p><code>[abc1-9]</code> 表示匹配 a 或 b 或 c 以及 1 至 9 两个范围内的任意一个字符。</p></li><li><p><strong>排除字符组</strong>： 与字符组相反，用于匹配一定范围内的非内容的字符。 例如：</p><p><code>[^abc]</code> 表示匹配任意的一个非 a 或 b 或 c 的字符。</p><p>并且由此衍生出了一些快捷的书写方式：</p></li></ol><table><thead><tr><th>书写形式</th><th>表示内容</th><th>含义</th></tr></thead><tbody><tr><td>\\d</td><td>[0-9]</td><td>数字字符,即英文digit（数字）的缩写</td></tr><tr><td>\\D</td><td>[^0-9]</td><td>非数字字符</td></tr><tr><td>\\w</td><td>[0-9a-zA-Z_]</td><td>单词字符。表示数字、大小写字母或下划线，即word的简写</td></tr><tr><td>\\W</td><td>[^0-9a-zA-Z_]</td><td>非单词字符</td></tr><tr><td>\\s</td><td>[ \\t\\v\\n\\r\\f]</td><td>空白符，包括空格、水平制表符、垂直制表符、换行符、回车符、换页符。即space的缩写</td></tr><tr><td>\\S</td><td>[^ \\t\\v\\n\\r\\f]]</td><td>非空白符</td></tr></tbody></table><ol start="3"><li><p><strong>量词：</strong> 用来指定匹配字符需要连续出现的次数。</p><ul><li><p><code>{m,n}</code> 表示出现次数在m次到n次之间（包含）</p></li><li><p><code>{m,}</code> 表示至少出现m次</p></li><li><p><code>{m}</code> 等价于<code>{m,m}</code>，表示正好出现m次</p></li><li><p><code>?</code> 等价于<code>{0,1}</code>，表示出现或者不出现。</p></li><li><p><code>+ </code> 等价于<code>{1,}</code>，表示出现至少一次。</p></li><li><p><code>*</code> 等价于<code>{0,}</code>，表示出现任意次，有可能不出现。</p></li></ul></li><li><p><strong>多选分支：</strong> 用<code>|</code>（管道符）分隔，表示其中任何之一都可以。例如</p><p><code>/abc|cde/</code> 既可以匹配 abc 也可以匹配 cde ，两种都是符合正则的</p></li></ol><p><strong>指定位置匹配</strong></p><p><em>注意字符与字符之间也是有位置的，只是这个位置是&#39;&#39;,即空位置，但在匹配时是可以匹配到的</em></p><ul><li><code>^</code>（脱字符）匹配开头，在多行匹配中匹配行开头</li><li><code>$</code>（美元符号）匹配结尾，在多行匹配中匹配行结尾</li><li><code>\\b</code>是单词边界，具体就是<code>\\w</code>和<code>\\W</code>之间的位置，也包括<code>\\w</code>和<code>^</code>之间的位置，也包括<code>\\w</code>和<code>$</code>之间的位置。</li><li><code>\\B</code>是非单词边界。具体说来就是<code>\\w</code>与<code>\\w</code>、<code>\\W</code>与<code>\\W</code>、<code>^</code>与<code>\\W</code>，<code>\\W</code>与<code>$</code>之间的位置。</li><li><code>(?=p)</code>，其中<code>p</code>是一个子模式，即<code>p</code>前面的位置。</li><li><code>(?!p)</code>, 即<code>p</code>前面的所有位置</li></ul><p><strong>校验字符串</strong></p><p><code>regexp.test(str)</code> 查看正则表达式与指定的字符串是否匹配。返回一个Boolean</p><p><code>regexp.exec(str)</code> 在指定字符串中执行一个搜索匹配。返回一个结果数组或 null</p>`,68),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","js进阶.html.vue"]]);export{r as default};
